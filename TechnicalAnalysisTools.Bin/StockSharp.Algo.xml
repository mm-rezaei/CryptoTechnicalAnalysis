<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StockSharp.Algo</name>
    </assembly>
    <members>
        <member name="T:StockSharp.Algo.AssociatedSecurityAdapter">
            <summary>
            Associated security adapter.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.AssociatedSecurityAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.AssociatedSecurityAdapter"/>.
            </summary>
            <param name="innerAdapter">Inner message adapter.</param>
        </member>
        <member name="M:StockSharp.Algo.AssociatedSecurityAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.AssociatedSecurityAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.AssociatedSecurityAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.BasketCodeAttribute">
            <summary>
            Attribute, applied to derived from <see cref="T:StockSharp.Algo.BasketSecurity"/> class, to provide basket type code.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketCodeAttribute.Code">
            <summary>
            Basket type code.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.BasketCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.BasketCodeAttribute"/>.
            </summary>
            <param name="code">Basket type code.</param>
        </member>
        <member name="T:StockSharp.Algo.BasketSecurity">
            <summary>
            Instruments basket.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.BasketSecurity.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.BasketSecurity"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketSecurity.InnerSecurityIds">
            <summary>
            Instruments, from which this basket is created.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketSecurity.BasketCode">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.BasketSecurity.BasketExpression">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.BasketSecurity.ToSerializedString">
            <summary>
            Save security state to string.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="M:StockSharp.Algo.BasketSecurity.FromSerializedString(System.String)">
            <summary>
            Load security state from <paramref name="text"/>.
            </summary>
            <param name="text">Value, received from <see cref="M:StockSharp.Algo.BasketSecurity.ToSerializedString"/>.</param>
        </member>
        <member name="T:StockSharp.Algo.BasketSecurityBaseProcessor`1">
            <summary>
            Base basket securities processor.
            </summary>
            <typeparam name="TBasketSecurity">Basket security type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.BasketSecurityBaseProcessor`1.#ctor(StockSharp.BusinessEntities.Security)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.BasketSecurityBaseProcessor`1"/>.
            </summary>
            <param name="security">Security.</param>
        </member>
        <member name="P:StockSharp.Algo.BasketSecurityBaseProcessor`1.Security">
            <summary>
            Security.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketSecurityBaseProcessor`1.BasketSecurity">
            <summary>
            Instruments basket.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketSecurityBaseProcessor`1.SecurityId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.BasketSecurityBaseProcessor`1.BasketExpression">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.BasketSecurityBaseProcessor`1.BasketLegs">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.BasketSecurityBaseProcessor`1.Process(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.BasketSecurityBaseProcessor`1.ContainsLeg(StockSharp.Messages.SecurityId)">
            <summary>
            Whether contains the specified leg.
            </summary>
            <param name="securityId">Security ID.</param>
            <returns><see langword="true"/> if the leg exist, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:StockSharp.Algo.ContinuousSecurityBaseProcessor`1">
            <summary>
            Base continuous securities processor.
            </summary>
            <typeparam name="TBasketSecurity">Basket security type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.ContinuousSecurityBaseProcessor`1.#ctor(StockSharp.BusinessEntities.Security)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.ContinuousSecurityBaseProcessor`1"/>.
            </summary>
            <param name="security">Security.</param>
        </member>
        <member name="M:StockSharp.Algo.ContinuousSecurityBaseProcessor`1.Process(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.ContinuousSecurityBaseProcessor`1.CanProcess(StockSharp.Messages.SecurityId,System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Determines can process message.
            </summary>
            <param name="securityId">Security ID.</param>
            <param name="serverTime">Change server time.</param>
            <param name="price">Price.</param>
            <param name="volume">Volume.</param>
            <param name="openInterest">Number of open positions (open interest).</param>
            <returns><see langword="true"/> if the specified message can be processed, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:StockSharp.Algo.ContinuousSecurityExpirationProcessor">
            <summary>
            Continuous securities processor for <see cref="T:StockSharp.Algo.ContinuousSecurity"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.ContinuousSecurityExpirationProcessor.#ctor(StockSharp.BusinessEntities.Security)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.ContinuousSecurityExpirationProcessor"/>.
            </summary>
            <param name="security">Security.</param>
        </member>
        <member name="M:StockSharp.Algo.ContinuousSecurityExpirationProcessor.CanProcess(StockSharp.Messages.SecurityId,System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.ContinuousSecurityVolumeProcessor">
            <summary>
            Continuous securities processor for <see cref="T:StockSharp.Algo.VolumeContinuousSecurity"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.ContinuousSecurityVolumeProcessor.#ctor(StockSharp.BusinessEntities.Security)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.ContinuousSecurityVolumeProcessor"/>.
            </summary>
            <param name="security">Security.</param>
        </member>
        <member name="M:StockSharp.Algo.ContinuousSecurityVolumeProcessor.CanProcess(StockSharp.Messages.SecurityId,System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.IndexSecurityBaseProcessor`1">
            <summary>
            Base index securities processor.
            </summary>
            <typeparam name="TBasketSecurity">Basket security type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.IndexSecurityBaseProcessor`1.#ctor(StockSharp.BusinessEntities.Security)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.IndexSecurityBaseProcessor`1"/>.
            </summary>
            <param name="security">Security.</param>
        </member>
        <member name="M:StockSharp.Algo.IndexSecurityBaseProcessor`1.Process(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.IndexSecurityBaseProcessor`1.OnCalculate(System.Decimal[])">
            <summary>
            To calculate the basket value.
            </summary>
            <param name="values">Values of basket composite instruments <see cref="P:StockSharp.Algo.BasketSecurity.InnerSecurityIds"/>.</param>
            <returns>The basket value.</returns>
        </member>
        <member name="T:StockSharp.Algo.WeightedIndexSecurityProcessor">
            <summary>
            Index securities processor for <see cref="T:StockSharp.Algo.WeightedIndexSecurity"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.WeightedIndexSecurityProcessor.#ctor(StockSharp.BusinessEntities.Security)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.WeightedIndexSecurityProcessor"/>.
            </summary>
            <param name="security">Security.</param>
        </member>
        <member name="M:StockSharp.Algo.WeightedIndexSecurityProcessor.OnCalculate(System.Decimal[])">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.BasketSecurityMessageAdapter">
            <summary>
            The messages adapter builds market data for basket securities.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.BasketSecurityMessageAdapter.#ctor(StockSharp.BusinessEntities.ISecurityProvider,StockSharp.Messages.IBasketSecurityProcessorProvider,StockSharp.Algo.Storages.IExchangeInfoProvider,StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.BasketSecurityMessageAdapter"/>.
            </summary>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="processorProvider">Basket security processors provider.</param>
            <param name="exchangeInfoProvider">Exchanges and trading boards provider.</param>
            <param name="innerAdapter">Underlying adapter.</param>
        </member>
        <member name="M:StockSharp.Algo.BasketSecurityMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.BasketSecurityMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.BasketSecurityMessageAdapter.Clone">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.BasketSecurityProcessorProvider">
            <summary>
            Basket security processors provider.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.BasketSecurityProcessorProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.BasketSecurityProcessorProvider"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Candles.BiggerTimeFrameCandleCompressor">
            <summary>
            Compressor of candles from smaller time-frames to bigger.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.BiggerTimeFrameCandleCompressor.#ctor(StockSharp.Messages.MarketDataMessage,StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.BiggerTimeFrameCandleCompressor"/>.
            </summary>
            <param name="subscription">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="builder">The builder of candles of <see cref="T:StockSharp.Messages.TimeFrameCandleMessage"/> type.</param>
        </member>
        <member name="P:StockSharp.Algo.Candles.BiggerTimeFrameCandleCompressor.Subscription">
            <summary>
            Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.BiggerTimeFrameCandleCompressor.CurrentCandle">
            <summary>
            The current candle.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.BiggerTimeFrameCandleCompressor.Reset">
            <summary>
            Reset state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.BiggerTimeFrameCandleCompressor.Process(StockSharp.Messages.CandleMessage)">
            <summary>
            To process the new data.
            </summary>
            <param name="message">The message contains information about the time-frame candle.</param>
            <returns>A new candles changes.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.CandlesHolder">
            <summary>
            Candles holder to create <see cref="T:StockSharp.Algo.Candles.Candle"/> instancies.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Candles.CandlesHolder.CandlesSeriesHolder">
            <summary>
            Candles series holder to create <see cref="T:StockSharp.Algo.Candles.Candle"/> instancies.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandlesHolder.CandlesSeriesHolder.#ctor(StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.CandlesHolder.CandlesSeriesHolder"/>.
            </summary>
            <param name="series">Candles series.</param>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandlesHolder.CandlesSeriesHolder.Series">
            <summary>
            Candles series.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandlesHolder.CandlesSeriesHolder.UpdateCandle(StockSharp.Messages.CandleMessage,StockSharp.Algo.Candles.Candle@)">
            <summary>
            Update candle by new message.
            </summary>
            <param name="message">Message.</param>
            <param name="candle">Updated candle.</param>
            <returns>Candles series.</returns>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandlesHolder.AllCandleSeries">
            <summary>
            List of all candles series, subscribed via <see cref="M:StockSharp.Algo.Candles.CandlesHolder.CreateCandleSeries(System.Int64,StockSharp.Algo.Candles.CandleSeries)"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandlesHolder.Clear">
            <summary>
            Clear state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandlesHolder.CreateCandleSeries(System.Int64,StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            Create new series tracking.
            </summary>
            <param name="transactionId">Request identifier.</param>
            <param name="series">Candles series.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandlesHolder.RemoveCandleSeries(System.Int64)">
            <summary>
            Remove series tracking.
            </summary>
            <param name="transactionId">Request identifier.</param>
            <returns>Candles series.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandlesHolder.TryGetTransactionId(StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            Get request identifier by series.
            </summary>
            <param name="series">Candles series.</param>
            <returns>Request identifier.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandlesHolder.TryGetCandleSeries(System.Int64)">
            <summary>
            Get series by request identifier.
            </summary>
            <param name="transactionId">Request identifier.</param>
            <returns>Candles series or <see langword="null"/> if identifier is non exist.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandlesHolder.UpdateCandle(StockSharp.Messages.CandleMessage,StockSharp.Algo.Candles.Candle@)">
            <summary>
            Update candle by new message.
            </summary>
            <param name="message">Message.</param>
            <param name="candle">Updated candle.</param>
            <returns>Candles series.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.CandleBuilderMessageAdapter">
            <summary>
            Candle builder adapter.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter,StockSharp.Algo.Candles.Compression.CandleBuilderProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilderMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">Inner message adapter.</param>
            <param name="candleBuilderProvider">Candle builders provider.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilderMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.CandleBuilderProvider">
            <summary>
            Candle builders provider.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderProvider.#ctor(StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilderProvider"/>.
            </summary>
            <param name="exchangeInfoProvider">The exchange boards provider.</param>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.CandleBuilderProvider.ExchangeInfoProvider">
            <summary>
            The exchange boards provider.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderProvider.IsRegistered(StockSharp.Messages.MarketDataTypes)">
            <summary>
            Whether the candle type registered.
            </summary>
            <param name="type">Market data type.</param>
            <returns><see langword="true" /> if the candle type registered, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderProvider.Get(StockSharp.Messages.MarketDataTypes)">
            <summary>
            Get candles builder.
            </summary>
            <param name="type">Market data type.</param>
            <returns>Candles builder.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderProvider.Register(StockSharp.Algo.Candles.Compression.ICandleBuilder)">
            <summary>
            Register candles builder.
            </summary>
            <param name="builder">Candles builder.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderProvider.UnRegister(StockSharp.Algo.Candles.Compression.ICandleBuilder)">
            <summary>
            Unregister candles builder.
            </summary>
            <param name="builder">Candles builder.</param>
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.CandleHolderMessageAdapter">
            <summary>
            Candle holder adapter.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleHolderMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.Compression.CandleHolderMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">Inner message adapter.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleHolderMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleHolderMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleHolderMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Candles.Compression.CandleHolderMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform">
            <summary>
            The interface that describes data transformation of the <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder"/> source.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform.BuildFrom">
            <summary>
            Which market-data type is used as a source value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform.Process(StockSharp.Messages.Message)">
            <summary>
            Process message to update current state.
            </summary>
            <param name="message">Message.</param>
            <returns><see langword="true" />, if the message was processed, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform.Time">
            <summary>
            The time of new data occurrence.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform.Price">
            <summary>
            Price.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform.Volume">
            <summary>
            Volume.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform.Side">
            <summary>
            Side.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform.OpenInterest">
            <summary>
            Open interest.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.BaseCandleBuilderValueTransform">
            <summary>
            The base data source transformation for <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.BaseCandleBuilderValueTransform.#ctor(StockSharp.Messages.MarketDataTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.Compression.BaseCandleBuilderValueTransform"/>.
            </summary>
            <param name="buildFrom">Which market-data type is used as a source value.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.BaseCandleBuilderValueTransform.Process(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.BaseCandleBuilderValueTransform.Update(System.DateTimeOffset,System.Decimal,System.Nullable{System.Decimal},System.Nullable{StockSharp.Messages.Sides},System.Nullable{System.Decimal})">
            <summary>
            Update latest values.
            </summary>
            <param name="time">Time.</param>
            <param name="price">Price.</param>
            <param name="volume">Volume.</param>
            <param name="side">Side.</param>
            <param name="openInterest">Open interest.</param>
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.TickCandleBuilderValueTransform">
            <summary>
            The tick based data source transformation for <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilderValueTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.Compression.TickCandleBuilderValueTransform"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilderValueTransform.Process(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.QuoteCandleBuilderValueTransform">
            <summary>
            The order book based data source transformation for <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.QuoteCandleBuilderValueTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.Compression.QuoteCandleBuilderValueTransform"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.QuoteCandleBuilderValueTransform.Type">
            <summary>
            Type of candle based data.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.QuoteCandleBuilderValueTransform.Process(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.Level1CandleBuilderValueTransform">
            <summary>
            The level1 based data source transformation for <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.Level1CandleBuilderValueTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.Compression.Level1CandleBuilderValueTransform"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.Level1CandleBuilderValueTransform.Type">
            <summary>
            Type of candle based data.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.Level1CandleBuilderValueTransform.Process(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.OrderLogCandleBuilderValueTransform">
            <summary>
            The order log based data source transformation for <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.OrderLogCandleBuilderValueTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.Compression.OrderLogCandleBuilderValueTransform"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.OrderLogCandleBuilderValueTransform.Type">
            <summary>
            Type of candle based data.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.OrderLogCandleBuilderValueTransform.Process(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1">
            <summary>
            Candles builder.
            </summary>
            <typeparam name="TCandleMessage">The type of candle which the builder will create.</typeparam>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.CandleBuilder`1.CandleType">
            <summary>
            The candle type.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.#ctor(StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1"/>.
            </summary>
            <param name="exchangeInfoProvider">The exchange boards provider.</param>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.CandleBuilder`1.ExchangeInfoProvider">
            <summary>
            The exchange boards provider.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Process(StockSharp.Messages.MarketDataMessage,StockSharp.Messages.CandleMessage,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            To process the new data.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="currentCandle">The current candle.</param>
            <param name="transform">The data source transformation.</param>
            <returns>A new candles changes.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Process(StockSharp.Messages.MarketDataMessage,StockSharp.Messages.CandleMessage,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform,System.Collections.Generic.IList{StockSharp.Messages.CandleMessage})">
            <summary>
            To process the new data.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="currentCandle">The current candle.</param>
            <param name="transform">The data source transformation.</param>
            <param name="changes">A new candles changes.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.CreateCandle(StockSharp.Messages.MarketDataMessage,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            To create a new candle.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="currentCandle">The current candle.</param>
            <param name="transform">The data source transformation.</param>
            <returns>Created candle.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.IsCandleFinishedBeforeChange(StockSharp.Messages.MarketDataMessage,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            Whether the candle is created before data adding.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="candle">Candle.</param>
            <param name="transform">The data source transformation.</param>
            <returns><see langword="true" /> if the candle should be finished. Otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.FirstInitCandle(StockSharp.Messages.MarketDataMessage,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            To fill in the initial candle settings.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="candle">Candle.</param>
            <param name="transform">The data source transformation.</param>
            <returns>Candle.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.UpdateCandle(StockSharp.Messages.MarketDataMessage,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            To update the candle data.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="candle">Candle.</param>
            <param name="transform">The data source transformation.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.ProcessValue(StockSharp.Messages.MarketDataMessage,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            To process the new data.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="currentCandle">The current candle.</param>
            <param name="transform">The data source transformation.</param>
            <returns>A new candle. If there is not necessary to create a new candle, then <paramref name="currentCandle" /> is returned. If it is impossible to create a new candle (<paramref name="transform" /> cannot be applied to candles), then <see langword="null" /> is returned.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder">
            <summary>
            The builder of candles of <see cref="T:StockSharp.Messages.TimeFrameCandleMessage"/> type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.CandleType">
            <summary>
            The candle type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.GenerateEmptyCandles">
            <summary>
            Whether to create empty candles (<see cref="F:StockSharp.Messages.CandleStates.None"/>) in the lack of trades. The default mode is enabled.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.Timeout">
            <summary>
            The time shift from the time frame end after which a signal is sent to close the unclosed candle forcibly. The default is 10% of the time frame.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.#ctor(StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder"/>.
            </summary>
            <param name="exchangeInfoProvider">The exchange boards provider.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.CreateCandle(StockSharp.Messages.MarketDataMessage,StockSharp.Messages.TimeFrameCandleMessage,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            To create a new candle.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="currentCandle">The current candle.</param>
            <param name="transform">The data source transformation.</param>
            <returns>Created candle.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.IsCandleFinishedBeforeChange(StockSharp.Messages.MarketDataMessage,StockSharp.Messages.TimeFrameCandleMessage,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            Whether the candle is created before data adding.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="candle">Candle.</param>
            <param name="transform">The data source transformation.</param>
            <returns><see langword="true" /> if the candle should be finished. Otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.TickCandleBuilder">
            <summary>
            The builder of candles of <see cref="T:StockSharp.Messages.TickCandleMessage"/> type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.TickCandleBuilder.CandleType">
            <summary>
            The candle type.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.#ctor(StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.Compression.TickCandleBuilder"/>.
            </summary>
            <param name="exchangeInfoProvider">The exchange boards provider.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.CreateCandle(StockSharp.Messages.MarketDataMessage,StockSharp.Messages.TickCandleMessage,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            To create a new candle.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="currentCandle">The current candle.</param>
            <param name="transform">The data source transformation.</param>
            <returns>Created candle.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.IsCandleFinishedBeforeChange(StockSharp.Messages.MarketDataMessage,StockSharp.Messages.TickCandleMessage,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            Whether the candle is created before data adding.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="candle">Candle.</param>
            <param name="transform">The data source transformation.</param>
            <returns><see langword="true" /> if the candle should be finished. Otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.UpdateCandle(StockSharp.Messages.MarketDataMessage,StockSharp.Messages.TickCandleMessage,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            To update the candle data.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="candle">Candle.</param>
            <param name="transform">The data source transformation.</param>
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder">
            <summary>
            The builder of candles of <see cref="T:StockSharp.Messages.VolumeCandleMessage"/> type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder.CandleType">
            <summary>
            The candle type.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder.#ctor(StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder"/>.
            </summary>
            <param name="exchangeInfoProvider">The exchange boards provider.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder.CreateCandle(StockSharp.Messages.MarketDataMessage,StockSharp.Messages.VolumeCandleMessage,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            To create a new candle.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="currentCandle">The current candle.</param>
            <param name="transform">The data source transformation.</param>
            <returns>Created candle.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder.IsCandleFinishedBeforeChange(StockSharp.Messages.MarketDataMessage,StockSharp.Messages.VolumeCandleMessage,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            Whether the candle is created before data adding.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="candle">Candle.</param>
            <param name="transform">The data source transformation.</param>
            <returns><see langword="true" /> if the candle should be finished. Otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.RangeCandleBuilder">
            <summary>
            The builder of candles of <see cref="T:StockSharp.Messages.RangeCandleMessage"/> type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.RangeCandleBuilder.CandleType">
            <summary>
            The candle type.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.RangeCandleBuilder.#ctor(StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.Compression.RangeCandleBuilder"/>.
            </summary>
            <param name="exchangeInfoProvider">The exchange boards provider.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.RangeCandleBuilder.CreateCandle(StockSharp.Messages.MarketDataMessage,StockSharp.Messages.RangeCandleMessage,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            To create a new candle.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="currentCandle">The current candle.</param>
            <param name="transform">The data source transformation.</param>
            <returns>Created candle.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.RangeCandleBuilder.IsCandleFinishedBeforeChange(StockSharp.Messages.MarketDataMessage,StockSharp.Messages.RangeCandleMessage,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            Whether the candle is created before data adding.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="candle">Candle.</param>
            <param name="transform">The data source transformation.</param>
            <returns><see langword="true" /> if the candle should be finished. Otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.PnFCandleBuilder">
            <summary>
            The builder of candles of <see cref="T:StockSharp.Messages.PnFCandleMessage"/> type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.PnFCandleBuilder.CandleType">
            <summary>
            The candle type.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.PnFCandleBuilder.#ctor(StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.Compression.PnFCandleBuilder"/>.
            </summary>
            <param name="exchangeInfoProvider">The exchange boards provider.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.PnFCandleBuilder.Process(StockSharp.Messages.MarketDataMessage,StockSharp.Messages.CandleMessage,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform,System.Collections.Generic.IList{StockSharp.Messages.CandleMessage})">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder">
            <summary>
            The builder of candles of <see cref="T:StockSharp.Messages.RenkoCandleMessage"/> type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder.CandleType">
            <summary>
            The candle type.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder.#ctor(StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder"/>.
            </summary>
            <param name="exchangeInfoProvider">The exchange boards provider.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder.Process(StockSharp.Messages.MarketDataMessage,StockSharp.Messages.CandleMessage,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform,System.Collections.Generic.IList{StockSharp.Messages.CandleMessage})">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.ICandleBuilder">
            <summary>
            The candles builder interface.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilder.CandleType">
            <summary>
            The candle type.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.ICandleBuilder.Process(StockSharp.Messages.MarketDataMessage,StockSharp.Messages.CandleMessage,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            To process the new data.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="currentCandle">The current candle.</param>
            <param name="transform">The data source transformation.</param>
            <returns>A new candles changes.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.Compression.VolumeProfileHelper">
            <summary>
            Extension class for <see cref="T:StockSharp.Messages.CandleMessageVolumeProfile"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.TotalBuyVolume(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            The total volume of bids in the <see cref="T:StockSharp.Messages.CandleMessageVolumeProfile"/>.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns>The total volume of bids.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.TotalSellVolume(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            The total volume of asks in the <see cref="T:StockSharp.Messages.CandleMessageVolumeProfile"/>.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns>The total volume of asks.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.TotalBuyCount(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            The total number of bids in the <see cref="T:StockSharp.Messages.CandleMessageVolumeProfile"/>.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns>The total number of bids.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.TotalSellCount(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            The total number of asks in the <see cref="T:StockSharp.Messages.CandleMessageVolumeProfile"/>.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns>The total number of asks.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            POC (Point Of Control) returns <see cref="T:StockSharp.Messages.CandlePriceLevel"/> which had the maximum volume.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns>The <see cref="T:StockSharp.Messages.CandlePriceLevel"/> which had the maximum volume.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.BuyVolAbovePoC(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            The total volume of bids which was above <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Messages.CandleMessageVolumeProfile)"/>.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns>The total volume of bids.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.BuyVolBelowPoC(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            The total volume of bids which was below <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Messages.CandleMessageVolumeProfile)"/>.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns>The total volume of bids.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.SellVolAbovePoC(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            The total volume of asks which was above <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Messages.CandleMessageVolumeProfile)"/>.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns>The total volume of asks.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.SellVolBelowPoC(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            The total volume of asks which was below <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Messages.CandleMessageVolumeProfile)"/>.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns>The total volume of asks.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.VolumeAbovePoC(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            The total volume which was above <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Messages.CandleMessageVolumeProfile)"/>.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns>Total volume.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.VolumeBelowPoC(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            The total volume which was below <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Messages.CandleMessageVolumeProfile)"/>.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns>Total volume.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.Delta(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            The difference between <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.TotalBuyVolume(StockSharp.Messages.CandleMessageVolumeProfile)"/> and <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.TotalSellVolume(StockSharp.Messages.CandleMessageVolumeProfile)"/>.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns>Delta.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PriceLevelOfMaxDelta(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            It returns the price level at which the maximum <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.Delta(StockSharp.Messages.CandleMessageVolumeProfile)"/> is passed.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns><see cref="T:StockSharp.Messages.CandlePriceLevel"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PriceLevelOfMinDelta(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            It returns the price level at which the minimum <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.Delta(StockSharp.Messages.CandleMessageVolumeProfile)"/> is passed.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns>The price level.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.DeltaAbovePoC(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            The total Delta which was above <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Messages.CandleMessageVolumeProfile)"/>.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns>Delta.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.DeltaBelowPoC(StockSharp.Messages.CandleMessageVolumeProfile)">
            <summary>
            The total Delta which was below <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Messages.CandleMessageVolumeProfile)"/>.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <returns>Delta.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.Update(StockSharp.Messages.CandleMessageVolumeProfile,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)">
            <summary>
            To update the profile with new value.
            </summary>
            <param name="volumeProfile">Volume profile.</param>
            <param name="transform">The data source transformation.</param>
        </member>
        <member name="T:StockSharp.Algo.Candles.CandleManagerContainer">
            <summary>
            The standard container that stores candles data.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.CandleManagerContainer"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleManagerContainer.CandlesKeepTime">
            <summary>
            Candles storage time in memory. The default is 2 days.
            </summary>
            <remarks>
            If the value is set to <see cref="F:System.TimeSpan.Zero"/> then candles will not be deleted.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.AddCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle)">
            <summary>
            To add a candle for the series.
            </summary>
            <param name="series">Candles series.</param>
            <param name="candle">Candle.</param>
            <returns><see langword="true" /> if the candle is not added previously, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset)">
            <summary>
            To get all associated with the series candles for the <paramref name="time" /> period.
            </summary>
            <param name="series">Candles series.</param>
            <param name="time">The candle period.</param>
            <returns>Candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To get all associated with the series candles.
            </summary>
            <param name="series">Candles series.</param>
            <returns>Candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandle(StockSharp.Algo.Candles.CandleSeries,System.Int32)">
            <summary>
            To get a candle by the index.
            </summary>
            <param name="series">Candles series.</param>
            <param name="candleIndex">The candle's position number from the end.</param>
            <returns>The found candle. If the candle does not exist, then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,Ecng.ComponentModel.Range{System.DateTimeOffset})">
            <summary>
            To get candles by the series and date range.
            </summary>
            <param name="series">Candles series.</param>
            <param name="timeRange">The date range which should include candles. The <see cref="P:StockSharp.Algo.Candles.Candle.OpenTime"/> value is taken into consideration.</param>
            <returns>Found candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,System.Int32)">
            <summary>
            To get candles by the series and the total number.
            </summary>
            <param name="series">Candles series.</param>
            <param name="candleCount">The number of candles that should be returned.</param>
            <returns>Found candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandleCount(StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To get the number of candles.
            </summary>
            <param name="series">Candles series.</param>
            <returns>Number of candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.Start(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            To notify the container about the start of the candles getting for the series.
            </summary>
            <param name="series">Candles series.</param>
            <param name="from">The initial date from which the candles will be get.</param>
            <param name="to">The final date by which the candles will be get.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.DisposeManaged">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Candles.CandleHelper">
            <summary>
            Extension class for candles.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleHelper.CandleDataSources">
            <summary>
            Possible data types that can be used as candles source.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.IsCandle(System.Type)">
            <summary>
            Determines whether the specified type is derived from <see cref="T:StockSharp.Algo.Candles.Candle"/>.
            </summary>
            <param name="candleType">The candle type.</param>
            <returns><see langword="true"/> if the specified type is derived from <see cref="T:StockSharp.Algo.Candles.Candle"/>, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.TimeFrame(StockSharp.BusinessEntities.Security,System.TimeSpan)">
            <summary>
            To create <see cref="T:StockSharp.Algo.Candles.CandleSeries"/> for <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle"/> candles.
            </summary>
            <param name="security">Security.</param>
            <param name="arg">The value of <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame"/>.</param>
            <returns>Candles series.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.Range(StockSharp.BusinessEntities.Security,StockSharp.Messages.Unit)">
            <summary>
            To create <see cref="T:StockSharp.Algo.Candles.CandleSeries"/> for <see cref="T:StockSharp.Algo.Candles.RangeCandle"/> candles.
            </summary>
            <param name="security">Security.</param>
            <param name="arg">The value of <see cref="P:StockSharp.Algo.Candles.RangeCandle.PriceRange"/>.</param>
            <returns>Candles series.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.Volume(StockSharp.BusinessEntities.Security,System.Decimal)">
            <summary>
            To create <see cref="T:StockSharp.Algo.Candles.CandleSeries"/> for <see cref="T:StockSharp.Algo.Candles.VolumeCandle"/> candles.
            </summary>
            <param name="security">Security.</param>
            <param name="arg">The value of <see cref="P:StockSharp.Algo.Candles.VolumeCandle.Volume"/>.</param>
            <returns>Candles series.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.Tick(StockSharp.BusinessEntities.Security,System.Decimal)">
            <summary>
            To create <see cref="T:StockSharp.Algo.Candles.CandleSeries"/> for <see cref="T:StockSharp.Algo.Candles.TickCandle"/> candles.
            </summary>
            <param name="security">Security.</param>
            <param name="arg">The value of <see cref="P:StockSharp.Algo.Candles.TickCandle.MaxTradeCount"/>.</param>
            <returns>Candles series.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.PnF(StockSharp.BusinessEntities.Security,StockSharp.Messages.PnFArg)">
            <summary>
            To create <see cref="T:StockSharp.Algo.Candles.CandleSeries"/> for <see cref="T:StockSharp.Algo.Candles.PnFCandle"/> candles.
            </summary>
            <param name="security">Security.</param>
            <param name="arg">The value of <see cref="P:StockSharp.Algo.Candles.PnFCandle.PnFArg"/>.</param>
            <returns>Candles series.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.Renko(StockSharp.BusinessEntities.Security,StockSharp.Messages.Unit)">
            <summary>
            To create <see cref="T:StockSharp.Algo.Candles.CandleSeries"/> for <see cref="T:StockSharp.Algo.Candles.RenkoCandle"/> candles.
            </summary>
            <param name="security">Security.</param>
            <param name="arg">The value of <see cref="P:StockSharp.Algo.Candles.RenkoCandle.BoxSize"/>.</param>
            <returns>Candles series.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.Start(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To start candles getting.
            </summary>
            <param name="manager">The candles manager.</param>
            <param name="series">Candles series.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleCount(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To get the number of candles.
            </summary>
            <param name="candleManager">The candles manager.</param>
            <param name="series">Candles series.</param>
            <returns>Number of candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandles``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset)">
            <summary>
            To get all candles for the <paramref name="time" /> period.
            </summary>
            <typeparam name="TCandle">Candles type.</typeparam>
            <param name="candleManager">The candles manager.</param>
            <param name="series">Candles series.</param>
            <param name="time">The candle period.</param>
            <returns>Candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandles``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To get all candles.
            </summary>
            <typeparam name="TCandle">Candles type.</typeparam>
            <param name="candleManager">The candles manager.</param>
            <param name="series">Candles series.</param>
            <returns>Candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandles``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,Ecng.ComponentModel.Range{System.DateTimeOffset})">
            <summary>
            To get candles by date range.
            </summary>
            <typeparam name="TCandle">Candles type.</typeparam>
            <param name="candleManager">The candles manager.</param>
            <param name="series">Candles series.</param>
            <param name="timeRange">The date range which should include candles. The <see cref="P:StockSharp.Algo.Candles.Candle.OpenTime"/> value is taken into consideration.</param>
            <returns>Found candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandles``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,System.Int32)">
            <summary>
            To get candles by the total number.
            </summary>
            <typeparam name="TCandle">Candles type.</typeparam>
            <param name="candleManager">The candles manager.</param>
            <param name="series">Candles series.</param>
            <param name="candleCount">The number of candles that should be returned.</param>
            <returns>Found candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandle``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,System.Int32)">
            <summary>
            To get a candle by the index.
            </summary>
            <typeparam name="TCandle">Candles type.</typeparam>
            <param name="candleManager">The candles manager.</param>
            <param name="series">Candles series.</param>
            <param name="candleIndex">The candle's position number from the end.</param>
            <returns>The found candle. If the candle does not exist, then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset)">
            <summary>
            To get a temporary candle on the specific date.
            </summary>
            <param name="candleManager">The candles manager.</param>
            <param name="series">Candles series.</param>
            <param name="time">The candle date.</param>
            <returns>The found candle (<see langword="null" />, if the candle by the specified criteria does not exist).</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCurrentCandle``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To get the current candle.
            </summary>
            <typeparam name="TCandle">Candles type.</typeparam>
            <param name="candleManager">The candles manager.</param>
            <param name="series">Candles series.</param>
            <returns>The found candle. If the candle does not exist, the <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetSeries``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Object)">
            <summary>
            To get a candles series by the specified parameters.
            </summary>
            <typeparam name="TCandle">Candles type.</typeparam>
            <param name="candleManager">The candles manager.</param>
            <param name="security">The instrument by which trades should be filtered for the candles creation.</param>
            <param name="arg">Candle arg.</param>
            <returns>The candles series. <see langword="null" /> if this series is not registered.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles``1(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade},System.Object,System.Boolean)">
            <summary>
            To create candles from the tick trades collection.
            </summary>
            <typeparam name="TCandle">Candles type.</typeparam>
            <param name="trades">Tick trades.</param>
            <param name="arg">Candle arg.</param>
            <param name="onlyFormed">Process only formed candles.</param>
            <returns>Candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade},StockSharp.Algo.Candles.CandleSeries,System.Boolean)">
            <summary>
            To create candles from the tick trades collection.
            </summary>
            <param name="trades">Tick trades.</param>
            <param name="series">Candles series.</param>
            <param name="onlyFormed">Process only formed candles.</param>
            <returns>Candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage},StockSharp.Algo.Candles.CandleSeries,System.Boolean,StockSharp.Algo.Candles.Compression.CandleBuilderProvider)">
            <summary>
            To create candles from the tick trades collection.
            </summary>
            <param name="trades">Tick trades.</param>
            <param name="series">Candles series.</param>
            <param name="onlyFormed">Process only formed candles.</param>
            <param name="candleBuilderProvider">Candle builders provider.</param>
            <returns>Candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage},StockSharp.Messages.MarketDataMessage,System.Boolean,StockSharp.Algo.Candles.Compression.CandleBuilderProvider)">
            <summary>
            To create candles from the tick trades collection.
            </summary>
            <param name="executions">Tick data.</param>
            <param name="mdMsg">Market data subscription.</param>
            <param name="onlyFormed">Process only formed candles.</param>
            <param name="candleBuilderProvider">Candle builders provider.</param>
            <returns>Candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MarketDepth},StockSharp.Algo.Candles.CandleSeries,StockSharp.Messages.Level1Fields,System.Boolean,StockSharp.Algo.Candles.Compression.CandleBuilderProvider)">
            <summary>
            To create candles from the order books collection.
            </summary>
            <param name="depths">Market depths.</param>
            <param name="series">Candles series.</param>
            <param name="type">Type of candle depth based data.</param>
            <param name="onlyFormed">Process only formed candles.</param>
            <param name="candleBuilderProvider">Candle builders provider.</param>
            <returns>Candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage},StockSharp.Algo.Candles.CandleSeries,StockSharp.Messages.Level1Fields,System.Boolean,StockSharp.Algo.Candles.Compression.CandleBuilderProvider)">
            <summary>
            To create candles from the order books collection.
            </summary>
            <param name="depths">Market depths.</param>
            <param name="series">Candles series.</param>
            <param name="type">Type of candle depth based data.</param>
            <param name="onlyFormed">Process only formed candles.</param>
            <param name="candleBuilderProvider">Candle builders provider.</param>
            <returns>Candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage},StockSharp.Messages.MarketDataMessage,StockSharp.Messages.Level1Fields,System.Boolean,StockSharp.Algo.Candles.Compression.CandleBuilderProvider)">
            <summary>
            To create candles from the order books collection.
            </summary>
            <param name="depths">Market depths.</param>
            <param name="mdMsg">Market data subscription.</param>
            <param name="type">Type of candle depth based data.</param>
            <param name="onlyFormed">Process only formed candles.</param>
            <param name="candleBuilderProvider">Candle builders provider.</param>
            <returns>Candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.ToTrades(System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Candle})">
            <summary>
            To create ticks from candles.
            </summary>
            <param name="candles">Candles.</param>
            <returns>Trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.ToTrades(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage},System.Decimal)">
            <summary>
            To create tick trades from candles.
            </summary>
            <param name="candles">Candles.</param>
            <param name="volumeStep">Volume step.</param>
            <returns>Tick trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.ToTrades(StockSharp.Messages.CandleMessage,System.Decimal,System.Int32)">
            <summary>
            To create tick trades from candle.
            </summary>
            <param name="candleMsg">Candle.</param>
            <param name="volumeStep">Volume step.</param>
            <param name="decimals">The number of decimal places for the volume.</param>
            <returns>Tick trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.IsCandlesRegistered``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Object)">
            <summary>
            Whether the grouping of candles by the specified attribute is registered.
            </summary>
            <typeparam name="TCandle">Candles type.</typeparam>
            <param name="manager">The candles manager.</param>
            <param name="security">The instrument for which the grouping is registered.</param>
            <param name="arg">Candle arg.</param>
            <returns><see langword="true" /> if registered. Otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBounds(System.TimeSpan,System.DateTimeOffset)">
            <summary>
            To get the candle time range.
            </summary>
            <param name="timeFrame">The time frame for which you need to get time range.</param>
            <param name="currentTime">The current time within the range of time frames.</param>
            <returns>The candle time frames.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBounds(System.TimeSpan,System.DateTimeOffset,StockSharp.BusinessEntities.ExchangeBoard)">
            <summary>
            To get candle time frames relatively to the exchange working hours.
            </summary>
            <param name="timeFrame">The time frame for which you need to get time range.</param>
            <param name="currentTime">The current time within the range of time frames.</param>
            <param name="board">The information about the board from which <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.WorkingTime"/> working hours will be taken.</param>
            <returns>The candle time frames.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBounds(System.TimeSpan,System.DateTimeOffset,StockSharp.BusinessEntities.ExchangeBoard,StockSharp.Messages.WorkingTime)">
            <summary>
            To get candle time frames relatively to the exchange working pattern.
            </summary>
            <param name="timeFrame">The time frame for which you need to get time range.</param>
            <param name="currentTime">The current time within the range of time frames.</param>
            <param name="board">Board info.</param>
            <param name="time">The information about the exchange working pattern.</param>
            <returns>The candle time frames.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetLength(StockSharp.Algo.Candles.Candle)">
            <summary>
            To get the candle length.
            </summary>
            <param name="candle">The candle for which you need to get a length.</param>
            <returns>The candle length.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetBody(StockSharp.Algo.Candles.Candle)">
            <summary>
            To get the candle body.
            </summary>
            <param name="candle">The candle for which you need to get the body.</param>
            <returns>The candle body.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTopShadow(StockSharp.Algo.Candles.Candle)">
            <summary>
            To get the candle upper shadow length.
            </summary>
            <param name="candle">The candle for which you need to get the upper shadow length.</param>
            <returns>The candle upper shadow length. If 0, there is no shadow.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetBottomShadow(StockSharp.Algo.Candles.Candle)">
            <summary>
            To get the candle lower shadow length.
            </summary>
            <param name="candle">The candle for which you need to get the lower shadow length.</param>
            <returns>The candle lower shadow length. If 0, there is no shadow.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.IsWhiteOrBlack(StockSharp.Algo.Candles.Candle)">
            <summary>
            Whether the candle is white or black.
            </summary>
            <param name="candle">The candle for which you need to get a color.</param>
            <returns><see langword="true" /> if the candle is white, <see langword="false" /> if the candle is black and <see langword="null" /> if the candle is plane.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.IsMarubozu(StockSharp.Algo.Candles.Candle)">
            <summary>
            Whether the candle is shadowless.
            </summary>
            <param name="candle">The candle for which you need to identify the shadows presence.</param>
            <returns><see langword="true" /> if the candle has no shadows, <see langword="false" /> if it has shadows.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.IsSpinningTop(StockSharp.Algo.Candles.Candle)">
            <summary>
            Whether the candle is neutral to trades.
            </summary>
            <param name="candle">The candle for which you need to calculate whether it is neutral.</param>
            <returns><see langword="true" /> if the candle is neutral, <see langword="false" /> if it is not neutral.</returns>
            <remarks>
            The neutrality is defined as a situation when during the candle neither buyers nor sellers have not created a trend.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.IsHammer(StockSharp.Algo.Candles.Candle)">
            <summary>
            Whether the candle is hammer.
            </summary>
            <param name="candle">The candle which should match the pattern.</param>
            <returns><see langword="true" /> if it is matched, <see langword="false" /> if not.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.IsDragonflyOrGravestone(StockSharp.Algo.Candles.Candle)">
            <summary>
            Whether the candle is dragonfly or tombstone.
            </summary>
            <param name="candle">The candle which should match the pattern.</param>
            <returns><see langword="true" /> if the dragonfly, <see langword="false" /> if the tombstone, <see langword="null" /> - neither one nor the other.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.IsBullishOrBearish(StockSharp.Algo.Candles.Candle)">
            <summary>
            Whether the candle is bullish or bearish.
            </summary>
            <param name="candle">The candle which should be checked for the trend.</param>
            <returns><see langword="true" /> if bullish, <see langword="false" />, if bearish, <see langword="null" /> - neither one nor the other.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCount(StockSharp.BusinessEntities.Security,Ecng.ComponentModel.Range{System.DateTimeOffset},System.TimeSpan)">
            <summary>
            To get the number of time frames within the specified time range.
            </summary>
            <param name="security">The instrument by which exchange working hours are calculated through the <see cref="P:StockSharp.BusinessEntities.Security.Board"/> property.</param>
            <param name="range">The specified time range for which you need to get the number of time frames.</param>
            <param name="timeFrame">The time frame size.</param>
            <returns>The received number of time frames.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCount(StockSharp.BusinessEntities.ExchangeBoard,Ecng.ComponentModel.Range{System.DateTimeOffset},System.TimeSpan)">
            <summary>
            To get the number of time frames within the specified time range.
            </summary>
            <param name="board">The information about the board by which working hours are calculated through the <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.WorkingTime"/> property.</param>
            <param name="range">The specified time range for which you need to get the number of time frames.</param>
            <param name="timeFrame">The time frame size.</param>
            <returns>The received number of time frames.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.GetValueArea(System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Candle})">
            <summary>
            To calculate the area for the candles group.
            </summary>
            <param name="candles">Candles.</param>
            <returns>The area.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.Compress(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage},StockSharp.Algo.Candles.BiggerTimeFrameCandleCompressor,System.Boolean)">
            <summary>
            Compress candles to bigger time-frame candles.
            </summary>
            <param name="source">Smaller time-frame candles.</param>
            <param name="compressor">Compressor of candles from smaller time-frames to bigger.</param>
            <param name="includeLastCandle">Output last active candle as finished.</param>
            <returns>Bigger time-frame candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleHelper.FilterSmallerTimeFrames(System.Collections.Generic.IEnumerable{System.TimeSpan},System.TimeSpan)">
            <summary>
            Filter time-frames to find multiple smaller time-frames.
            </summary>
            <param name="timeFrames">All time-frames.</param>
            <param name="original">Original time-frame.</param>
            <returns>Multiple smaller time-frames.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.Candle">
            <summary>
            Base candle class (contains main parameters).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.Security">
            <summary>
            Security.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.OpenTime">
            <summary>
            Open time.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.CloseTime">
            <summary>
            Close time.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.HighTime">
            <summary>
            High time.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.LowTime">
            <summary>
            Low time.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.OpenPrice">
            <summary>
            Opening price.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.ClosePrice">
            <summary>
            Closing price.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.HighPrice">
            <summary>
            Highest price.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.LowPrice">
            <summary>
            Lowest price.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.TotalPrice">
            <summary>
            Total price size.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.OpenVolume">
            <summary>
            Volume at open.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.CloseVolume">
            <summary>
            Volume at close.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.HighVolume">
            <summary>
            Volume at high.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.LowVolume">
            <summary>
            Volume at low.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.TotalVolume">
            <summary>
            Total volume.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.RelativeVolume">
            <summary>
            Relative volume.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.TotalTicks">
            <summary>
            Number of ticks.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.UpTicks">
            <summary>
            Number of up trending ticks.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.DownTicks">
            <summary>
            Number of down trending ticks.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.PriceLevels">
            <summary>
            Price levels.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.Candle.OpenInterest">
            <summary>
            Open interest.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.Candle.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.Candle.CopyTo``1(``0)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <typeparam name="TCandle">The candle type.</typeparam>
            <param name="destination">The object, to which copied information.</param>
            <returns>The object, to which copied information.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.TimeFrameCandle">
            <summary>
            Time-frame candle.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame">
            <summary>
            Time-frame.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.TimeFrameCandle.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.TimeFrameCandle.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.TickCandle">
            <summary>
            Tick candle.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.TickCandle.MaxTradeCount">
            <summary>
            Maximum tick count.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.TickCandle.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.TickCandle.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Candles.TickCandle"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.VolumeCandle">
            <summary>
            Volume candle.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.VolumeCandle.Volume">
            <summary>
            Maximum volume.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.VolumeCandle.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.VolumeCandle.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Candles.VolumeCandle"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.RangeCandle">
            <summary>
            Range candle.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.RangeCandle.PriceRange">
            <summary>
            Range of price.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.RangeCandle.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.RangeCandle.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Candles.RangeCandle"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.PnFCandle">
            <summary>
            The candle of point-and-figure chart (tac-toe chart).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.PnFCandle.PnFArg">
            <summary>
            Value of arguments.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.PnFCandle.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.PnFCandle.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Candles.PnFCandle"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.RenkoCandle">
            <summary>
            Renko candle.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.RenkoCandle.BoxSize">
            <summary>
            Possible price change range.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.RenkoCandle.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.RenkoCandle.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Candles.RenkoCandle"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.ICandleManagerContainer">
            <summary>
            The interface of the container that stores candles data.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.ICandleManagerContainer.CandlesKeepTime">
            <summary>
            Candles storage time in memory. The default is 2 days.
            </summary>
            <remarks>
            If the value is set to <see cref="F:System.TimeSpan.Zero"/> then candles will not be deleted.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.Start(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            To notify the container about the start of the candles getting for the series.
            </summary>
            <param name="series">Candles series.</param>
            <param name="from">The initial date from which the candles will be get.</param>
            <param name="to">The final date by which the candles will be get.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.AddCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle)">
            <summary>
            To add a candle for the series.
            </summary>
            <param name="series">Candles series.</param>
            <param name="candle">Candle.</param>
            <returns><see langword="true" /> if the candle is not added previously, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset)">
            <summary>
            To get all associated with the series candles for the <paramref name="time" /> period.
            </summary>
            <param name="series">Candles series.</param>
            <param name="time">The candle period.</param>
            <returns>Candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To get all associated with the series candles.
            </summary>
            <param name="series">Candles series.</param>
            <returns>Candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandle(StockSharp.Algo.Candles.CandleSeries,System.Int32)">
            <summary>
            To get a candle by the index.
            </summary>
            <param name="series">Candles series.</param>
            <param name="candleIndex">The candle's position number from the end.</param>
            <returns>The found candle. If the candle does not exist, then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,Ecng.ComponentModel.Range{System.DateTimeOffset})">
            <summary>
            To get candles by the series and date range.
            </summary>
            <param name="series">Candles series.</param>
            <param name="timeRange">The date range which should include candles. The <see cref="P:StockSharp.Algo.Candles.Candle.OpenTime"/> value is taken into consideration.</param>
            <returns>Found candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,System.Int32)">
            <summary>
            To get candles by the series and the total number.
            </summary>
            <param name="series">Candles series.</param>
            <param name="candleCount">The number of candles that should be returned.</param>
            <returns>Found candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandleCount(StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To get the number of candles.
            </summary>
            <param name="series">Candles series.</param>
            <returns>Number of candles.</returns>
        </member>
        <member name="T:StockSharp.Algo.Candles.ICandleManager">
            <summary>
            The candles manager interface.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.ICandleManager.Container">
            <summary>
            The data container.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.ICandleManager.Series">
            <summary>
            All currently active candles series started via <see cref="M:StockSharp.Algo.Candles.ICandleSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.ICandleManager.Sources">
            <summary>
            Candles sources.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Candles.ICandleSource`1">
            <summary>
            Market-data source.
            </summary>
            <typeparam name="TValue">Data type.</typeparam>
        </member>
        <member name="P:StockSharp.Algo.Candles.ICandleSource`1.SpeedPriority">
            <summary>
            The source priority by speed (0 - the best).
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Candles.ICandleSource`1.Processing">
            <summary>
            A new value for processing occurrence event.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Candles.ICandleSource`1.Stopped">
            <summary>
            The series processing end event.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Candles.ICandleSource`1.Error">
            <summary>
            The data transfer error event.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.ICandleSource`1.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To get time ranges for which this source of passed candles series has data.
            </summary>
            <param name="series">Candles series.</param>
            <returns>Time ranges.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.ICandleSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            To send data request.
            </summary>
            <param name="series">The candles series for which data receiving should be started.</param>
            <param name="from">The initial date from which you need to get data.</param>
            <param name="to">The final date by which you need to get data.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.ICandleSource`1.Stop(StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To stop data receiving starting through <see cref="M:StockSharp.Algo.Candles.ICandleSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})"/>.
            </summary>
            <param name="series">Candles series.</param>
        </member>
        <member name="T:StockSharp.Algo.Candles.IExternalCandleSource">
            <summary>
            The external candles source (for example, connection <see cref="T:StockSharp.BusinessEntities.IConnector"/> which provides the possibility of ready candles getting).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.IExternalCandleSource.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To get time ranges for which this source of passed candles series has data.
            </summary>
            <param name="series">Candles series.</param>
            <returns>Time ranges.</returns>
        </member>
        <member name="E:StockSharp.Algo.Candles.IExternalCandleSource.NewCandles">
            <summary>
            Event of new candles occurring, that are received after the subscription by <see cref="M:StockSharp.Algo.Candles.IExternalCandleSource.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})"/>.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Candles.IExternalCandleSource.Stopped">
            <summary>
            The series processing end event.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.IExternalCandleSource.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Subscribe to receive new candles.
            </summary>
            <param name="series">Candles series.</param>
            <param name="from">The initial date from which you need to get data.</param>
            <param name="to">The final date by which you need to get data.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.IExternalCandleSource.UnSubscribeCandles(StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To stop the candles receiving subscription, previously created by <see cref="M:StockSharp.Algo.Candles.IExternalCandleSource.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})"/>.
            </summary>
            <param name="series">Candles series.</param>
        </member>
        <member name="T:StockSharp.Algo.Candles.CandleManager">
            <summary>
            The candles manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManager.ExternalCandleSource.DisposeManaged">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManager.ConnectorCandleSource.DisposeManaged">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.CandleManager"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManager.#ctor(StockSharp.Algo.Connector)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.CandleManager"/>.
            </summary>
            <param name="connector">The connection to trading system to create the source for tick trades by default.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManager.#ctor(StockSharp.Algo.Candles.IExternalCandleSource)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.CandleManager"/>.
            </summary>
            <param name="candleSource">The external candles source (for example, connection <see cref="T:StockSharp.BusinessEntities.IConnector"/> which provides the possibility of ready candles getting).</param>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleManager.Container">
            <summary>
            The data container.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleManager.Series">
            <summary>
            All currently active candles series started via <see cref="M:StockSharp.Algo.Candles.CandleManager.Start(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleManager.Sources">
            <summary>
            Candles sources.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleManager.SpeedPriority">
            <summary>
            The source priority by speed (0 - the best).
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Candles.CandleManager.Processing">
            <summary>
            A new value for processing occurrence event.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Candles.CandleManager.Stopped">
            <summary>
            The series processing end event.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Candles.CandleManager.Error">
            <summary>
            The candles creating error event.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManager.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To get time ranges for which this source of passed candles series has data.
            </summary>
            <param name="series">Candles series.</param>
            <returns>Time ranges.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManager.Start(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            To send data request.
            </summary>
            <param name="series">The candles series for which data receiving should be started.</param>
            <param name="from">The initial date from which you need to get data.</param>
            <param name="to">The final date by which you need to get data.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManager.Stop(StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To stop data receiving starting through <see cref="M:StockSharp.Algo.Candles.CandleManager.Start(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})"/>.
            </summary>
            <param name="series">Candles series.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManager.RaiseError(System.Exception)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Candles.CandleManager.Error"/>.
            </summary>
            <param name="error">Error info.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleManager.DisposeManaged">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Candles.CandleSeries">
            <summary>
            Candles series.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.CandleSeries"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleSeries.#ctor(System.Type,StockSharp.BusinessEntities.Security,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Candles.CandleSeries"/>.
            </summary>
            <param name="candleType">The candle type.</param>
            <param name="security">The instrument to be used for candles formation.</param>
            <param name="arg">The candle formation parameter. For example, for <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle"/> this value is <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame"/>.</param>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleSeries.Security">
            <summary>
            The instrument to be used for candles formation.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleSeries.CandleType">
            <summary>
            The candle type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleSeries.Arg">
            <summary>
            The candle formation parameter. For example, for <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle"/> this value is <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleSeries.WorkingTime">
            <summary>
            The time boundary, within which candles for give series shall be translated.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleSeries.IsCalcVolumeProfile">
            <summary>
            To perform the calculation <see cref="P:StockSharp.Algo.Candles.Candle.PriceLevels"/>. By default, it is disabled.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleSeries.From">
            <summary>
            The initial date from which you need to get data.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleSeries.To">
            <summary>
            The final date by which you need to get data.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleSeries.AllowBuildFromSmallerTimeFrame">
            <summary>
            Allow build candles from smaller timeframe.
            </summary>
            <remarks>
            Available only for <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle"/>.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleSeries.IsRegularTradingHours">
            <summary>
            Use only the regular trading hours for which data will be requested.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleSeries.Count">
            <summary>
            Market-data count.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesMode">
            <summary>
            Build mode.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesFrom">
            <summary>
            Which market-data type is used as a source value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesField">
            <summary>
            Extra info for the <see cref="P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesFrom"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleSeries.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleSeries.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Candles.CandleSeries.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.CollectionSecurityProvider">
            <summary>
            The supplier of information on instruments, getting data from the collection.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.CollectionSecurityProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.CollectionSecurityProvider"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.CollectionSecurityProvider.#ctor(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.CollectionSecurityProvider"/>.
            </summary>
            <param name="securities">The instruments collection.</param>
        </member>
        <member name="M:StockSharp.Algo.CollectionSecurityProvider.Lookup(StockSharp.BusinessEntities.Security)">
            <summary>
            Lookup securities by criteria <paramref name="criteria" />.
            </summary>
            <param name="criteria">The instrument whose fields will be used as a filter.</param>
            <returns>Found instruments.</returns>
        </member>
        <member name="T:StockSharp.Algo.Commissions.CommissionMessageAdapter">
            <summary>
            The message adapter, automatically calculating commission.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Commissions.CommissionMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">The adapter, to which messages will be directed.</param>
        </member>
        <member name="P:StockSharp.Algo.Commissions.CommissionMessageAdapter.CommissionManager">
            <summary>
            The commission calculating manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Commissions.CommissionMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Commissions.CommissionManager">
            <summary>
            The commission calculating manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Commissions.CommissionManager"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Commissions.CommissionManager.Rules">
            <summary>
            The list of commission calculating rules.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Commissions.CommissionManager.Commission">
            <summary>
            Total commission.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionManager.Reset">
            <summary>
            To reset the state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionManager.Process(StockSharp.Messages.Message)">
            <summary>
            To calculate commission.
            </summary>
            <param name="message">The message containing the information about the order or own trade.</param>
            <returns>The commission. If the commission cannot be calculated then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionManager.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionManager.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Commissions.CommissionRule">
            <summary>
            The commission calculating rule.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionRule.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Commissions.CommissionRule"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Commissions.CommissionRule.Value">
            <summary>
            Commission value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Commissions.CommissionRule.Commission">
            <summary>
            Total commission.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Commissions.CommissionRule.Title">
            <summary>
            Header.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionRule.Reset">
            <summary>
            To reset the state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionRule.Process(StockSharp.Messages.Message)">
            <summary>
            To calculate commission.
            </summary>
            <param name="message">The message containing the information about the order or own trade.</param>
            <returns>The commission. If the commission cannot be calculated then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To calculate commission.
            </summary>
            <param name="message">The message containing the information about the order or own trade.</param>
            <returns>The commission. If the commission cannot be calculated then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Commissions.CommissionPerOrderRule">
            <summary>
            Order commission.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionPerOrderRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To calculate commission.
            </summary>
            <param name="message">The message containing the information about the order or own trade.</param>
            <returns>The commission. If the commission cannot be calculated then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="T:StockSharp.Algo.Commissions.CommissionPerTradeRule">
            <summary>
            Trade commission.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionPerTradeRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To calculate commission.
            </summary>
            <param name="message">The message containing the information about the order or own trade.</param>
            <returns>The commission. If the commission cannot be calculated then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="T:StockSharp.Algo.Commissions.CommissionPerOrderVolumeRule">
            <summary>
            Order volume commission.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionPerOrderVolumeRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To calculate commission.
            </summary>
            <param name="message">The message containing the information about the order or own trade.</param>
            <returns>The commission. If the commission cannot be calculated then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="T:StockSharp.Algo.Commissions.CommissionPerTradeVolumeRule">
            <summary>
            Trade volume commission.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionPerTradeVolumeRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To calculate commission.
            </summary>
            <param name="message">The message containing the information about the order or own trade.</param>
            <returns>The commission. If the commission cannot be calculated then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="T:StockSharp.Algo.Commissions.CommissionPerOrderCountRule">
            <summary>
            Number of orders commission.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Commissions.CommissionPerOrderCountRule.Count">
            <summary>
            Order count.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionPerOrderCountRule.Reset">
            <summary>
            To reset the state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionPerOrderCountRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To calculate commission.
            </summary>
            <param name="message">The message containing the information about the order or own trade.</param>
            <returns>The commission. If the commission cannot be calculated then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionPerOrderCountRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionPerOrderCountRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Commissions.CommissionPerTradeCountRule">
            <summary>
            Number of trades commission.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Commissions.CommissionPerTradeCountRule.Count">
            <summary>
            Number of trades.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionPerTradeCountRule.Reset">
            <summary>
            To reset the state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionPerTradeCountRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To calculate commission.
            </summary>
            <param name="message">The message containing the information about the order or own trade.</param>
            <returns>The commission. If the commission cannot be calculated then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionPerTradeCountRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionPerTradeCountRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Commissions.CommissionPerTradePriceRule">
            <summary>
            Trade price commission.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionPerTradePriceRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To calculate commission.
            </summary>
            <param name="message">The message containing the information about the order or own trade.</param>
            <returns>The commission. If the commission cannot be calculated then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="T:StockSharp.Algo.Commissions.CommissionSecurityIdRule">
            <summary>
            Security commission.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Commissions.CommissionSecurityIdRule.Security">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionSecurityIdRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To calculate commission.
            </summary>
            <param name="message">The message containing the information about the order or own trade.</param>
            <returns>The commission. If the commission cannot be calculated then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionSecurityIdRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionSecurityIdRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Commissions.CommissionSecurityTypeRule">
            <summary>
            Security type commission.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionSecurityTypeRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Commissions.CommissionSecurityTypeRule"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Commissions.CommissionSecurityTypeRule.SecurityType">
            <summary>
            Security type.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionSecurityTypeRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To calculate commission.
            </summary>
            <param name="message">The message containing the information about the order or own trade.</param>
            <returns>The commission. If the commission cannot be calculated then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionSecurityTypeRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionSecurityTypeRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Commissions.CommissionBoardCodeRule">
            <summary>
            Board commission.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Commissions.CommissionBoardCodeRule.Board">
            <summary>
            Board code.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionBoardCodeRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To calculate commission.
            </summary>
            <param name="message">The message containing the information about the order or own trade.</param>
            <returns>The commission. If the commission cannot be calculated then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionBoardCodeRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionBoardCodeRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Commissions.CommissionTurnOverRule">
            <summary>
            Turnover commission.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Commissions.CommissionTurnOverRule.TurnOver">
            <summary>
            Turnover.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionTurnOverRule.Reset">
            <summary>
            To reset the state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionTurnOverRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To calculate commission.
            </summary>
            <param name="message">The message containing the information about the order or own trade.</param>
            <returns>The commission. If the commission cannot be calculated then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionTurnOverRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Commissions.CommissionTurnOverRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Commissions.ICommissionManager">
            <summary>
            The commission calculating manager interface.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Commissions.ICommissionManager.Rules">
            <summary>
            The list of commission calculating rules.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Commissions.ICommissionRule">
            <summary>
            The commission calculating rule interface.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Commissions.ICommissionRule.Title">
            <summary>
            Header.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Commissions.ICommissionRule.Commission">
            <summary>
            Total commission.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Commissions.ICommissionRule.Value">
            <summary>
            Commission value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.ICommissionRule.Reset">
            <summary>
            To reset the state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Commissions.ICommissionRule.Process(StockSharp.Messages.Message)">
            <summary>
            To calculate commission.
            </summary>
            <param name="message">The message containing the information about the order or own trade.</param>
            <returns>The commission. If the commission cannot be calculated then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="T:StockSharp.Algo.DataType">
            <summary>
            Data type info.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.DataType.Create(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.DataType"/>.
            </summary>
            <param name="messageType">Message type.</param>
            <param name="arg">The additional argument, associated with data. For example, candle argument.</param>
            <returns>Data type info.</returns>
        </member>
        <member name="P:StockSharp.Algo.DataType.Level1">
            <summary>
            Level1.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.DataType.MarketDepth">
            <summary>
            Market depth.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.DataType.PositionChanges">
            <summary>
            Position changes.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.DataType.News">
            <summary>
            News.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.DataType.Securities">
            <summary>
            Securities.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.DataType.Ticks">
            <summary>
            Ticks.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.DataType.OrderLog">
            <summary>
            Order log.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.DataType.Transactions">
            <summary>
            Transactions.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.DataType.TimeFrame(System.TimeSpan)">
            <summary>
            Create data type info for <see cref="T:StockSharp.Messages.TimeFrameCandleMessage"/>.
            </summary>
            <param name="tf">Candle arg.</param>
            <returns>Data type info.</returns>
        </member>
        <member name="P:StockSharp.Algo.DataType.MessageType">
            <summary>
            Message type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.DataType.Arg">
            <summary>
            The additional argument, associated with data. For example, candle argument.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.DataType.OnEquals(StockSharp.Algo.DataType)">
            <summary>
            Compare <see cref="T:StockSharp.Algo.DataType"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns><see langword="true" />, if the specified object is equal to the current object, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.DataType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:StockSharp.Algo.DataType.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.DataType"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Algo.DataType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:StockSharp.Algo.DataType.IsCandles">
            <summary>
            Determines whether the specified message type is derived from <see cref="T:StockSharp.Messages.CandleMessage"/>.
            </summary>
            <returns><see langword="true"/> if the specified message type is derived from <see cref="T:StockSharp.Messages.CandleMessage"/>, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.DataType.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.DataType.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="P:StockSharp.Algo.Export.Database.DbProviders.BaseDbProvider.CheckUnique">
            <summary>
            To check uniqueness of data in the database. It effects performance.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Export.IndicatorValue">
            <summary>
            Indicator value with time.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Export.IndicatorValue.Security">
            <summary>
            Security.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Export.IndicatorValue.Time">
            <summary>
            Value time.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Export.IndicatorValue.ValueAsDecimal">
            <summary>
            Converted to <see cref="T:System.Decimal"/> type value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Export.IndicatorValue.ValuesAsDecimal">
            <summary>
            Converted to <see cref="T:System.Decimal"/> type values.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Export.IndicatorValue.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Export.BaseExporter">
            <summary>
            The base class of export.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Export.BaseExporter.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.Int32,System.Boolean},System.String)">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Export.BaseExporter"/>.
            </summary>
            <param name="security">Security.</param>
            <param name="arg">The data parameter.</param>
            <param name="isCancelled">The processor, returning process interruption sign.</param>
            <param name="path">The path to file.</param>
        </member>
        <member name="P:StockSharp.Algo.Export.BaseExporter.Security">
            <summary>
            Security.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Export.BaseExporter.Arg">
            <summary>
            The data parameter.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Export.BaseExporter.Path">
            <summary>
            The path to file.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Type,System.Collections.IEnumerable)">
            <summary>
            To export values.
            </summary>
            <param name="dataType">Market data type.</param>
            <param name="values">Value.</param>
        </member>
        <member name="M:StockSharp.Algo.Export.BaseExporter.CanProcess(System.Int32)">
            <summary>
            Is it possible to continue export.
            </summary>
            <param name="exported">The number of exported elements from previous call of the method.</param>
            <returns><see langword="true" />, if export can be continued, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage})">
            <summary>
            To export <see cref="T:StockSharp.Messages.QuoteChangeMessage"/>.
            </summary>
            <param name="messages">Messages.</param>
        </member>
        <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
            <summary>
            To export <see cref="T:StockSharp.Messages.Level1ChangeMessage"/>.
            </summary>
            <param name="messages">Messages.</param>
        </member>
        <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
            <summary>
            To export <see cref="T:StockSharp.Messages.ExecutionMessage"/>.
            </summary>
            <param name="messages">Messages.</param>
        </member>
        <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage})">
            <summary>
            To export <see cref="T:StockSharp.Messages.CandleMessage"/>.
            </summary>
            <param name="messages">Messages.</param>
        </member>
        <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.NewsMessage})">
            <summary>
            To export <see cref="T:StockSharp.Messages.NewsMessage"/>.
            </summary>
            <param name="messages">Messages.</param>
        </member>
        <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.SecurityMessage})">
            <summary>
            To export <see cref="T:StockSharp.Messages.SecurityMessage"/>.
            </summary>
            <param name="messages">Messages.</param>
        </member>
        <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.PositionChangeMessage})">
            <summary>
            To export <see cref="T:StockSharp.Messages.PositionChangeMessage"/>.
            </summary>
            <param name="messages">Messages.</param>
        </member>
        <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Algo.Export.IndicatorValue})">
            <summary>
            To export <see cref="T:StockSharp.Algo.Export.IndicatorValue"/>.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="T:StockSharp.Algo.Export.StockSharpExporter">
            <summary>
            The export into the StockSharp format.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Export.StockSharpExporter.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.Int32,System.Boolean},StockSharp.Algo.Storages.IStorageRegistry,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Export.StockSharpExporter"/>.
            </summary>
            <param name="security">Security.</param>
            <param name="arg">The data parameter.</param>
            <param name="isCancelled">The processor, returning process interruption sign.</param>
            <param name="storageRegistry">The storage of market data.</param>
            <param name="drive">Storage.</param>
            <param name="format">Format type.</param>
        </member>
        <member name="P:StockSharp.Algo.Export.StockSharpExporter.BatchSize">
            <summary>
            The size of transmitted data package. The default is 50 elements.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Export.StockSharpExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.StockSharpExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.StockSharpExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.StockSharpExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.PositionChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.StockSharpExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Algo.Export.IndicatorValue})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.StockSharpExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.StockSharpExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.NewsMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.StockSharpExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.SecurityMessage})">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Export.DatabaseExporter">
            <summary>
            The export into database.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Export.DatabaseExporter.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.Int32,System.Boolean},Ecng.Xaml.DevExp.Database.DatabaseConnectionPair)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Export.DatabaseExporter"/>.
            </summary>
            <param name="security">Security.</param>
            <param name="arg">The data parameter.</param>
            <param name="isCancelled">The processor, returning process interruption sign.</param>
            <param name="connection">The connection to DB.</param>
        </member>
        <member name="P:StockSharp.Algo.Export.DatabaseExporter.BatchSize">
            <summary>
            The size of transmitted data package. The default is 50 elements.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Export.DatabaseExporter.CheckUnique">
            <summary>
            To check uniqueness of data in the database. It effects performance. The default is enabled.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Export.DatabaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.DatabaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.DatabaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.DatabaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.DatabaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.NewsMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.DatabaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.SecurityMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.DatabaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.PositionChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.DatabaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Algo.Export.IndicatorValue})">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Export.ExcelExporter">
            <summary>
            The export into Excel.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Export.ExcelExporter.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.Int32,System.Boolean},System.String,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Export.ExcelExporter"/>.
            </summary>
            <param name="security">Security.</param>
            <param name="arg">The data parameter.</param>
            <param name="isCancelled">The processor, returning process interruption sign.</param>
            <param name="fileName">The path to file.</param>
            <param name="breaked">The processor, which will be called if maximal value of strings is exceeded.</param>
        </member>
        <member name="M:StockSharp.Algo.Export.ExcelExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.ExcelExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.ExcelExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.ExcelExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.PositionChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.ExcelExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Algo.Export.IndicatorValue})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.ExcelExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.ExcelExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.NewsMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.ExcelExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.SecurityMessage})">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Export.TextExporter">
            <summary>
            The export into text file.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Export.TextExporter.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.Int32,System.Boolean},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Export.TextExporter"/>.
            </summary>
            <param name="security">Security.</param>
            <param name="arg">The data parameter.</param>
            <param name="isCancelled">The processor, returning process interruption sign.</param>
            <param name="fileName">The path to file.</param>
            <param name="template">The string formatting template.</param>
            <param name="header">Header at the first line. Do not add header while empty string.</param>
        </member>
        <member name="M:StockSharp.Algo.Export.TextExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.TextExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.TextExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.TextExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.TextExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.NewsMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.TextExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.SecurityMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.TextExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.PositionChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.TextExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Algo.Export.IndicatorValue})">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Export.XmlExporter">
            <summary>
            The export into xml.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Export.XmlExporter.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.Int32,System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Export.XmlExporter"/>.
            </summary>
            <param name="security">Security.</param>
            <param name="arg">The data parameter.</param>
            <param name="isCancelled">The processor, returning process interruption sign.</param>
            <param name="fileName">The path to file.</param>
        </member>
        <member name="M:StockSharp.Algo.Export.XmlExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.XmlExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.XmlExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.XmlExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.PositionChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.XmlExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Algo.Export.IndicatorValue})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.XmlExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.XmlExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.NewsMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Export.XmlExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.SecurityMessage})">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Expressions.ExpressionFormula">
            <summary>
            Compiled mathematical formula.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Expressions.ExpressionFormula.Calculate(System.Decimal[])">
            <summary>
            To calculate the basket value.
            </summary>
            <param name="values">Values of basket composite instruments <see cref="P:StockSharp.Algo.BasketSecurity.InnerSecurityIds"/>.</param>
            <returns>The basket value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Expressions.ExpressionFormula.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Expressions.ExpressionFormula"/>.
            </summary>
            <param name="expression">The mathematic formula.</param>
            <param name="securityIds">IDs securities.</param>
        </member>
        <member name="P:StockSharp.Algo.Expressions.ExpressionFormula.Expression">
            <summary>
            The mathematic formula.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Expressions.ExpressionFormula.Error">
            <summary>
            Compilation error.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Expressions.ExpressionFormula.SecurityIds">
            <summary>
            IDs securities.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Expressions.ExpressionFormula.Functions">
            <summary>
            Available functions.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Expressions.ExpressionFormula.Compile(System.String,System.Boolean)">
            <summary>
            Compile mathematical formula.
            </summary>
            <param name="expression">Text expression.</param>
            <param name="useSecurityIds">Use security ids as variables.</param>
            <returns>Compiled mathematical formula.</returns>
        </member>
        <member name="T:StockSharp.Algo.Expressions.ExpressionHelper">
            <summary>
            Extension class for <see cref="T:StockSharp.Algo.Expressions.ExpressionIndexSecurity"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Expressions.ExpressionHelper.GetSecurityIds(System.String)">
            <summary>
            To get all <see cref="P:StockSharp.BusinessEntities.Security.Id"/> from mathematic formula.
            </summary>
            <param name="expression">Mathematical formula.</param>
            <returns>IDs securities.</returns>
        </member>
        <member name="M:StockSharp.Algo.Expressions.ExpressionHelper.Encode(System.String)">
            <summary>
            To screen off mathematic formula from instruments identifiers <see cref="P:StockSharp.BusinessEntities.Security.Id"/>.
            </summary>
            <param name="expression">The source text.</param>
            <returns>The screened text.</returns>
        </member>
        <member name="M:StockSharp.Algo.Expressions.ExpressionHelper.Decode(System.String)">
            <summary>
            To screen on mathematic formula with instruments identifiers <see cref="P:StockSharp.BusinessEntities.Security.Id"/>.
            </summary>
            <param name="expression">The source text.</param>
            <returns>The unscreened text.</returns>
        </member>
        <member name="P:StockSharp.Algo.Expressions.ExpressionHelper.Functions">
            <summary>
            Available functions.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Expressions.ExpressionHelper.Compile(Ecng.Common.ICompilerService,System.String,System.Boolean)">
            <summary>
            Compile mathematical formula.
            </summary>
            <param name="service">Compiler service.</param>
            <param name="expression">Text expression.</param>
            <param name="useSecurityIds">Use security ids as variables.</param>
            <returns>Compiled mathematical formula.</returns>
        </member>
        <member name="T:StockSharp.Algo.Expressions.ExpressionIndexSecurity">
            <summary>
            The index, built of combination of several instruments through mathematic formula <see cref="P:StockSharp.Algo.Expressions.ExpressionIndexSecurity.Expression"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Expressions.ExpressionIndexSecurity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Expressions.ExpressionIndexSecurity"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Expressions.ExpressionIndexSecurity.Formula">
            <summary>
            Compiled mathematical formula.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Expressions.ExpressionIndexSecurity.Expression">
            <summary>
            The mathematic formula of index.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Expressions.ExpressionIndexSecurity.InnerSecurityIds">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Expressions.ExpressionIndexSecurity.Clone">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Expressions.ExpressionIndexSecurity.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Expressions.ExpressionIndexSecurity.ToSerializedString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Expressions.ExpressionIndexSecurity.FromSerializedString(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Expressions.ExpressionIndexSecurityProcessor">
            <summary>
            Index securities processor for <see cref="T:StockSharp.Algo.Expressions.ExpressionIndexSecurity"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Expressions.ExpressionIndexSecurityProcessor.#ctor(StockSharp.BusinessEntities.Security)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Expressions.ExpressionIndexSecurityProcessor"/>.
            </summary>
            <param name="basketSecurity">The index, built of combination of several instruments through mathematic formula <see cref="P:StockSharp.Algo.Expressions.ExpressionIndexSecurity.Expression"/>.</param>
        </member>
        <member name="M:StockSharp.Algo.Expressions.ExpressionIndexSecurityProcessor.OnCalculate(System.Decimal[])">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.FilterableSecurityProvider">
            <summary>
            Provider of information about instruments supporting search using <see cref="T:StockSharp.Algo.SecurityTrie"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.FilterableSecurityProvider.#ctor(StockSharp.BusinessEntities.ISecurityProvider,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.FilterableSecurityProvider"/>.
            </summary>
            <param name="provider">Security meta info provider.</param>
            <param name="ownProvider"><see langword="true"/> to leave the <paramref name="provider"/> open after the <see cref="T:StockSharp.Algo.FilterableSecurityProvider"/> object is disposed; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="P:StockSharp.Algo.FilterableSecurityProvider.Count">
            <summary>
            Gets the number of instruments contained in the <see cref="T:StockSharp.BusinessEntities.ISecurityProvider"/>.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.FilterableSecurityProvider.Added">
            <summary>
            New instruments added.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.FilterableSecurityProvider.Removed">
            <summary>
            Instruments removed.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.FilterableSecurityProvider.Cleared">
            <summary>
            The storage was cleared.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.FilterableSecurityProvider.Lookup(StockSharp.BusinessEntities.Security)">
            <summary>
            Lookup securities by criteria <paramref name="criteria" />.
            </summary>
            <param name="criteria">The instrument whose fields will be used as a filter.</param>
            <returns>Found instruments.</returns>
        </member>
        <member name="M:StockSharp.Algo.FilterableSecurityProvider.DisposeManaged">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.FilteredMarketDepthAdapter">
            <summary>
            Filtered market depth adapter.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.FilteredMarketDepthAdapter.FilteredMarketDepth">
            <summary>
            Filtered market depth data type.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.FilteredMarketDepthAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.AssociatedSecurityAdapter"/>.
            </summary>
            <param name="innerAdapter">Inner message adapter.</param>
        </member>
        <member name="M:StockSharp.Algo.FilteredMarketDepthAdapter.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.FilteredMarketDepthAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.FilteredMarketDepthAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.FilteredMarketDepthAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.OrderLogMessageAdapter">
            <summary>
            The messages adapter build order book and tick data from order log flow.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.OrderLogMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.OrderLogMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">Underlying adapter.</param>
        </member>
        <member name="M:StockSharp.Algo.OrderLogMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.OrderLogMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.OrderLogMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.OrderLogMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.PermissionCredentialsAuthorization">
            <summary>
            The module of the connection access check based on the <see cref="T:StockSharp.Algo.PermissionCredentialsStorage"/> authorization.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PermissionCredentialsAuthorization.#ctor(StockSharp.Algo.PermissionCredentialsStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.PermissionCredentialsAuthorization"/>.
            </summary>
            <param name="storage">Storage for <see cref="T:StockSharp.Algo.PermissionCredentials"/>.</param>
        </member>
        <member name="T:StockSharp.Algo.PermissionCredentialsRemoteAuthorization">
            <summary>
            The connection access check module based on the <see cref="T:StockSharp.Algo.PermissionCredentialsStorage"/> authentication.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PermissionCredentialsRemoteAuthorization.#ctor(StockSharp.Algo.PermissionCredentialsStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.PermissionCredentialsRemoteAuthorization"/>.
            </summary>
            <param name="storage">Storage for <see cref="T:StockSharp.Algo.PermissionCredentials"/>.</param>
        </member>
        <member name="P:StockSharp.Algo.PermissionCredentialsRemoteAuthorization.Authorization">
            <summary>
            Authorization module.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PermissionCredentialsRemoteAuthorization.AllRemoteUsers">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.PermissionCredentialsRemoteAuthorization.SaveRemoteUser(System.String,System.Security.SecureString,System.Collections.Generic.IEnumerable{System.Net.IPAddress},StockSharp.Algo.UserPermissions)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.PermissionCredentialsRemoteAuthorization.DeleteRemoteUser(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.PermissionCredentialsRemoteAuthorization.ValidateCredentials(System.String,System.Security.SecureString,System.Net.IPAddress)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.PermissionCredentialsRemoteAuthorization.HasPermissions(System.Guid,StockSharp.Algo.UserPermissions,System.String,System.String,System.Object,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.PermissionCredentialsStorage">
            <summary>
            Storage for <see cref="T:StockSharp.Algo.PermissionCredentials"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PermissionCredentialsStorage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.PermissionCredentialsStorage"/>.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="P:StockSharp.Algo.PermissionCredentialsStorage.Credentials">
            <summary>
            Credentials.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PermissionCredentialsStorage.TryGetByLogin(System.String)">
            <summary>
            Get credentials by login.
            </summary>
            <param name="login">Login.</param>
            <returns>Credentials with set of permissions.</returns>
        </member>
        <member name="M:StockSharp.Algo.PermissionCredentialsStorage.Add(StockSharp.Algo.PermissionCredentials)">
            <summary>
            Add new credentials.
            </summary>
            <param name="credentials">Credentials with set of permissions.</param>
        </member>
        <member name="M:StockSharp.Algo.PermissionCredentialsStorage.DeleteByLogin(System.String)">
            <summary>
            Delete credentials by login.
            </summary>
            <param name="login">Login.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:StockSharp.Algo.PermissionCredentialsStorage.LoadCredentials">
            <summary>
            Load credentials from file.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PermissionCredentialsStorage.SaveCredentials">
            <summary>
            Save credentials to file.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Import.CsvImporter">
            <summary>
            Messages importer from text file in CSV format into storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Import.CsvImporter.#ctor(StockSharp.Algo.DataType,System.Collections.Generic.IEnumerable{StockSharp.Algo.Import.FieldMapping},StockSharp.Algo.Storages.ISecurityStorage,StockSharp.Algo.Storages.IExchangeInfoProvider,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Import.CsvImporter"/>.
            </summary>
            <param name="dataType">Data type info.</param>
            <param name="fields">Importing fields.</param>
            <param name="securityStorage">Securities meta info storage.</param>
            <param name="exchangeInfoProvider">Exchanges and trading boards provider.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="storageFormat">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
        </member>
        <member name="P:StockSharp.Algo.Import.CsvImporter.UpdateDuplicateSecurities">
            <summary>
            Update duplicate securities if they already exists.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Import.CsvImporter.SecurityUpdated">
            <summary>
            Security updated event.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Import.CsvImporter.Import(System.String,System.Action{System.Int32},System.Func{System.Boolean})">
            <summary>
            Import from CSV file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="updateProgress">Progress notification.</param>
            <param name="isCancelled">The processor, returning process interruption sign.</param>
        </member>
        <member name="T:StockSharp.Algo.Import.CsvParser">
            <summary>
            Messages parser from text file in CSV format.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.CsvParser.DataType">
            <summary>
            Data type info.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.CsvParser.Fields">
            <summary>
            Importing fields.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.CsvParser.ExtendedInfoStorageItem">
            <summary>
            Extended info <see cref="P:StockSharp.Messages.Message.ExtensionInfo"/> storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.CsvParser.IgnoreNonIdSecurities">
            <summary>
            Ignore securities without identifiers.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Import.CsvParser.#ctor(StockSharp.Algo.DataType,System.Collections.Generic.IEnumerable{StockSharp.Algo.Import.FieldMapping})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Import.CsvParser"/>.
            </summary>
            <param name="dataType">Data type info.</param>
            <param name="fields">Importing fields.</param>
        </member>
        <member name="P:StockSharp.Algo.Import.CsvParser.ColumnSeparator">
            <summary>
            Column separator. Tabulation is denoted by TAB.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.CsvParser.SkipFromHeader">
            <summary>
            Number of lines to be skipped from the beginning of the file (if they contain meta information).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.CsvParser.TimeZone">
            <summary>
            Time zone.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Import.CsvParser.Parse(System.String,System.Func{System.Boolean})">
            <summary>
            Parse CSV file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="isCancelled">The processor, returning process interruption sign.</param>
            <returns>Parsed instances.</returns>
        </member>
        <member name="M:StockSharp.Algo.Import.CsvParser.CreateInstance(System.Type)">
            <summary>
            Create instance for the specified type.
            </summary>
            <param name="msgType">Message type.</param>
            <returns>Instance.</returns>
        </member>
        <member name="T:StockSharp.Algo.Import.FieldMapping">
            <summary>
            Importing field description.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Import.FieldMapping.#ctor(System.String,System.String,System.String,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Import.FieldMapping"/>.
            </summary>
            <param name="name">Name.</param>
            <param name="displayName">Display name.</param>
            <param name="description">Description.</param>
            <param name="type">Field type.</param>
            <param name="isExtended">Is field extended.</param>
        </member>
        <member name="P:StockSharp.Algo.Import.FieldMapping.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.FieldMapping.IsExtended">
            <summary>
            Is field extended.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.FieldMapping.DisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.FieldMapping.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.FieldMapping.Format">
            <summary>
            Date format.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.FieldMapping.Type">
            <summary>
            Field type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.FieldMapping.IsRequired">
            <summary>
            Is field required.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.FieldMapping.IsEnabled">
            <summary>
            Is field enabled.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.FieldMapping.Order">
            <summary>
            Field order.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.FieldMapping.Values">
            <summary>
            Mapping values.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.FieldMapping.DefaultValue">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Import.FieldMapping.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Import.FieldMapping.ApplyFileValue(System.Object,System.String)">
            <summary>
            Apply value.
            </summary>
            <param name="instance">Instance.</param>
            <param name="value">Field value.</param>
        </member>
        <member name="M:StockSharp.Algo.Import.FieldMapping.ApplyDefaultValue(System.Object)">
            <summary>
            Apply default value.
            </summary>
            <param name="instance">Instance.</param>
        </member>
        <member name="M:StockSharp.Algo.Import.FieldMapping.OnApply(System.Object,System.Object)">
            <summary>
            Apply value.
            </summary>
            <param name="instance">Instance.</param>
            <param name="value">Field value.</param>
        </member>
        <member name="M:StockSharp.Algo.Import.FieldMapping.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Import.FieldMapping.Reset">
            <summary>
            Reset state.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Import.FieldMapping`2">
            <summary>
            Importing field description.
            </summary>
            <typeparam name="TInstance">Type, containing the field.</typeparam>
            <typeparam name="TValue">Field value type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Import.FieldMapping`2.#ctor(System.String,System.String,System.String,System.Action{`0,`1},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Import.FieldMapping`2"/>.
            </summary>
            <param name="name">Name.</param>
            <param name="displayName">Display name.</param>
            <param name="description">Description.</param>
            <param name="apply">Apply field value action.</param>
            <param name="isExtended">Is field extended.</param>
        </member>
        <member name="M:StockSharp.Algo.Import.FieldMapping`2.OnApply(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Import.FieldMappingRegistry">
            <summary>
            Importing fields registry.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Import.FieldMappingRegistry.CreateFields(StockSharp.Algo.DataType)">
            <summary>
            Generate importing fields for the specified type.
            </summary>
            <param name="dataType">Data type info.</param>
            <returns>Importing fields.</returns>
        </member>
        <member name="M:StockSharp.Algo.Import.FieldMappingRegistry.CreateExtendedFields(StockSharp.Algo.Storages.IExtendedInfoStorageItem)">
            <summary>
            Generate extended fields for the specified storage.
            </summary>
            <param name="storage">Extended info <see cref="P:StockSharp.Messages.Message.ExtensionInfo"/> storage.</param>
            <returns>Extended fields.</returns>
        </member>
        <member name="T:StockSharp.Algo.Import.FieldMappingValue">
            <summary>
            Mapping value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.FieldMappingValue.ValueFile">
            <summary>
            File value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Import.FieldMappingValue.ValueStockSharp">
            <summary>
            S# value.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Indicators.IndicatorValueAttribute">
            <summary>
            Attribute, applied to indicator, to provide information about type of values <see cref="T:StockSharp.Algo.Indicators.IIndicatorValue"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IndicatorValueAttribute.Type">
            <summary>
            Value type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IndicatorValueAttribute.IsInput">
            <summary>
            Is input.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorValueAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.IndicatorValueAttribute"/>.
            </summary>
            <param name="type">Value type.</param>
            <param name="isInput">Is input.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.IndicatorInAttribute">
            <summary>
            Attribute, applied to indicator, to provide information about type of input values <see cref="T:StockSharp.Algo.Indicators.IIndicatorValue"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorInAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.IndicatorInAttribute"/>.
            </summary>
            <param name="type">Values type.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.IndicatorOutAttribute">
            <summary>
            Attribute, applied to indicator, to provide information about type of output values <see cref="T:StockSharp.Algo.Indicators.IIndicatorValue"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorOutAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.IndicatorOutAttribute"/>.
            </summary>
            <param name="type">Values type.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Correlation">
            <summary>
            Correlation.
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Correlation_and_dependence.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Correlation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Correlation"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Correlation.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Correlation.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Covariance">
            <summary>
            Covariance.
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Covariance.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Covariance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Covariance"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Covariance.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.MoneyFlowIndex">
            <summary>
            Money Flow Index.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MoneyFlowIndex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.MoneyFlowIndex"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MoneyFlowIndex.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.MoneyFlowIndex"/>.
            </summary>
            <param name="length">Period length.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MoneyFlowIndex.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.MoneyFlowIndex.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MoneyFlowIndex.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.StochasticOscillator">
            <summary>
            The stochastic oscillator.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.StochasticOscillator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.StochasticOscillator"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.StochasticOscillator.K">
            <summary>
            %K.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.StochasticOscillator.D">
            <summary>
            %D.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Indicators.VolumeProfileIndicator">
            <summary>
            Volume profile.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.VolumeProfileIndicator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.VolumeProfileIndicator"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.VolumeProfileIndicator.Step">
            <summary>
            The grouping increment.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.VolumeProfileIndicator.UseTotalVolume">
            <summary>
            To use aggregate volume in calculations (when candles do not contain VolumeProfile).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.VolumeProfileIndicator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue">
            <summary>
            The indicator value <see cref="T:StockSharp.Algo.Indicators.VolumeProfileIndicator"/>, derived in result of calculation.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue"/>.
            </summary>
            <param name="indicator">Indicator.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue.Levels">
            <summary>
            Embedded values.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue.IsSupport(System.Type)">
            <summary>
            Does value support data type, required for the indicator.
            </summary>
            <param name="valueType">The data type, operated by indicator.</param>
            <returns><see langword="true" />, if data type is supported, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue.GetValue``1">
            <summary>
            To get the value by the data type.
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <returns>Value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
            <summary>
            To replace the indicator input value by new one (for example it is received from another indicator).
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <param name="indicator">Indicator.</param>
            <param name="value">Value.</param>
            <returns>Replaced copy of the input value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue.CompareTo(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            Compare <see cref="T:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.ChaikinVolatility">
            <summary>
            Chaikin volatility.
            </summary>
            <remarks>
            http://www2.wealth-lab.com/WL5Wiki/Volatility.ashx http://www.incrediblecharts.com/indicators/chaikin_volatility.php.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ChaikinVolatility.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.ChaikinVolatility"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ChaikinVolatility.Ema">
            <summary>
            Moving Average.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ChaikinVolatility.Roc">
            <summary>
            Rate of change.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ChaikinVolatility.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ChaikinVolatility.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ChaikinVolatility.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ChaikinVolatility.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Highest">
            <summary>
            Maximum value for a period.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Highest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Highest"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Highest.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.LinearReg">
            <summary>
            Linear regression - Value returns the last point prediction.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.LinearReg.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.LinearReg"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.LinearReg.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.LinearReg.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.LinearRegression">
            <summary>
            The full class of linear regression, calculates LinearReg, LinearRegSlope, RSquared and StandardError at the same time.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.LinearRegression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.LinearRegression"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.LinearRegression.#ctor(StockSharp.Algo.Indicators.LinearReg,StockSharp.Algo.Indicators.RSquared,StockSharp.Algo.Indicators.LinearRegSlope,StockSharp.Algo.Indicators.StandardError)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.LinearRegression"/>.
            </summary>
            <param name="linearReg">Linear regression.</param>
            <param name="rSquared">Regression R-squared.</param>
            <param name="regSlope">Coefficient with independent variable, slope of a straight line.</param>
            <param name="standardError">Standard error.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.LinearRegression.Length">
            <summary>
            Period length.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.LinearRegression.LinearReg">
            <summary>
            Linear regression.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.LinearRegression.RSquared">
            <summary>
            Regression R-squared.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.LinearRegression.StandardError">
            <summary>
            Standard error.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.LinearRegression.LinearRegSlope">
            <summary>
            Coefficient with independent variable, slope of a straight line.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.LinearRegression.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.LinearRegression.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.LinearRegSlope">
            <summary>
            Linear regression gradient.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.LinearRegSlope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.LinearRegSlope"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.LinearRegSlope.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Lowest">
            <summary>
            Minimum value for a period.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Lowest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Lowest"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Lowest.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.MeanDeviation">
            <summary>
            Average deviation.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MeanDeviation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.MeanDeviation"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.MeanDeviation.Sma">
            <summary>
            Moving Average.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.MeanDeviation.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MeanDeviation.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MeanDeviation.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.MedianPrice">
            <summary>
            Median price.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MedianPrice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.MedianPrice"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MedianPrice.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.QStick">
            <summary>
            QStick.
            </summary>
            <remarks>
            http://www2.wealth-lab.com/WL5Wiki/QStick.ashx.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.QStick.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.QStick"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.QStick.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.QStick.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.QStick.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.RSquared">
            <summary>
            Linear regression R-squared.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RSquared.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.RSquared"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RSquared.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RSquared.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Level1Indicator">
            <summary>
            The indicator, built on the market data basis.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Level1Indicator.Field">
            <summary>
            Level one market-data field, which is used as an indicator value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Level1Indicator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Level1Indicator.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Level1Indicator.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.StandardError">
            <summary>
            Standard error in linear regression.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.StandardError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.StandardError"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.StandardError.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.StandardError.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Sum">
            <summary>
            Sum of N last values.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Sum.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Sum"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Sum.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Trix">
            <summary>
            Triple Exponential Moving Average.
            </summary>
            <remarks>
            http://www2.wealth-lab.com/WL5Wiki/TRIX.ashx http://www.incrediblecharts.com/indicators/trix_indicator.php.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Trix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Trix.RocLength">
            <summary>
            The length of period <see cref="T:StockSharp.Algo.Indicators.RateOfChange"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Trix.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Trix.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Trix.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.VerticalHorizontalFilter">
            <summary>
            The vertical-horizontal filter.
            </summary>
            <remarks>
            http://www2.wealth-lab.com/WL5Wiki/VHF.ashx http://www.stator-afm.com/vertical-horizontal-filter.html http://www.incrediblecharts.com/indicators/vertical_horizontal_filter.php.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.VerticalHorizontalFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.VerticalHorizontalFilter.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.VerticalHorizontalFilter.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.VerticalHorizontalFilter.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Vidya">
            <summary>
            The dynamic average of variable index  (Variable Index Dynamic Average).
            </summary>
            <remarks>
            http://www2.wealth-lab.com/WL5Wiki/Vidya.ashx http://www.mql5.com/en/code/75.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Vidya.#ctor">
            <summary>
            To create the indicator <see cref="T:StockSharp.Algo.Indicators.Vidya"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Vidya.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Vidya.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.VolumeIndicator">
            <summary>
            Candle volume.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.VolumeIndicator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.VolumeIndicator"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.VolumeIndicator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.AverageDirectionalIndex">
            <summary>
            Welles Wilder Average Directional Index.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AverageDirectionalIndex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.AverageDirectionalIndex"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AverageDirectionalIndex.#ctor(StockSharp.Algo.Indicators.DirectionalIndex,StockSharp.Algo.Indicators.LengthIndicator{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.AverageDirectionalIndex"/>.
            </summary>
            <param name="dx">Welles Wilder Directional Movement Index.</param>
            <param name="movingAverage">Moving Average.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.AverageDirectionalIndex.Dx">
            <summary>
            Welles Wilder Directional Movement Index.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.AverageDirectionalIndex.MovingAverage">
            <summary>
            Moving Average.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.AverageDirectionalIndex.Length">
            <summary>
            Period length.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AverageDirectionalIndex.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AverageDirectionalIndex.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.AverageTrueRange">
            <summary>
            The average true range <see cref="P:StockSharp.Algo.Indicators.AverageTrueRange.TrueRange"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AverageTrueRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.AverageTrueRange"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AverageTrueRange.#ctor(StockSharp.Algo.Indicators.LengthIndicator{System.Decimal},StockSharp.Algo.Indicators.TrueRange)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.AverageTrueRange"/>.
            </summary>
            <param name="movingAverage">Moving Average.</param>
            <param name="trueRange">True range.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.AverageTrueRange.MovingAverage">
            <summary>
            Moving Average.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.AverageTrueRange.TrueRange">
            <summary>
            True range.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.AverageTrueRange.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AverageTrueRange.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AverageTrueRange.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.ChandeMomentumOscillator">
            <summary>
            Chande Momentum Oscillator.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ChandeMomentumOscillator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.ChandeMomentumOscillator"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ChandeMomentumOscillator.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ChandeMomentumOscillator.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ChandeMomentumOscillator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.CommodityChannelIndex">
            <summary>
            Commodity Channel Index.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.CommodityChannelIndex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.CommodityChannelIndex"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.CommodityChannelIndex.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.CommodityChannelIndex.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.CommodityChannelIndex.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.DetrendedPriceOscillator">
            <summary>
            Price oscillator without trend.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DetrendedPriceOscillator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.DetrendedPriceOscillator"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DetrendedPriceOscillator.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.DetrendedPriceOscillator.IsFormed">
            <summary>
            The indicator is formed.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DetrendedPriceOscillator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.DiMinus">
            <summary>
            DIMinus is a component of the Directional Movement System developed by Welles Wilder.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DiMinus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.DiMinus"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DiMinus.GetValue(StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Candle)">
            <summary>
            To get the part value.
            </summary>
            <param name="current">The current candle.</param>
            <param name="prev">The previous candle.</param>
            <returns>Value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.DiPart">
            <summary>
            The part of the indicator <see cref="T:StockSharp.Algo.Indicators.DirectionalIndex"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DiPart.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Indicators.DiPart"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DiPart.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.DiPart.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DiPart.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DiPart.GetValue(StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Candle)">
            <summary>
            To get the part value.
            </summary>
            <param name="current">The current candle.</param>
            <param name="prev">The previous candle.</param>
            <returns>Value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.DiPlus">
            <summary>
            DIPlus is a component of the Directional Movement System developed by Welles Wilder.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DiPlus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.DiPlus"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DiPlus.GetValue(StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Candle)">
            <summary>
            To get the part value.
            </summary>
            <param name="current">The current candle.</param>
            <param name="prev">The previous candle.</param>
            <returns>Value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.DirectionalIndex">
            <summary>
            Welles Wilder Directional Movement Index.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DirectionalIndex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.DirectionalIndex"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.DirectionalIndex.Length">
            <summary>
            Period length.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.DirectionalIndex.Plus">
            <summary>
            DI+.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.DirectionalIndex.Minus">
            <summary>
            DI-.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DirectionalIndex.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DirectionalIndex.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DirectionalIndex.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Ichimoku">
            <summary>
            Ichimoku.
            </summary>
            <remarks>
            http://ta.mql4.com/indicators/oscillators/ichimoku.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Ichimoku.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Ichimoku"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Ichimoku.#ctor(StockSharp.Algo.Indicators.IchimokuLine,StockSharp.Algo.Indicators.IchimokuLine)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Ichimoku"/>.
            </summary>
            <param name="tenkan">Tenkan line.</param>
            <param name="kijun">Kijun line.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Ichimoku.Tenkan">
            <summary>
            Tenkan line.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Ichimoku.Kijun">
            <summary>
            Kijun line.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Ichimoku.SenkouA">
            <summary>
            Senkou (A) line.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Ichimoku.SenkouB">
            <summary>
            Senkou (B) line.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Ichimoku.Chinkou">
            <summary>
            Chinkou line.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Indicators.IchimokuChinkouLine">
            <summary>
            Chinkou line.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IchimokuChinkouLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.IchimokuChinkouLine"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IchimokuChinkouLine.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.IchimokuLine">
            <summary>
            The implementation of the lines of Ishimoku KInko Khayo indicator (Tenkan, Kijun, Senkou Span B).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IchimokuLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.IchimokuLine"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IchimokuLine.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IchimokuLine.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IchimokuLine.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.IchimokuSenkouALine">
            <summary>
            Senkou (A) line.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IchimokuSenkouALine.#ctor(StockSharp.Algo.Indicators.IchimokuLine,StockSharp.Algo.Indicators.IchimokuLine)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.IchimokuSenkouALine"/>.
            </summary>
            <param name="tenkan">Tenkan line.</param>
            <param name="kijun">Kijun line.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IchimokuSenkouALine.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IchimokuSenkouALine.Tenkan">
            <summary>
            Tenkan line.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IchimokuSenkouALine.Kijun">
            <summary>
            Kijun line.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IchimokuSenkouALine.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.IchimokuSenkouBLine">
            <summary>
            Senkou (B) line.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IchimokuSenkouBLine.#ctor(StockSharp.Algo.Indicators.IchimokuLine)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.IchimokuLine"/>.
            </summary>
            <param name="kijun">Kijun line.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IchimokuSenkouBLine.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IchimokuSenkouBLine.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IchimokuSenkouBLine.Kijun">
            <summary>
            Kijun line.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IchimokuSenkouBLine.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Momentum">
            <summary>
            Momentum.
            </summary>
            <remarks>
            Momentum Simple = C - C-n Where C- closing price of previous period. Where C-n - closing price N periods ago.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Momentum.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Momentum"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Momentum.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Momentum.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.RateOfChange">
            <summary>
            Rate of change.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RateOfChange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.RateOfChange"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RateOfChange.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.RelativeStrengthIndex">
            <summary>
            Relative Strength Index.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RelativeStrengthIndex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.RelativeStrengthIndex"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.RelativeStrengthIndex.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RelativeStrengthIndex.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RelativeStrengthIndex.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.RelativeVigorIndex">
            <summary>
            Relative Vigor Index.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RelativeVigorIndex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.RelativeVigorIndex"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RelativeVigorIndex.#ctor(StockSharp.Algo.Indicators.RelativeVigorIndexAverage,StockSharp.Algo.Indicators.RelativeVigorIndexSignal)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.RelativeVigorIndex"/>.
            </summary>
            <param name="average">Average indicator part.</param>
            <param name="signal">Signaling part of indicator.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.RelativeVigorIndex.Average">
            <summary>
            Average indicator part.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.RelativeVigorIndex.Signal">
            <summary>
            Signaling part of indicator.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Indicators.RelativeVigorIndexAverage">
            <summary>
            The weight-average part of indicator <see cref="T:StockSharp.Algo.Indicators.RelativeVigorIndex"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RelativeVigorIndexAverage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.RelativeVigorIndexAverage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RelativeVigorIndexAverage.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RelativeVigorIndexAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="P:StockSharp.Algo.Indicators.RelativeVigorIndexAverage.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Indicators.RelativeVigorIndexSignal">
            <summary>
            The signaling part of indicator <see cref="T:StockSharp.Algo.Indicators.RelativeVigorIndex"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RelativeVigorIndexSignal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.RelativeVigorIndexSignal"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RelativeVigorIndexSignal.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.StochasticK">
            <summary>
            Stochastic %K.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.StochasticK.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.StochasticK"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.StochasticK.IsFormed">
            <summary>
            The indicator is formed.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.StochasticK.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.StochasticK.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.TrueRange">
            <summary>
            True range.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.TrueRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.TrueRange"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.TrueRange.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.TrueRange.GetPriceMovements(StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Candle)">
            <summary>
            To get price components to select the maximal value.
            </summary>
            <param name="currentCandle">The current candle.</param>
            <param name="prevCandle">The previous candle.</param>
            <returns>Price components.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.TrueRange.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.UltimateOscillator">
            <summary>
            Last oscillator.
            </summary>
            <remarks>
            http://www2.wealth-lab.com/WL5Wiki/UltimateOsc.ashx http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:ultimate_oscillator.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.UltimateOscillator.#ctor">
            <summary>
            To create the indicator <see cref="T:StockSharp.Algo.Indicators.UltimateOscillator"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.UltimateOscillator.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.UltimateOscillator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.BollingerBand">
            <summary>
            Bollinger band.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BollingerBand.#ctor(StockSharp.Algo.Indicators.LengthIndicator{System.Decimal},StockSharp.Algo.Indicators.StandardDeviation)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.BollingerBand"/>.
            </summary>
            <param name="ma">Moving Average.</param>
            <param name="dev">Standard deviation.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BollingerBand.Width">
            <summary>
            Channel width.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BollingerBand.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BollingerBand.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BollingerBand.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.BollingerBands">
            <summary>
            Bollinger Bands.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BollingerBands.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.BollingerBands"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BollingerBands.#ctor(StockSharp.Algo.Indicators.LengthIndicator{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.BollingerBands"/>.
            </summary>
            <param name="ma">Moving Average.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BollingerBands.MovingAverage">
            <summary>
            Middle line.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BollingerBands.UpBand">
            <summary>
            Upper band +.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BollingerBands.LowBand">
            <summary>
            Lower band -.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BollingerBands.Length">
            <summary>
            Period length. By default equal to 1.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BollingerBands.Width">
            <summary>
            Bollinger Bands channel width. Default value equal to 2.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BollingerBands.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BollingerBands.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BollingerBands.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.DoubleExponentialMovingAverage">
            <summary>
            Double Exponential Moving Average.
            </summary>
            <remarks>
            ((2 * EMA) – EMA of EMA).
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DoubleExponentialMovingAverage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.DoubleExponentialMovingAverage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DoubleExponentialMovingAverage.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.DoubleExponentialMovingAverage.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DoubleExponentialMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Envelope">
            <summary>
            Envelope.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Envelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Envelope"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Envelope.#ctor(StockSharp.Algo.Indicators.LengthIndicator{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Envelope"/>.
            </summary>
            <param name="ma">Middle line.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Envelope.Middle">
            <summary>
            Middle line.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Envelope.Upper">
            <summary>
            Upper line.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Envelope.Lower">
            <summary>
            Lower line.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Envelope.Length">
            <summary>
            Period length. By default equal to 1.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Envelope.Shift">
            <summary>
            The shift width. Specified as percentage from 0 to 1. The default equals to 0.01.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Envelope.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Envelope.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Envelope.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Envelope.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.ExponentialMovingAverage">
            <summary>
            Exponential Moving Average.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ExponentialMovingAverage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.ExponentialMovingAverage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ExponentialMovingAverage.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ExponentialMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.HullMovingAverage">
            <summary>
            Hull Moving Average.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.HullMovingAverage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.HullMovingAverage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.HullMovingAverage.SqrtPeriod">
            <summary>
            Period of resulting average. If equal to 0, period of resulting average is equal to the square root of HMA period. By default equal to 0.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.HullMovingAverage.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.HullMovingAverage.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.HullMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.HullMovingAverage.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.HullMovingAverage.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.JurikMovingAverage">
            <summary>
            Jurik Moving Average.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.JurikMovingAverage.Phase">
            <summary>
            Phase.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.JurikMovingAverage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.JurikMovingAverage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.JurikMovingAverage.Initialize">
            <summary>
            Variables initial initialization.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.JurikMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.JurikMovingAverage.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.JurikMovingAverage.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.JurikMovingAverage.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage">
            <summary>
            Kaufman adaptive moving average.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.FastSCPeriod">
            <summary>
            'Rapid' EMA period. The default value is 2.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.SlowSCPeriod">
            <summary>
            'Slow' EMA period. The default value is 30.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence">
            <summary>
            Convergence/divergence of moving averages.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.#ctor(StockSharp.Algo.Indicators.ExponentialMovingAverage,StockSharp.Algo.Indicators.ExponentialMovingAverage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence"/>.
            </summary>
            <param name="longMa">Long moving average.</param>
            <param name="shortMa">Short moving average.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.LongMa">
            <summary>
            Long moving average.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.ShortMa">
            <summary>
            Short moving average.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceHistogram">
            <summary>
            Convergence/divergence of moving averages. Histogram.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceHistogram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceHistogram"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceHistogram.#ctor(StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence,StockSharp.Algo.Indicators.ExponentialMovingAverage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceHistogram"/>.
            </summary>
            <param name="macd">Convergence/divergence of moving averages.</param>
            <param name="signalMa">Signaling Moving Average.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceHistogram.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceSignal">
            <summary>
            Convergence/divergence of moving averages with signal line.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceSignal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceSignal"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceSignal.#ctor(StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence,StockSharp.Algo.Indicators.ExponentialMovingAverage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceSignal"/>.
            </summary>
            <param name="macd">Convergence/divergence of moving averages.</param>
            <param name="signalMa">Signaling Moving Average.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceSignal.Macd">
            <summary>
            Convergence/divergence of moving averages.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceSignal.SignalMa">
            <summary>
            Signaling Moving Average.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Indicators.NickRypockTrailingReverse">
            <summary>
            NickRypockTrailingReverse (Nick Rypock Trailing reverse).
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Indicators.NickRypockTrailingReverse._trend">
            <summary>
            The trend direction.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.NickRypockTrailingReverse.Multiple">
            <summary>
            Multiplication factor.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.NickRypockTrailingReverse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.NickRypockTrailingReverse"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.NickRypockTrailingReverse.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.NickRypockTrailingReverse.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.NickRypockTrailingReverse.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.NickRypockTrailingReverse.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.OptimalTracking">
            <summary>
            Optimal Tracking.
            </summary>
            <remarks>
            Based on a Kalman Filter (Dr. R. E. Kalman, 1960) and Kalatas Tracking Index (Paul. R. Kalata, 1984).
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.OptimalTracking.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.OptimalTracking"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.OptimalTracking.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.OptimalTracking.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.ParabolicSar">
            <summary>
            Trend indicator implementation - Parabolic SAR.
            </summary>
            <remarks>
            http://ta.mql4.com/indicators/trends/parabolic_sar.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ParabolicSar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.ParabolicSar"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ParabolicSar.Acceleration">
            <summary>
            Acceleration factor.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ParabolicSar.AccelerationStep">
            <summary>
            Acceleration factor step.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ParabolicSar.AccelerationMax">
            <summary>
            Maximum acceleration factor.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ParabolicSar.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ParabolicSar.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ParabolicSar.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Peak">
            <summary>
            Peak.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Peak.#ctor">
            <summary>
            To create the indicator <see cref="T:StockSharp.Algo.Indicators.Peak"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Peak.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.PeakBar">
            <summary>
            PeakBar.
            </summary>
            <remarks>
            http://www2.wealth-lab.com/WL5Wiki/PeakBar.ashx.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.PeakBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.PeakBar"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.PeakBar.ReversalAmount">
            <summary>
            Indicator changes threshold.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.PeakBar.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.PeakBar.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.PeakBar.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.RangeActionVerificationIndex">
            <summary>
            Range Action Verification Index.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RangeActionVerificationIndex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.RangeActionVerificationIndex"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.RangeActionVerificationIndex.ShortSma">
            <summary>
            Short moving average.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.RangeActionVerificationIndex.LongSma">
            <summary>
            Long moving average.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.RangeActionVerificationIndex.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RangeActionVerificationIndex.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RangeActionVerificationIndex.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.RangeActionVerificationIndex.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.SimpleMovingAverage">
            <summary>
            Simple moving average.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.SimpleMovingAverage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.SimpleMovingAverage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.SimpleMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.SmoothedMovingAverage">
            <summary>
            Smoothed Moving Average.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.SmoothedMovingAverage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.SmoothedMovingAverage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.SmoothedMovingAverage.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.SmoothedMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.StandardDeviation">
            <summary>
            Standard deviation.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.StandardDeviation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.StandardDeviation"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.StandardDeviation.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.StandardDeviation.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.StandardDeviation.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.TripleExponentialMovingAverage">
            <summary>
            Triple Exponential Moving Average.
            </summary>
            <remarks>
            http://tradingsim.com/blog/triple-exponential-moving-average/ (3 * EMA) – (3 * EMA of EMA) + EMA of EMA of EMA).
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.TripleExponentialMovingAverage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.TripleExponentialMovingAverage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.TripleExponentialMovingAverage.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.TripleExponentialMovingAverage.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.TripleExponentialMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Trough">
            <summary>
            Trough.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Trough.#ctor">
            <summary>
            To create the indicator <see cref="T:StockSharp.Algo.Indicators.Trough"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Trough.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.TroughBar">
            <summary>
            TroughBar.
            </summary>
            <remarks>
            http://www2.wealth-lab.com/WL5Wiki/TroughBar.ashx.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.TroughBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.TroughBar"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.TroughBar.ReversalAmount">
            <summary>
            Indicator changes threshold.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.TroughBar.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.TroughBar.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.TroughBar.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage">
            <summary>
            Volume weighted moving average.
            </summary>
            <remarks>
            http://www2.wealth-lab.com/WL5Wiki/VMA.ashx http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:vwap_intraday.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage.#ctor">
            <summary>
            To create the indicator <see cref="T:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.WeightedMovingAverage">
            <summary>
            Weighted moving average.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.WeightedMovingAverage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.WeightedMovingAverage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.WeightedMovingAverage.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.WeightedMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.WilderMovingAverage">
            <summary>
            Welles Wilder Moving Average.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.WilderMovingAverage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.WilderMovingAverage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.WilderMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.ZigZag">
            <summary>
            ZigZag.
            </summary>
            <remarks>
            ZigZag traces and combines extreme points of the chart, distanced for not less than specified percentage by the price scale.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ZigZag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.ZigZag"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ZigZag.BackStep">
            <summary>
            Minimum number of bars between local maximums, minimums.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ZigZag.Depth">
            <summary>
            Bars minimum, on which Zigzag will not build a second maximum (or minimum), if it is smaller (or larger) by a deviation of the previous respectively.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ZigZag.Deviation">
            <summary>
            Minimum number of points between maximums (minimums) of two adjacent bars used by Zigzag indicator to form a local peak (local trough).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ZigZag.HighValueFunc">
            <summary>
            The converter, returning from the candle a price for search of maximum.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ZigZag.LowValueFunc">
            <summary>
            The converter, returning from the candle a price for search of minimum.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ZigZag.CurrentValueFunc">
            <summary>
            The converter, returning from the candle a price for the current value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ZigZag.CurrentValue">
            <summary>
            The indicator current value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ZigZag.LastValueShift">
            <summary>
            Shift for the last indicator value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ZigZag.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ZigZag.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ZigZag.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ZigZag.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.ZigZagEquis">
            <summary>
            Zig Zag (Metastock).
            </summary>
            <remarks>
            Zig Zag indicator filters fluctuations of prices or indicator values, which are not beyond specific value, presented in % or in absolute numbers. It is done for preliminary analysis of chart, emphasizing only sufficiently big price changes (indicator values).
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ZigZagEquis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.ZigZagEquis"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ZigZagEquis.Deviation">
            <summary>
            Percentage change.
            </summary>
            <remarks>
            It is specified in the range from 0 to 1.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ZigZagEquis.ByPrice">
            <summary>
            The converter, returning from the candle a price for calculations.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ZigZagEquis.CurrentValue">
            <summary>
            The indicator current value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ZigZagEquis.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ZigZagEquis.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ZigZagEquis.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ZigZagEquis.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Acceleration">
            <summary>
            Acceleration / Deceleration Indicator.
            </summary>
            <remarks>
            http://ta.mql4.com/indicators/bills/acceleration_deceleration.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Acceleration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Acceleration"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Acceleration.#ctor(StockSharp.Algo.Indicators.AwesomeOscillator,StockSharp.Algo.Indicators.SimpleMovingAverage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Acceleration"/>.
            </summary>
            <param name="ao">Awesome Oscillator.</param>
            <param name="sma">The moving average.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Acceleration.Sma">
            <summary>
            The moving average.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Acceleration.Ao">
            <summary>
            Awesome Oscillator.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Acceleration.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Acceleration.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Acceleration.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Acceleration.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Alligator">
            <summary>
            Alligator.
            </summary>
            <remarks>
            http://ta.mql4.com/indicators/bills/alligator.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Alligator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Alligator"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Alligator.#ctor(StockSharp.Algo.Indicators.AlligatorLine,StockSharp.Algo.Indicators.AlligatorLine,StockSharp.Algo.Indicators.AlligatorLine)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Alligator"/>.
            </summary>
            <param name="jaw">Jaw.</param>
            <param name="teeth">Teeth.</param>
            <param name="lips">Lips.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Alligator.Jaw">
            <summary>
            Jaw.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Alligator.Teeth">
            <summary>
            Teeth.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Alligator.Lips">
            <summary>
            Lips.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Alligator.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Indicators.AlligatorLine">
            <summary>
            The realization of one of indicator lines Alligator (Jaw, Teeth, and Lips).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AlligatorLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.AlligatorLine"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.AlligatorLine.Shift">
            <summary>
            Shift to the future.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AlligatorLine.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.AlligatorLine.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AlligatorLine.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AlligatorLine.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AlligatorLine.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.AwesomeOscillator">
            <summary>
            Awesome Oscillator.
            </summary>
            <remarks>
            http://ta.mql4.com/indicators/bills/awesome.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AwesomeOscillator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.AwesomeOscillator"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AwesomeOscillator.#ctor(StockSharp.Algo.Indicators.SimpleMovingAverage,StockSharp.Algo.Indicators.SimpleMovingAverage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.AwesomeOscillator"/>.
            </summary>
            <param name="longSma">Long moving average.</param>
            <param name="shortSma">Short moving average.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.AwesomeOscillator.LongMa">
            <summary>
            Long moving average.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.AwesomeOscillator.ShortMa">
            <summary>
            Short moving average.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.AwesomeOscillator.MedianPrice">
            <summary>
            Median price.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.AwesomeOscillator.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AwesomeOscillator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AwesomeOscillator.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.AwesomeOscillator.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.FractalPart">
            <summary>
            Part <see cref="T:StockSharp.Algo.Indicators.Fractals"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.FractalPart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.FractalPart"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.FractalPart.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.Fractals">
            <summary>
            Fractals.
            </summary>
            <remarks>
            http://ta.mql4.com/indicators/bills/fractal.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Fractals.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Fractals"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Fractals.#ctor(System.Int32,StockSharp.Algo.Indicators.FractalPart,StockSharp.Algo.Indicators.FractalPart)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.Fractals"/>.
            </summary>
            <param name="length">Period length.</param>
            <param name="up">Fractal up.</param>
            <param name="down">Fractal down.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Fractals.Length">
            <summary>
            Period length.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Fractals.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Fractals.Up">
            <summary>
            Fractal up.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.Fractals.Down">
            <summary>
            Fractal down.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Fractals.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Fractals.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Fractals.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.Fractals.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.GatorHistogram">
            <summary>
            The oscillator histogram <see cref="T:StockSharp.Algo.Indicators.GatorOscillator"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.GatorHistogram.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Indicators.GatorHistogram.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Indicators.GatorHistogram"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.GatorHistogram.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Indicators.GatorHistogram.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Indicators.GatorOscillator">
            <summary>
            Gator oscillator.
            </summary>
            <remarks>
            http://ta.mql4.com/indicators/bills/gator.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.GatorOscillator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.GatorOscillator"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.GatorOscillator.#ctor(StockSharp.Algo.Indicators.Alligator,StockSharp.Algo.Indicators.GatorHistogram,StockSharp.Algo.Indicators.GatorHistogram)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.GatorOscillator"/>.
            </summary>
            <param name="alligator">Alligator.</param>
            <param name="histogram1">Top histogram.</param>
            <param name="histogram2">Lower histogram.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.GatorOscillator.Histogram1">
            <summary>
            Top histogram.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.GatorOscillator.Histogram2">
            <summary>
            Lower histogram.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.GatorOscillator.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.GatorOscillator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.MarketFacilitationIndex">
            <summary>
            Market Facilitation Index.
            </summary>
            <remarks>
            http://ta.mql4.com/indicators/bills/market_facilitation_index.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MarketFacilitationIndex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.MarketFacilitationIndex"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MarketFacilitationIndex.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.WilliamsR">
            <summary>
            Williams Percent Range.
            </summary>
            <remarks>
            %R = (Highest High - Close)/(Highest High - Lowest Low) * -100
            http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:williams_r
            http://www2.wealth-lab.com/WL5Wiki/WilliamsR.ashx.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Indicators.WilliamsR.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.WilliamsR"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.WilliamsR.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.WilliamsR.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.WilliamsR.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.ComplexIndicatorModes">
            <summary>
            Embedded indicators processing modes.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Indicators.ComplexIndicatorModes.Sequence">
            <summary>
            In-series. The result of the previous indicator execution is passed to the next one,.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Indicators.ComplexIndicatorModes.Parallel">
            <summary>
            In parallel. Results of indicators execution for not depend on each other.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Indicators.BaseComplexIndicator">
            <summary>
            The base indicator, built in form of several indicators combination.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.#ctor(StockSharp.Algo.Indicators.IIndicator[])">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.BaseComplexIndicator"/>.
            </summary>
            <param name="innerIndicators">Embedded indicators.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BaseComplexIndicator.Mode">
            <summary>
            Embedded indicators processing mode. The default equals to <see cref="F:StockSharp.Algo.Indicators.ComplexIndicatorModes.Parallel"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BaseComplexIndicator.InnerIndicators">
            <summary>
            Embedded indicators.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BaseComplexIndicator.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BaseComplexIndicator.ResultType">
            <summary>
            Result values type.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Indicators.BaseIndicator">
            <summary>
            The base Indicator.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseIndicator.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Indicators.BaseIndicator"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BaseIndicator.Id">
            <summary>
            Unique ID.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BaseIndicator.Name">
            <summary>
            Indicator name.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseIndicator.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseIndicator.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseIndicator.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BaseIndicator.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BaseIndicator.Container">
            <summary>
            The container storing indicator data.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BaseIndicator.InputType">
            <summary>
            Input values type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BaseIndicator.ResultType">
            <summary>
            Result values type.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Indicators.BaseIndicator.Changed">
            <summary>
            The indicator change event (for example, a new value is added).
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Indicators.BaseIndicator.Reseted">
            <summary>
            The event of resetting the indicator status to initial. The event is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseIndicator.Process(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseIndicator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseIndicator.RaiseChangedEvent(StockSharp.Algo.Indicators.IIndicatorValue,StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Indicators.BaseIndicator.Changed"/>.
            </summary>
            <param name="input">The input value of the indicator.</param>
            <param name="result">The resulting value of the indicator.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseIndicator.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Indicators.IIndicator"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseIndicator.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.IComplexIndicator">
            <summary>
            The interface of indicator, built as combination of several indicators.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IComplexIndicator.InnerIndicators">
            <summary>
            Embedded indicators.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Indicators.IIndicator">
            <summary>
            The interface describing indicator.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IIndicator.Id">
            <summary>
            Unique ID.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IIndicator.Name">
            <summary>
            Indicator name.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IIndicator.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IIndicator.Container">
            <summary>
            The container storing indicator data.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IIndicator.InputType">
            <summary>
            Input values type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IIndicator.ResultType">
            <summary>
            Result values type.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Indicators.IIndicator.Changed">
            <summary>
            The indicator change event (for example, a new value is added).
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Indicators.IIndicator.Reseted">
            <summary>
            The event of resetting the indicator status to initial. The event is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IIndicator.Process(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To handle the input value.
            </summary>
            <param name="input">The input value.</param>
            <returns>The new value of the indicator.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IIndicator.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Indicators.IIndicatorContainer">
            <summary>
            The interface of the container, storing indicator data.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IIndicatorContainer.Count">
            <summary>
            The current number of saved values.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IIndicatorContainer.AddValue(StockSharp.Algo.Indicators.IIndicatorValue,StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            Add new values.
            </summary>
            <param name="input">The input value of the indicator.</param>
            <param name="result">The resulting value of the indicator.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IIndicatorContainer.GetValues">
            <summary>
            To get all values of the identifier.
            </summary>
            <returns>All values of the identifier. The empty set, if there are no values.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IIndicatorContainer.GetValue(System.Int32)">
            <summary>
            To get the indicator value by the index.
            </summary>
            <param name="index">The sequential number of value from the end.</param>
            <returns>Input and resulting values of the indicator.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IIndicatorContainer.ClearValues">
            <summary>
            To delete all values of the indicator.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Indicators.IIndicatorValue">
            <summary>
            The indicator value, based on which it will renew its value, as well as value, containing result of indicator calculation.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IIndicatorValue.Indicator">
            <summary>
            Indicator.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IIndicatorValue.IsEmpty">
            <summary>
            No indicator value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IIndicatorValue.IsFinal">
            <summary>
            Is the value final (indicator finalizes its value and will not be changed anymore in the given point of time).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IIndicatorValue.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IIndicatorValue.InputValue">
            <summary>
            The input value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IIndicatorValue.IsSupport(System.Type)">
            <summary>
            Does value support data type, required for the indicator.
            </summary>
            <param name="valueType">The data type, operated by indicator.</param>
            <returns><see langword="true" />, if data type is supported, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IIndicatorValue.GetValue``1">
            <summary>
            To get the value by the data type.
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <returns>Value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
            <summary>
            To replace the indicator input value by new one (for example it is received from another indicator).
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <param name="indicator">Indicator.</param>
            <param name="value">Value.</param>
            <returns>New object, containing input value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.BaseIndicatorValue">
            <summary>
            The base class for the indicator value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator)">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Indicators.BaseIndicatorValue"/>.
            </summary>
            <param name="indicator">Indicator.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BaseIndicatorValue.Indicator">
            <summary>
            Indicator.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BaseIndicatorValue.IsEmpty">
            <summary>
            No indicator value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BaseIndicatorValue.IsFinal">
            <summary>
            Is the value final (indicator finalizes its value and will not be changed anymore in the given point of time).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BaseIndicatorValue.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.BaseIndicatorValue.InputValue">
            <summary>
            The input value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseIndicatorValue.IsSupport(System.Type)">
            <summary>
            Does value support data type, required for the indicator.
            </summary>
            <param name="valueType">The data type, operated by indicator.</param>
            <returns><see langword="true" />, if data type is supported, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseIndicatorValue.GetValue``1">
            <summary>
            To get the value by the data type.
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <returns>Value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
            <summary>
            To replace the indicator input value by new one (for example it is received from another indicator).
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <param name="indicator">Indicator.</param>
            <param name="value">Value.</param>
            <returns>New object, containing input value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseIndicatorValue.CompareTo(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            Compare <see cref="T:StockSharp.Algo.Indicators.IIndicatorValue"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.BaseIndicatorValue.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compare <see cref="T:StockSharp.Algo.Indicators.IIndicatorValue"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.SingleIndicatorValue`1">
            <summary>
            The base value of the indicator, operating with one data type.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.#ctor(StockSharp.Algo.Indicators.IIndicator,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.SingleIndicatorValue`1"/>.
            </summary>
            <param name="indicator">Indicator.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.#ctor(StockSharp.Algo.Indicators.IIndicator)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.SingleIndicatorValue`1"/>.
            </summary>
            <param name="indicator">Indicator.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.SingleIndicatorValue`1.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.SingleIndicatorValue`1.IsEmpty">
            <summary>
            No indicator value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.SingleIndicatorValue`1.IsFinal">
            <summary>
            Is the value final (indicator finalizes its value and will not be changed anymore in the given point of time).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.SingleIndicatorValue`1.InputValue">
            <summary>
            The input value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.IsSupport(System.Type)">
            <summary>
            Does value support data type, required for the indicator.
            </summary>
            <param name="valueType">The data type, operated by indicator.</param>
            <returns><see langword="true" />, if data type is supported, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.GetValue``1">
            <summary>
            To get the value by the data type.
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <returns>Value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
            <summary>
            To replace the indicator input value by new one (for example it is received from another indicator).
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <param name="indicator">Indicator.</param>
            <param name="value">Value.</param>
            <returns>New object, containing input value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.CompareTo(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            Compare <see cref="T:StockSharp.Algo.Indicators.SingleIndicatorValue`1"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.DecimalIndicatorValue">
            <summary>
            The indicator value, operating with data type <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DecimalIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.DecimalIndicatorValue"/>.
            </summary>
            <param name="indicator">Indicator.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DecimalIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.DecimalIndicatorValue"/>.
            </summary>
            <param name="indicator">Indicator.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.DecimalIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
            <summary>
            To replace the indicator input value by new one (for example it is received from another indicator).
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <param name="indicator">Indicator.</param>
            <param name="value">Value.</param>
            <returns>New object, containing input value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.CandleIndicatorValue">
            <summary>
            The indicator value, operating with data type <see cref="T:StockSharp.Algo.Candles.Candle"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator,StockSharp.Algo.Candles.Candle)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.CandleIndicatorValue"/>.
            </summary>
            <param name="indicator">Indicator.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator,StockSharp.Algo.Candles.Candle,System.Func{StockSharp.Algo.Candles.Candle,System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.CandleIndicatorValue"/>.
            </summary>
            <param name="indicator">Indicator.</param>
            <param name="value">Value.</param>
            <param name="getPart">The candle converter, through which its parameter can be got. By default, the <see cref="F:StockSharp.Algo.Indicators.CandleIndicatorValue.ByClose"/> is used.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.CandleIndicatorValue"/>.
            </summary>
            <param name="indicator">Indicator.</param>
        </member>
        <member name="F:StockSharp.Algo.Indicators.CandleIndicatorValue.ByClose">
            <summary>
            The converter, taking from candle closing price <see cref="P:StockSharp.Algo.Candles.Candle.ClosePrice"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Indicators.CandleIndicatorValue.ByOpen">
            <summary>
            The converter, taking from candle opening price <see cref="P:StockSharp.Algo.Candles.Candle.OpenPrice"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Indicators.CandleIndicatorValue.ByMiddle">
            <summary>
            The converter, taking from candle middle of the body (<see cref="P:StockSharp.Algo.Candles.Candle.OpenPrice"/> + <see cref="P:StockSharp.Algo.Candles.Candle.ClosePrice"/>) / 2.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.IsSupport(System.Type)">
            <summary>
            Does value support data type, required for the indicator.
            </summary>
            <param name="valueType">The data type, operated by indicator.</param>
            <returns><see langword="true" />, if data type is supported, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.GetValue``1">
            <summary>
            To get the value by the data type.
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <returns>Value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
            <summary>
            To replace the indicator input value by new one (for example it is received from another indicator).
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <param name="indicator">Indicator.</param>
            <param name="value">Value.</param>
            <returns>New object, containing input value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.MarketDepthIndicatorValue">
            <summary>
            The indicator value, operating with data type <see cref="T:StockSharp.BusinessEntities.MarketDepth"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator,StockSharp.BusinessEntities.MarketDepth)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.MarketDepthIndicatorValue"/>.
            </summary>
            <param name="indicator">Indicator.</param>
            <param name="depth">Market depth.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator,StockSharp.BusinessEntities.MarketDepth,System.Func{StockSharp.BusinessEntities.MarketDepth,System.Nullable{System.Decimal}})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.MarketDepthIndicatorValue"/>.
            </summary>
            <param name="indicator">Indicator.</param>
            <param name="depth">Market depth.</param>
            <param name="getPart">The order book converter, through which its parameter can be got. By default, the <see cref="F:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.ByMiddle"/> is used.</param>
        </member>
        <member name="F:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.ByBestBid">
            <summary>
            The converter, taking from the order book the best bid price <see cref="P:StockSharp.BusinessEntities.MarketDepth.BestBid"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.ByBestAsk">
            <summary>
            The converter, taking from the order book the best offer price <see cref="P:StockSharp.BusinessEntities.MarketDepth.BestAsk"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.ByMiddle">
            <summary>
            The converter, taking from the order book the middle of the spread <see cref="P:StockSharp.BusinessEntities.MarketDepthPair.MiddlePrice"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.IsSupport(System.Type)">
            <summary>
            Does value support data type, required for the indicator.
            </summary>
            <param name="valueType">The data type, operated by indicator.</param>
            <returns><see langword="true" />, if data type is supported, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.GetValue``1">
            <summary>
            To get the value by the data type.
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <returns>Value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
            <summary>
            To replace the indicator input value by new one (for example it is received from another indicator).
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <param name="indicator">Indicator.</param>
            <param name="value">Value.</param>
            <returns>New object, containing input value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.PairIndicatorValue`1">
            <summary>
            The value of the indicator, operating with pair <see ref="Tuple{TValue, TValue}" />.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Indicators.PairIndicatorValue`1.#ctor(StockSharp.Algo.Indicators.IIndicator,System.Tuple{`0,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.PairIndicatorValue`1"/>.
            </summary>
            <param name="indicator">Indicator.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.PairIndicatorValue`1.#ctor(StockSharp.Algo.Indicators.IIndicator)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.PairIndicatorValue`1"/>.
            </summary>
            <param name="indicator">Indicator.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.PairIndicatorValue`1.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
            <summary>
            To replace the indicator input value by new one (for example it is received from another indicator).
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <param name="indicator">Indicator.</param>
            <param name="value">Value.</param>
            <returns>New object, containing input value.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.ComplexIndicatorValue">
            <summary>
            The complex value of the indicator <see cref="T:StockSharp.Algo.Indicators.IComplexIndicator"/>, derived as result of calculation.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ComplexIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.ComplexIndicatorValue"/>.
            </summary>
            <param name="indicator">Indicator.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ComplexIndicatorValue.IsEmpty">
            <summary>
            No indicator value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ComplexIndicatorValue.IsFinal">
            <summary>
            Is the value final (indicator finalizes its value and will not be changed anymore in the given point of time).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ComplexIndicatorValue.InputValue">
            <summary>
            The input value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ComplexIndicatorValue.InnerValues">
            <summary>
            Embedded values.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ComplexIndicatorValue.IsSupport(System.Type)">
            <summary>
            Does value support data type, required for the indicator.
            </summary>
            <param name="valueType">The data type, operated by indicator.</param>
            <returns><see langword="true" />, if data type is supported, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ComplexIndicatorValue.GetValue``1">
            <summary>
            To get the value by the data type.
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <returns>Value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ComplexIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
            <summary>
            To replace the indicator input value by new one (for example it is received from another indicator).
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <param name="indicator">Indicator.</param>
            <param name="value">Value.</param>
            <returns>Replaced copy of the input value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ComplexIndicatorValue.CompareTo(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            Compare <see cref="T:StockSharp.Algo.Indicators.ComplexIndicatorValue"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.IndicatorContainer">
            <summary>
            The container, storing indicators data.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IndicatorContainer.MaxValueCount">
            <summary>
            The maximal number of indicators values.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.IndicatorContainer.Count">
            <summary>
            The current number of saved values.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorContainer.AddValue(StockSharp.Algo.Indicators.IIndicatorValue,StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            Add new values.
            </summary>
            <param name="input">The input value of the indicator.</param>
            <param name="result">The resulting value of the indicator.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorContainer.GetValues">
            <summary>
            To get all values of the identifier.
            </summary>
            <returns>All values of the identifier. The empty set, if there are no values.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorContainer.GetValue(System.Int32)">
            <summary>
            To get the indicator value by the index.
            </summary>
            <param name="index">The sequential number of value from the end.</param>
            <returns>Input and resulting values of the indicator.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorContainer.ClearValues">
            <summary>
            To delete all values of the indicator.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Indicators.IndicatorHelper">
            <summary>
            Extension class for indicators.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetCurrentValue(StockSharp.Algo.Indicators.IIndicator)">
            <summary>
            To get the current value of the indicator.
            </summary>
            <param name="indicator">Indicator.</param>
            <returns>The current value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetNullableCurrentValue(StockSharp.Algo.Indicators.IIndicator)">
            <summary>
            To get the current value of the indicator.
            </summary>
            <param name="indicator">Indicator.</param>
            <returns>The current value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetCurrentValue``1(StockSharp.Algo.Indicators.IIndicator)">
            <summary>
            To get the current value of the indicator.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="indicator">Indicator.</param>
            <returns>The current value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetValue(StockSharp.Algo.Indicators.IIndicator,System.Int32)">
            <summary>
            To get the indicator value by the index (0 - last value).
            </summary>
            <param name="indicator">Indicator.</param>
            <param name="index">The value index.</param>
            <returns>Indicator value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetNullableValue(StockSharp.Algo.Indicators.IIndicator,System.Int32)">
            <summary>
            To get the indicator value by the index (0 - last value).
            </summary>
            <param name="indicator">Indicator.</param>
            <param name="index">The value index.</param>
            <returns>Indicator value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetValue``1(StockSharp.Algo.Indicators.IIndicator,System.Int32)">
            <summary>
            To get the indicator value by the index (0 - last value).
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="indicator">Indicator.</param>
            <param name="index">The value index.</param>
            <returns>Indicator value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.Process(StockSharp.Algo.Indicators.IIndicator,StockSharp.Algo.Candles.Candle)">
            <summary>
            To renew the indicator with candle closing price <see cref="P:StockSharp.Algo.Candles.Candle.ClosePrice"/>.
            </summary>
            <param name="indicator">Indicator.</param>
            <param name="candle">Candle.</param>
            <returns>The new value of the indicator.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.Process(StockSharp.Algo.Indicators.IIndicator,System.Decimal,System.Boolean)">
            <summary>
            To renew the indicator with numeric value.
            </summary>
            <param name="indicator">Indicator.</param>
            <param name="value">Numeric value.</param>
            <param name="isFinal">Is the value final (the indicator finally forms its value and will not be changed in this point of time anymore). Default is <see langword="true" />.</param>
            <returns>The new value of the indicator.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.Process``1(StockSharp.Algo.Indicators.IIndicator,System.Tuple{``0,``0},System.Boolean)">
            <summary>
            To renew the indicator with numeric pair.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="indicator">Indicator.</param>
            <param name="value">The pair of values.</param>
            <param name="isFinal">If the pair final (the indicator finally forms its value and will not be changed in this point of time anymore). Default is <see langword="true" />.</param>
            <returns>The new value of the indicator.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetInputValue``1(StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            To get the input value for <see cref="T:StockSharp.Algo.Indicators.IIndicatorValue"/>.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="indicatorValue">Indicator value.</param>
            <returns>The input value of the specified type.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetValueType(System.Type,System.Boolean)">
            <summary>
            Get value type for specified indicator.
            </summary>
            <param name="indicatorType">Indicator type.</param>
            <param name="isInput">Is input.</param>
            <returns>Value type.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.LengthIndicator`1">
            <summary>
            The base class for indicators with one resulting value and based on the period.
            </summary>
            <typeparam name="TResult">Result values type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Indicators.LengthIndicator`1"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.Reset">
            <summary>
            To reset the indicator status to initial. The method is called each time when initial settings are changed (for example, the length of period).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.LengthIndicator`1.Length">
            <summary>
            Period length. By default equal to 1.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.LengthIndicator`1.IsFormed">
            <summary>
            Whether the indicator is set.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Indicators.LengthIndicator`1.Buffer">
            <summary>
            The buffer for data storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="settings">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Algo.Indicators.ShiftedIndicatorValue">
            <summary>
            The shifted value of the indicator.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ShiftedIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.ShiftedIndicatorValue"/>.
            </summary>
            <param name="indicator">Indicator.</param>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ShiftedIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator,System.Int32,StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Indicators.ShiftedIndicatorValue"/>.
            </summary>
            <param name="shift">The shift of the indicator value.</param>
            <param name="value">Indicator value.</param>
            <param name="indicator">Indicator.</param>
        </member>
        <member name="P:StockSharp.Algo.Indicators.ShiftedIndicatorValue.Shift">
            <summary>
            The shift of the indicator value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ShiftedIndicatorValue.IsSupport(System.Type)">
            <summary>
            Does value support data type, required for the indicator.
            </summary>
            <param name="valueType">The data type, operated by indicator.</param>
            <returns><see langword="true" />, if data type is supported, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ShiftedIndicatorValue.GetValue``1">
            <summary>
            To get the value by the data type.
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <returns>Value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Indicators.ShiftedIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
            <summary>
            To replace the indicator input value by new one (for example it is received from another indicator).
            </summary>
            <typeparam name="T">The data type, operated by indicator.</typeparam>
            <param name="indicator">Indicator.</param>
            <param name="value">Value.</param>
            <returns>Replaced copy of the input value.</returns>
        </member>
        <member name="T:StockSharp.Algo.IRemoteAuthorization">
            <summary>
            The interface describing the connection access check module.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IRemoteAuthorization.AllRemoteUsers">
            <summary>
            All available users.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.IRemoteAuthorization.SaveRemoteUser(System.String,System.Security.SecureString,System.Collections.Generic.IEnumerable{System.Net.IPAddress},StockSharp.Algo.UserPermissions)">
            <summary>
            Save user.
            </summary>
            <param name="login">Login.</param>
            <param name="password">Password.</param>
            <param name="possibleAddresses">Possible addresses.</param>
            <param name="permissions">Permissions.</param>
        </member>
        <member name="M:StockSharp.Algo.IRemoteAuthorization.DeleteRemoteUser(System.String)">
            <summary>
            Delete user by login.
            </summary>
            <param name="login">Login.</param>
            <returns>Returns <see langword="true"/>, if user was deleted, otherwise return <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.IRemoteAuthorization.HasPermissions(System.Guid,StockSharp.Algo.UserPermissions,System.String,System.String,System.Object,System.Nullable{System.DateTime})">
            <summary>
            Get permission for request.
            </summary>
            <param name="sessionId">Session ID.</param>
            <param name="requiredPermissions">Required permissions.</param>
            <param name="securityId">Security ID.</param>
            <param name="dataType">Market data type.</param>
            <param name="arg">The parameter associated with the <paramref name="dataType" /> type. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.</param>
            <param name="date">Date.</param>
            <returns>Possible permissions.</returns>
        </member>
        <member name="T:StockSharp.Algo.AnonymousRemoteAuthorization">
            <summary>
            The connection access check module which provides access to all connections.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.AnonymousRemoteAuthorization.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.AnonymousRemoteAuthorization"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.AnonymousRemoteAuthorization.HasPermissions(System.Guid,StockSharp.Algo.UserPermissions,System.String,System.String,System.Object,System.Nullable{System.DateTime})">
            <summary>
            Get permission for request.
            </summary>
            <param name="sessionId">Session ID.</param>
            <param name="requiredPermissions">Required permissions.</param>
            <param name="securityId">Security ID.</param>
            <param name="dataType">Market data type.</param>
            <param name="arg">The parameter associated with the <paramref name="dataType" /> type. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.</param>
            <param name="date">Date.</param>
            <returns>Possible permissions.</returns>
        </member>
        <member name="P:StockSharp.Algo.AnonymousRemoteAuthorization.AllRemoteUsers">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.AnonymousRemoteAuthorization.SaveRemoteUser(System.String,System.Security.SecureString,System.Collections.Generic.IEnumerable{System.Net.IPAddress},StockSharp.Algo.UserPermissions)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.AnonymousRemoteAuthorization.DeleteRemoteUser(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.PermissionCredentials">
            <summary>
            Credentials with set of permissions.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PermissionCredentials.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.PermissionCredentials"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PermissionCredentials.IpRestrictionsStr">
            <summary>
            
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PermissionCredentials.IpRestrictions">
            <summary>
            IP address restrictions.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PermissionCredentials.Permissions">
            <summary>
            Permission set.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PermissionCredentials.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.PermissionCredentials.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.ServicesRegistry">
            <summary>
            Services registry.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.ServicesRegistry.EnsureGetExchangeInfoProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.ExchangeInfoProvider">
            <summary>
            Exchanges and trading boards provider.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.TryExchangeInfoProvider">
            <summary>
            Exchanges and trading boards provider.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.SecurityStorage">
            <summary>
            Securities meta info storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.AssociationStorage">
            <summary>
            Associations storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.MappingStorage">
            <summary>
            Security identifier mappings storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.PositionStorage">
            <summary>
            Position storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.PortfolioProvider">
            <summary>
            The provider of information about portfolios.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.PositionProvider">
            <summary>
            The position provider.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.SecurityProvider">
            <summary>
            The provider of information about instruments.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.TrySecurityProvider">
            <summary>
            The provider of information about instruments.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.MarketDataProvider">
            <summary>
            The market data provider.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.TryMarketDataProvider">
            <summary>
            The market data provider.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.StorageRegistry">
            <summary>
            The storage of market data.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.Connector">
            <summary>
            Connector.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.IConnector">
            <summary>
            Connector.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.LogManager">
            <summary>
            Log manager.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.EntityRegistry">
            <summary>
            The storage of trade objects.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.NativeIdStorage">
            <summary>
            Security native identifier storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ServicesRegistry.ExtendedInfoStorage">
            <summary>
            Extended info <see cref="P:StockSharp.Messages.Message.ExtensionInfo"/> storage.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.Binary.Snapshot.PositionBinarySnapshotSerializer">
            <summary>
            Implementation of <see cref="T:StockSharp.Algo.Storages.ISnapshotSerializer`2"/> in binary format for <see cref="T:StockSharp.Messages.PositionChangeMessage"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.Binary.Snapshot.QuotesBinarySnapshotSerializer">
            <summary>
            Implementation of <see cref="T:StockSharp.Algo.Storages.ISnapshotSerializer`2"/> in binary format for <see cref="T:StockSharp.Messages.QuoteChangeMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.Binary.Snapshot.QuotesBinarySnapshotSerializer.MaxDepth">
            <summary>
            The maximum depth of order book.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.Binary.Snapshot.TransactionBinarySnapshotSerializer">
            <summary>
            Implementation of <see cref="T:StockSharp.Algo.Storages.ISnapshotSerializer`2"/> in binary format for <see cref="T:StockSharp.Messages.ExecutionMessage"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.Binary.Snapshot.Level1BinarySnapshotSerializer">
            <summary>
            Implementation of <see cref="T:StockSharp.Algo.Storages.ISnapshotSerializer`2"/> in binary format for <see cref="T:StockSharp.Messages.Level1ChangeMessage"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.CacheableMarketDataStorage`1">
            <summary>
            The market data storage, saving data in the cache-storage.
            </summary>
            <typeparam name="TData">Market data type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Storages.CacheableMarketDataStorage`1.#ctor(StockSharp.Algo.Storages.IMarketDataStorage{`0},StockSharp.Algo.Storages.IMarketDataStorage{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.CacheableMarketDataStorage`1"/>.
            </summary>
            <param name="sourceStorage">The initial storage of market-data.</param>
            <param name="cacheStorage">The cache-storage of market-data.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.Csv.PositionCsvSerializer">
            <summary>
            The position change serializer in the CSV format.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.PositionCsvSerializer.#ctor(StockSharp.Messages.SecurityId,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.Csv.PositionCsvSerializer"/>.
            </summary>
            <param name="securityId">Security ID.</param>
            <param name="encoding">Encoding.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.PositionCsvSerializer.Write(Ecng.Common.CsvFileWriter,StockSharp.Messages.PositionChangeMessage,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.PositionCsvSerializer.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Storages.Csv.ICsvEntityList">
            <summary>
            The interface for presentation in the form of list of trade objects, received from the external storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.ICsvEntityList.DelayAction">
            <summary>
            The time delayed action.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.ICsvEntityList.Init(System.Collections.Generic.IList{System.Exception})">
            <summary>
            Initialize the storage.
            </summary>
            <param name="errors">Possible errors.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.Csv.CsvEntityList`1">
            <summary>
            List of trade objects, received from the CSV storage.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityList`1.Registry">
            <summary>
            The CSV storage of trading objects.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.#ctor(StockSharp.Algo.Storages.Csv.CsvEntityRegistry,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.Csv.CsvEntityList`1"/>.
            </summary>
            <param name="registry">The CSV storage of trading objects.</param>
            <param name="fileName">CSV file name.</param>
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityList`1.FileName">
            <summary>
            CSV file name.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityList`1.DelayAction">
            <summary>
            The time delayed action.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.StockSharp#Algo#Storages#IStorageEntityList{T}#WaitFlush">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.Save(`0)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.Save(`0,System.Boolean)">
            <summary>
            Save object into storage.
            </summary>
            <param name="entity">Trade object.</param>
            <param name="forced">Forced update.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.IsChanged(`0,System.Boolean)">
            <summary>
            Is <paramref name="entity"/> changed.
            </summary>
            <param name="entity">Trade object.</param>
            <param name="forced">Forced update.</param>
            <returns>Is changed.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.GetKey(`0)">
            <summary>
            Get key from trade object.
            </summary>
            <param name="item">Trade object.</param>
            <returns>The key.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.Write(Ecng.Common.CsvFileWriter,`0)">
            <summary>
            Write data into CSV.
            </summary>
            <param name="writer">CSV writer.</param>
            <param name="data">Trade object.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.Read(Ecng.Common.FastCsvReader)">
            <summary>
            Read data from CSV.
            </summary>
            <param name="reader">CSV reader.</param>
            <returns>Trade object.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.OnAdding(`0)">
            <summary>
            
            </summary>
            <param name="item">Trade object.</param>
            <returns></returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.OnRemoved(`0)">
            <summary>
            
            </summary>
            <param name="item">Trade object.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.OnCleared">
            <summary>
            
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.WriteMany(`0[])">
            <summary>
            Write data into storage.
            </summary>
            <param name="values">Trading objects.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.ClearCache">
            <summary>
            Clear cache.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.AddCache(`0)">
            <summary>
            Add item to cache.
            </summary>
            <param name="item">New item.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.UpdateCache(`0)">
            <summary>
            Update item in cache.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.RemoveCache(`0)">
            <summary>
            Remove item from cache.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityList`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Storages.Csv.CsvEntityRegistry">
            <summary>
            The CSV storage of trading objects.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Path">
            <summary>
            The path to data directory.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Storage">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Encoding">
            <summary>
            Encoding.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.DelayAction">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Exchanges">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.ExchangeBoards">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Securities">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Portfolios">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Positions">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.PositionStorage">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.Csv.CsvEntityRegistry"/>.
            </summary>
            <param name="path">The path to data directory.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Add``1(StockSharp.Algo.Storages.Csv.CsvEntityList{``0})">
            <summary>
            Add list of trade objects.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="list">List of trade objects.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Init">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1">
            <summary>
            The candle serializer in the CSV format.
            </summary>
            <typeparam name="TCandleMessage"><see cref="T:StockSharp.Messages.CandleMessage"/> derived type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1.#ctor(StockSharp.Messages.SecurityId,System.Object,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1"/>.
            </summary>
            <param name="securityId">Security ID.</param>
            <param name="arg">Candle arg.</param>
            <param name="encoding">Encoding.</param>
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1.CreateMetaInfo(System.DateTime)">
            <summary>
            To create empty meta-information.
            </summary>
            <param name="date">Date.</param>
            <returns>Meta-information on data for one day.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1.Serialize(System.IO.Stream,System.Collections.Generic.IEnumerable{`0},StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Save data into stream.
            </summary>
            <param name="stream">Data stream.</param>
            <param name="data">Data.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1.Write(Ecng.Common.CsvFileWriter,`0,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Write data to the specified writer.
            </summary>
            <param name="writer">CSV writer.</param>
            <param name="data">Data.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Read data from the specified reader.
            </summary>
            <param name="reader">CSV reader.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
            <returns>Data.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.Csv.CsvHelper">
            <summary>
            CSV helper class.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Storages.Csv.CsvHelper.DateFormat">
            <summary>
            <see cref="T:System.DateTime"/> format.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Storages.Csv.CsvHelper.TimeMlsFormat">
            <summary>
            <see cref="T:System.TimeSpan"/> format with milliseconds.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Storages.Csv.CsvHelper.TimeFormat">
            <summary>
            <see cref="T:System.TimeSpan"/> format.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Storages.Csv.CsvHelper.DateParser">
            <summary>
            <see cref="T:System.DateTime"/> parser.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Storages.Csv.CsvHelper.TimeMlsParser">
            <summary>
            <see cref="T:System.TimeSpan"/> parser.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Storages.Csv.CsvHelper.TimeParser">
            <summary>
            <see cref="T:System.TimeSpan"/> parser.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvHelper.ReadTime(Ecng.Common.FastCsvReader,System.DateTime)">
            <summary>
            Read <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="reader">CSV reader.</param>
            <param name="date">Date.</param>
            <returns><see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1">
            <summary>
            The serializer in the CSV format.
            </summary>
            <typeparam name="TData">Data type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1"/>.
            </summary>
            <param name="encoding">Encoding.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.#ctor(StockSharp.Messages.SecurityId,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1"/>.
            </summary>
            <param name="securityId">Security ID.</param>
            <param name="encoding">Encoding.</param>
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.Encoding">
            <summary>
            Encoding.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.Format">
            <summary>
            Storage format.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.TimePrecision">
            <summary>
            Time precision.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.CreateMetaInfo(System.DateTime)">
            <summary>
            To create empty meta-information.
            </summary>
            <param name="date">Date.</param>
            <returns>Meta-information on data for one day.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.Serialize(System.IO.Stream,System.Collections.Generic.IEnumerable{`0},StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Save data into stream.
            </summary>
            <param name="stream">Data stream.</param>
            <param name="data">Data.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.Write(Ecng.Common.CsvFileWriter,`0,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Write data to the specified writer.
            </summary>
            <param name="writer">CSV writer.</param>
            <param name="data">Data.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.Deserialize(System.IO.Stream,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            To load data from the stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
            <returns>Data.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Read data from the specified reader.
            </summary>
            <param name="reader">CSV reader.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
            <returns>Data.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.Csv.Level1CsvSerializer">
            <summary>
            The level 1 serializer in the CSV format.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.Level1CsvSerializer.#ctor(StockSharp.Messages.SecurityId,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.Csv.Level1CsvSerializer"/>.
            </summary>
            <param name="securityId">Security ID.</param>
            <param name="encoding">Encoding.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.Level1CsvSerializer.Write(Ecng.Common.CsvFileWriter,StockSharp.Messages.Level1ChangeMessage,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Write data to the specified writer.
            </summary>
            <param name="writer">CSV writer.</param>
            <param name="data">Data.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.Level1CsvSerializer.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Read data from the specified reader.
            </summary>
            <param name="reader">CSV reader.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
            <returns>Data.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.Csv.NewsCsvSerializer">
            <summary>
            The news serializer in the CSV format.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.NewsCsvSerializer.Write(Ecng.Common.CsvFileWriter,StockSharp.Messages.NewsMessage,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.NewsCsvSerializer.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Storages.Csv.OrderLogCsvSerializer">
            <summary>
            The order log serializer in the CSV format.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.OrderLogCsvSerializer.#ctor(StockSharp.Messages.SecurityId,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.Csv.OrderLogCsvSerializer"/>.
            </summary>
            <param name="securityId">Security ID.</param>
            <param name="encoding">Encoding.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.OrderLogCsvSerializer.CreateMetaInfo(System.DateTime)">
            <summary>
            To create empty meta-information.
            </summary>
            <param name="date">Date.</param>
            <returns>Meta-information on data for one day.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.OrderLogCsvSerializer.Write(Ecng.Common.CsvFileWriter,StockSharp.Messages.ExecutionMessage,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Write data to the specified writer.
            </summary>
            <param name="writer">CSV writer.</param>
            <param name="data">Data.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.OrderLogCsvSerializer.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Read data from the specified reader.
            </summary>
            <param name="reader">CSV reader.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
            <returns>Data.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.Csv.QuoteCsvSerializer">
            <summary>
            The quote serializer in the CSV format.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.QuoteCsvSerializer.#ctor(StockSharp.Messages.SecurityId,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.Csv.QuoteCsvSerializer"/>.
            </summary>
            <param name="securityId">Security ID.</param>
            <param name="encoding">Encoding.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.QuoteCsvSerializer.Write(Ecng.Common.CsvFileWriter,StockSharp.Algo.Storages.Csv.NullableTimeQuoteChange,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Write data to the specified writer.
            </summary>
            <param name="writer">CSV writer.</param>
            <param name="data">Data.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.QuoteCsvSerializer.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Read data from the specified reader.
            </summary>
            <param name="reader">CSV reader.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
            <returns>Data.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.Csv.TickCsvSerializer">
            <summary>
            The tick serializer in the CSV format.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.TickCsvSerializer.#ctor(StockSharp.Messages.SecurityId,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.Csv.TickCsvSerializer"/>.
            </summary>
            <param name="securityId">Security ID.</param>
            <param name="encoding">Encoding.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.TickCsvSerializer.CreateMetaInfo(System.DateTime)">
            <summary>
            To create empty meta-information.
            </summary>
            <param name="date">Date.</param>
            <returns>Meta-information on data for one day.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.TickCsvSerializer.Write(Ecng.Common.CsvFileWriter,StockSharp.Messages.ExecutionMessage,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Write data to the specified writer.
            </summary>
            <param name="writer">CSV writer.</param>
            <param name="data">Data.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.TickCsvSerializer.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Read data from the specified reader.
            </summary>
            <param name="reader">CSV reader.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
            <returns>Data.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.Csv.TransactionCsvSerializer">
            <summary>
            The transaction serializer in the CSV format.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.TransactionCsvSerializer.#ctor(StockSharp.Messages.SecurityId,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.Csv.TransactionCsvSerializer"/>.
            </summary>
            <param name="securityId">Security ID.</param>
            <param name="encoding">Encoding.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.TransactionCsvSerializer.Write(Ecng.Common.CsvFileWriter,StockSharp.Messages.ExecutionMessage,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.Csv.TransactionCsvSerializer.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Storages.ISecurityAssociationStorage">
            <summary>
            The interface describing the security associations storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityAssociationStorage.Init">
            <summary>
            Initialize the storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityAssociationStorage.Save(StockSharp.Messages.SecurityId,Ecng.Collections.PairSet{System.String,StockSharp.Messages.SecurityId})">
            <summary>
            Save association.
            </summary>
            <param name="master">Master security id.</param>
            <param name="tradable">Tradable security ids.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityAssociationStorage.Save(StockSharp.Messages.SecurityId,System.String,StockSharp.Messages.SecurityId)">
            <summary>
            Save association.
            </summary>
            <param name="master">Master security id.</param>
            <param name="adapterName">Adapter name.</param>
            <param name="tradable">Tradable security id.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityAssociationStorage.Load">
            <summary>
            Load all associations.
            </summary>
            <returns>All associations</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityAssociationStorage.Delete(StockSharp.Messages.SecurityId)">
            <summary>
            Delete association.
            </summary>
            <param name="master">Master security id.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityAssociationStorage.Delete(StockSharp.Messages.SecurityId,System.String)">
            <summary>
            Delete association.
            </summary>
            <param name="master">Master security id.</param>
            <param name="adapterName">Adapter name.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityAssociationStorage.DeleteAll">
            <summary>
            Delete all associations.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.CsvSecurityAssociationStorage">
            <summary>
            CSV security associations storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.CsvSecurityAssociationStorage.DelayAction">
            <summary>
            The time delayed action.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.CsvSecurityAssociationStorage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.CsvSecurityAssociationStorage"/>.
            </summary>
            <param name="path">Path to storage.</param>
        </member>
        <member name="P:StockSharp.Algo.Storages.CsvSecurityAssociationStorage.IdGenerator">
            <summary>
            Security id generator.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.ISnapshotSerializer`2">
            <summary>
            The interface for serialize snapshots.
            </summary>
            <typeparam name="TKey">Type of key value.</typeparam>
            <typeparam name="TMessage">Message type.</typeparam>
        </member>
        <member name="P:StockSharp.Algo.Storages.ISnapshotSerializer`2.DataType">
            <summary>
            Data type info.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.ISnapshotSerializer`2.Version">
            <summary>
            Version of data format.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.ISnapshotSerializer`2.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISnapshotSerializer`2.Serialize(System.Version,`1)">
            <summary>
            Serialize the specified message to byte array.
            </summary>
            <param name="version">Version of data format.</param>
            <param name="message">Message.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISnapshotSerializer`2.Deserialize(System.Version,System.Byte[])">
            <summary>
            Deserialize message from byte array.
            </summary>
            <param name="version">Version of data format.</param>
            <param name="buffer">Byte array.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISnapshotSerializer`2.GetKey(`1)">
            <summary>
            Get key for the specified message.
            </summary>
            <param name="message">Message.</param>
            <returns>Key.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISnapshotSerializer`2.CreateCopy(`1)">
            <summary>
            Create copy for the new snapshot.
            </summary>
            <param name="message">Message.</param>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISnapshotSerializer`2.Update(`1,`1)">
            <summary>
            Update the specified message by new changes.
            </summary>
            <param name="message">Message.</param>
            <param name="changes">Changes.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.SecurityIdMapping">
            <summary>
            Security identifier mapping.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.SecurityIdMapping.StockSharpId">
            <summary>
            StockSharp format.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.SecurityIdMapping.AdapterId">
            <summary>
            Adapter format.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityIdMapping.op_Implicit(System.Collections.Generic.KeyValuePair{StockSharp.Messages.SecurityId,StockSharp.Messages.SecurityId})~StockSharp.Algo.Storages.SecurityIdMapping">
            <summary>
            Cast <see cref="T:System.Collections.Generic.KeyValuePair`2"/> object to the type <see cref="T:StockSharp.Algo.Storages.SecurityIdMapping"/>.
            </summary>
            <param name="pair"><see cref="T:System.Collections.Generic.KeyValuePair`2"/> value.</param>
            <returns><see cref="T:StockSharp.Algo.Storages.SecurityIdMapping"/> value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityIdMapping.op_Explicit(StockSharp.Algo.Storages.SecurityIdMapping)~System.Collections.Generic.KeyValuePair{StockSharp.Messages.SecurityId,StockSharp.Messages.SecurityId}">
            <summary>
            Cast object from <see cref="T:StockSharp.Algo.Storages.SecurityIdMapping"/> to <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="mapping"><see cref="T:StockSharp.Algo.Storages.SecurityIdMapping"/> value.</param>
            <returns><see cref="T:System.Collections.Generic.KeyValuePair`2"/> value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityIdMapping.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Storages.ISecurityMappingStorage">
            <summary>
            Security identifier mappings storage.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Storages.ISecurityMappingStorage.Changed">
            <summary>
            The new native security identifier added to storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityMappingStorage.Init">
            <summary>
            Initialize the storage.
            </summary>
            <returns>Possible errors with storage names. Empty dictionary means initialization without any issues.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityMappingStorage.GetStorageNames">
            <summary>
            Get storage names.
            </summary>
            <returns>Storage names.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityMappingStorage.Get(System.String)">
            <summary>
            Get security identifier mappings for storage. 
            </summary>
            <param name="name">Storage name.</param>
            <returns>Security identifiers mapping.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityMappingStorage.Add(System.String,StockSharp.Algo.Storages.SecurityIdMapping)">
            <summary>
            Add security identifier mapping.
            </summary>
            <param name="storageName">Storage name.</param>
            <param name="mapping">Security identifier mapping.</param>
            <returns><see langword="true"/> if security mapping was added. If was changed, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityMappingStorage.Remove(System.String,StockSharp.Messages.SecurityId)">
            <summary>
            Remove security mapping.
            </summary>
            <param name="storageName">Storage name.</param>
            <param name="stockSharpId">StockSharp format.</param>
            <returns><see langword="true"/> if mapping was added. Otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.InMemorySecurityMappingStorage">
            <summary>
            In memory security identifier mappings storage.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.CsvSecurityMappingStorage">
            <summary>
            CSV security identifier mappings storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.CsvSecurityMappingStorage.DelayAction">
            <summary>
            The time delayed action.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Storages.CsvSecurityMappingStorage.Changed">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.CsvSecurityMappingStorage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.CsvSecurityMappingStorage"/>.
            </summary>
            <param name="path">Path to storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.CsvSecurityMappingStorage.Init">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.CsvSecurityMappingStorage.GetStorageNames">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.CsvSecurityMappingStorage.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.CsvSecurityMappingStorage.Add(System.String,StockSharp.Algo.Storages.SecurityIdMapping)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.CsvSecurityMappingStorage.Remove(System.String,StockSharp.Messages.SecurityId)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Storages.IExchangeInfoProvider">
            <summary>
            Interface describing exchanges and trading boards provider.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IExchangeInfoProvider.Boards">
            <summary>
            All exchanges.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IExchangeInfoProvider.Exchanges">
            <summary>
            All boards.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IExchangeInfoProvider.GetExchangeBoard(System.String)">
            <summary>
            To get a board by the code.
            </summary>
            <param name="code">The board code <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.Code"/>.</param>
            <returns>Trading board. If the board with the specified code does not exist, then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IExchangeInfoProvider.GetExchange(System.String)">
            <summary>
            To get an exchange by the code.
            </summary>
            <param name="code">The exchange code <see cref="P:StockSharp.BusinessEntities.Exchange.Name"/>.</param>
            <returns>Exchange. If the exchange with the specified code does not exist, then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IExchangeInfoProvider.Save(StockSharp.BusinessEntities.ExchangeBoard)">
            <summary>
            To save the board.
            </summary>
            <param name="board">Trading board.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IExchangeInfoProvider.Save(StockSharp.BusinessEntities.Exchange)">
            <summary>
            To save the exchange.
            </summary>
            <param name="exchange">Exchange.</param>
        </member>
        <member name="E:StockSharp.Algo.Storages.IExchangeInfoProvider.BoardAdded">
            <summary>
            Notification about adding a new board.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Storages.IExchangeInfoProvider.ExchangeAdded">
            <summary>
            Notification about adding a new exchange.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Storages.IExchangeInfoProvider.BoardRemoved">
            <summary>
            Notification about removing the existing board.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Storages.IExchangeInfoProvider.ExchangeRemoved">
            <summary>
            Notification about removing the existing exchange.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IExchangeInfoProvider.Delete(StockSharp.BusinessEntities.Exchange)">
            <summary>
            Delete exchange.
            </summary>
            <param name="exchange">Exchange.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IExchangeInfoProvider.Delete(StockSharp.BusinessEntities.ExchangeBoard)">
            <summary>
            Delete exchange board.
            </summary>
            <param name="board">Exchange board.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.InMemoryExchangeInfoProvider">
            <summary>
            The in memory provider of stocks and trade boards.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.InMemoryExchangeInfoProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.InMemoryExchangeInfoProvider"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.InMemoryExchangeInfoProvider.Boards">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Storages.InMemoryExchangeInfoProvider.Exchanges">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.InMemoryExchangeInfoProvider.GetExchangeBoard(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.InMemoryExchangeInfoProvider.GetExchange(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.InMemoryExchangeInfoProvider.Save(StockSharp.BusinessEntities.ExchangeBoard)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.InMemoryExchangeInfoProvider.Save(StockSharp.BusinessEntities.Exchange)">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Storages.InMemoryExchangeInfoProvider.BoardAdded">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Storages.InMemoryExchangeInfoProvider.ExchangeAdded">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Storages.InMemoryExchangeInfoProvider.BoardRemoved">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Storages.InMemoryExchangeInfoProvider.ExchangeRemoved">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.InMemoryExchangeInfoProvider.Delete(StockSharp.BusinessEntities.Exchange)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.InMemoryExchangeInfoProvider.Delete(StockSharp.BusinessEntities.ExchangeBoard)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Storages.StorageExchangeInfoProvider">
            <summary>
            The storage based provider of stocks and trade boards.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageExchangeInfoProvider.#ctor(StockSharp.Algo.Storages.IEntityRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.StorageExchangeInfoProvider"/>.
            </summary>
            <param name="entityRegistry">The storage of trade objects.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageExchangeInfoProvider.Save(StockSharp.BusinessEntities.ExchangeBoard)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageExchangeInfoProvider.Save(StockSharp.BusinessEntities.Exchange)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Storages.IExtendedInfoStorageItem">
            <summary>
            Extended info <see cref="P:StockSharp.Messages.Message.ExtensionInfo"/> storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IExtendedInfoStorageItem.Fields">
            <summary>
            Extended fields (names and types).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IExtendedInfoStorageItem.Securities">
            <summary>
            Get all security identifiers.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IExtendedInfoStorageItem.StorageName">
            <summary>
            Storage name.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IExtendedInfoStorageItem.Init">
            <summary>
            Initialize the storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IExtendedInfoStorageItem.Add(StockSharp.Messages.SecurityId,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Add extended info.
            </summary>
            <param name="securityId">Security identifier.</param>
            <param name="extensionInfo">Extended information.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IExtendedInfoStorageItem.Load">
            <summary>
            Load extended info. 
            </summary>
            <returns>Extended information.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IExtendedInfoStorageItem.Load(StockSharp.Messages.SecurityId)">
            <summary>
            Load extended info. 
            </summary>
            <param name="securityId">Security identifier.</param>
            <returns>Extended information.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IExtendedInfoStorageItem.Delete(StockSharp.Messages.SecurityId)">
            <summary>
            Delete extended info.
            </summary>
            <param name="securityId">Security identifier.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.IExtendedInfoStorage">
            <summary>
            Extended info <see cref="P:StockSharp.Messages.Message.ExtensionInfo"/> storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IExtendedInfoStorage.Storages">
            <summary>
            Get all extended storages.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IExtendedInfoStorage.Init">
            <summary>
            Initialize the storage.
            </summary>
            <returns>Possible errors with storage names. Empty dictionary means initialization without any issues.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IExtendedInfoStorage.Get(System.String)">
            <summary>
            To get storage for the specified name.
            </summary>
            <param name="storageName">Storage name.</param>
            <returns>Storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IExtendedInfoStorage.Create(System.String,System.Tuple{System.String,System.Type}[])">
            <summary>
            To create storage.
            </summary>
            <param name="storageName">Storage name.</param>
            <param name="fields">Extended fields (names and types).</param>
            <returns>Storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IExtendedInfoStorage.Delete(StockSharp.Algo.Storages.IExtendedInfoStorageItem)">
            <summary>
            Delete storage.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="E:StockSharp.Algo.Storages.IExtendedInfoStorage.Created">
            <summary>
            The storage was created.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Storages.IExtendedInfoStorage.Deleted">
            <summary>
            The storage was deleted.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.CsvExtendedInfoStorage">
            <summary>
            Extended info <see cref="P:StockSharp.Messages.Message.ExtensionInfo"/> storage, used csv files.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.CsvExtendedInfoStorage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.CsvExtendedInfoStorage"/>.
            </summary>
            <param name="path">Path to storage.</param>
        </member>
        <member name="P:StockSharp.Algo.Storages.CsvExtendedInfoStorage.DelayAction">
            <summary>
            The time delayed action.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.CsvExtendedInfoStorage.Init">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Storages.INativeIdStorage">
            <summary>
            Security native identifier storage.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Storages.INativeIdStorage.Added">
            <summary>
            The new native security identifier added to storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.INativeIdStorage.Init">
            <summary>
            Initialize the storage.
            </summary>
            <returns>Possible errors with storage names. Empty dictionary means initialization without any issues.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.INativeIdStorage.Get(System.String)">
            <summary>
            Get native security identifiers for storage. 
            </summary>
            <param name="storageName">Storage name.</param>
            <returns>Security identifiers.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.INativeIdStorage.TryAdd(System.String,StockSharp.Messages.SecurityId,System.Object,System.Boolean)">
            <summary>
            Try add native security identifier to storage.
            </summary>
            <param name="storageName">Storage name.</param>
            <param name="securityId">Security identifier.</param>
            <param name="nativeId">Native (internal) trading system security id.</param>
            <param name="isPersistable">Save the identifier as a permanent.</param>
            <returns><see langword="true"/> if native identifier was added. Otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.INativeIdStorage.TryGetByNativeId(System.String,System.Object)">
            <summary>
            Try get security identifier by native identifier.
            </summary>
            <param name="storageName">Storage name.</param>
            <param name="nativeId">Native (internal) trading system security id.</param>
            <returns>Security identifier.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.INativeIdStorage.TryGetBySecurityId(System.String,StockSharp.Messages.SecurityId)">
            <summary>
            Try get native security identifier by identifier.
            </summary>
            <param name="storageName">Storage name.</param>
            <param name="securityId">Security identifier.</param>
            <returns>Native (internal) trading system security id.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.CsvNativeIdStorage">
            <summary>
            CSV security native identifier storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.CsvNativeIdStorage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.CsvNativeIdStorage"/>.
            </summary>
            <param name="path">Path to storage.</param>
        </member>
        <member name="P:StockSharp.Algo.Storages.CsvNativeIdStorage.DelayAction">
            <summary>
            The time delayed action.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Storages.CsvNativeIdStorage.Added">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.CsvNativeIdStorage.Init">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.CsvNativeIdStorage.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.CsvNativeIdStorage.TryAdd(System.String,StockSharp.Messages.SecurityId,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.CsvNativeIdStorage.TryGetByNativeId(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.CsvNativeIdStorage.TryGetBySecurityId(System.String,StockSharp.Messages.SecurityId)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Storages.InMemoryNativeIdStorage">
            <summary>
            In memory security native identifier storage.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.BufferMessageAdapter">
            <summary>
            Buffered message adapter.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.BufferMessageAdapter.DataBuffer`2">
            <summary>
            The market data buffer.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TMarketData">Market data type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.DataBuffer`2.Add(`0,`1)">
            <summary>
            To add new information to the buffer.
            </summary>
            <param name="key">The key possessing new information.</param>
            <param name="data">New information.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.DataBuffer`2.Get">
            <summary>
            To get accumulated data from the buffer and delete them.
            </summary>
            <returns>Gotten data.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.BufferMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">Underlying adapter.</param>
        </member>
        <member name="P:StockSharp.Algo.Storages.BufferMessageAdapter.FilterSubscription">
            <summary>
            Save data only for subscriptions.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.BufferMessageAdapter.Enabled">
            <summary>
            Enable storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.BufferMessageAdapter.TicksAsLevel1">
            <summary>
            Interpret tick messages as level1.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.Subscribe(StockSharp.Messages.MarketDataMessage)">
            <summary>
            Update filter with new subscription.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.UnSubscribe(StockSharp.Messages.MarketDataMessage)">
            <summary>
            Update filter with remove a subscription.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.Subscribe(StockSharp.Messages.SecurityId,StockSharp.Algo.DataType)">
            <summary>
            Update filter with new subscription.
            </summary>
            <param name="securityId">Security ID.</param>
            <param name="dataType">Data type info.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.ClearSubscriptions">
            <summary>
            Remove all subscriptions.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.GetTicks">
            <summary>
            Get accumulated ticks.
            </summary>
            <returns>Ticks.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.GetOrderLog">
            <summary>
            Get accumulated order log.
            </summary>
            <returns>Order log.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.GetTransactions">
            <summary>
            Get accumulated transactions.
            </summary>
            <returns>Transactions.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.GetCandles">
            <summary>
            Get accumulated candles.
            </summary>
            <returns>Candles.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.GetLevel1">
            <summary>
            Get accumulated level1.
            </summary>
            <returns>Level1.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.GetPositionChanges">
            <summary>
            Get accumulated position changes.
            </summary>
            <returns>Position changes.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.GetOrderBooks">
            <summary>
            Get accumulated order books.
            </summary>
            <returns>Order books.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.GetNews">
            <summary>
            Get accumulated news.
            </summary>
            <returns>News.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Storages.StorageMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.CacheableMarketDataDrive">
            <summary>
            The market data storage, saving data in the cache-storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.CacheableMarketDataDrive.#ctor(StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.IMarketDataStorageDrive,StockSharp.Algo.Storages.IMarketDataStorageDrive,System.Action{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.CacheableMarketDataDrive"/>.
            </summary>
            <param name="drive">The storage (database, file etc.).</param>
            <param name="sourceDrive">The initial storage of market-data.</param>
            <param name="cacheDrive">The cache-storage of market-data.</param>
            <param name="errorHandler">Error handler.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1">
            <summary>
            The cached aggregator-storage, allowing to load data simultaneously from several market data storages.
            </summary>
            <typeparam name="T">Message type.</typeparam>
        </member>
        <member name="P:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.Boards">
            <summary>
            List of all exchange boards, for which instruments are loaded.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.MessageCount">
            <summary>
            Message queue count.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.MaxMessageCount">
            <summary>
            Max message queue count.
            </summary>
            <remarks>
            The default value is -1, which corresponds to the size without limitations.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.PostTradeMarketTimeChangedCount">
            <summary>
            The number of the event <see cref="E:StockSharp.BusinessEntities.IConnector.MarketTimeChanged"/> calls after end of trading. By default it is equal to 2.
            </summary>
            <remarks>
            It is required for activation of post-trade rules (rules, basing on events, occurring after end of trading).
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.MarketTimeChangedInterval">
            <summary>
            The interval of message <see cref="T:StockSharp.Messages.TimeMessage"/> generation. By default, it is equal to 1 sec.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.CheckTradableDates">
            <summary>
            Check loading dates are they tradable.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.#ctor(Ecng.Common.IdGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1"/>.
            </summary>
            <param name="transactionIdGenerator">Transaction id generator.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.#ctor(Ecng.Common.IdGenerator,StockSharp.Algo.Storages.BasketMarketDataStorage{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1"/>.
            </summary>
            <param name="transactionIdGenerator">Transaction id generator.</param>
            <param name="basketStorage">The aggregator-storage, allowing to load data simultaneously from several market data storages.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.AddStorage(StockSharp.Algo.Storages.IMarketDataStorage,System.Int64)">
            <summary>
            Add inner market data storage.
            </summary>
            <param name="storage">Market data storage.</param>
            <param name="transactionId">The subscription identifier.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.RemoveStorage(System.Int64)">
            <summary>
            Remove inner market data storage.
            </summary>
            <param name="originalTransactionId">The subscription identifier.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.DisposeManaged">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.Start(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Start data loading.
            </summary>
            <param name="startDate">Date in history for starting the paper trading.</param>
            <param name="stopDate">Date in history to stop the paper trading (date is included).</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.Stop">
            <summary>
            Stop data loading.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.ExchangeList">
            <summary>
            The class for the presentation in the form of stocks list, stored in the external storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.ExchangeList.#ctor(Ecng.Serialization.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.ExchangeList"/>.
            </summary>
            <param name="storage">The special interface for direct access to the storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.IMarketDataMetaInfo">
            <summary>
            Meta-information on data for one day.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.Date">
            <summary>
            Date of day.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.Count">
            <summary>
            Number of data.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.PriceStep">
            <summary>
            Value <see cref="P:StockSharp.BusinessEntities.Security.PriceStep"/> at day <see cref="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.Date"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.VolumeStep">
            <summary>
            Value <see cref="P:StockSharp.BusinessEntities.Security.VolumeStep"/> at day <see cref="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.Date"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.FirstTime">
            <summary>
            First record time.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.LastTime">
            <summary>
            Last record time.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.LastId">
            <summary>
            Last record identifier.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataMetaInfo.Write(System.IO.Stream)">
            <summary>
            To save meta-information parameters to stream.
            </summary>
            <param name="stream">Data stream.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataMetaInfo.Read(System.IO.Stream)">
            <summary>
            To load meta-information parameters from the stream.
            </summary>
            <param name="stream">Data stream.</param>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.IsOverride">
            <summary>
            Is override all data.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.MetaInfo.Write(System.IO.Stream)">
            <summary>
            To save meta-information parameters to stream.
            </summary>
            <param name="stream">Data stream.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.MetaInfo.Read(System.IO.Stream)">
            <summary>
            To load meta-information parameters from the stream.
            </summary>
            <param name="stream">Data stream.</param>
        </member>
        <member name="P:StockSharp.Algo.Storages.MetaInfo.IsOverride">
            <summary>
            Is override all data.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.InMemoryMarketDataStorage`1">
            <summary>
            The storage, generating data in the process of operation.
            </summary>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Storages.InMemoryMarketDataStorage`1.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.DateTimeOffset,System.Collections.Generic.IEnumerable{StockSharp.Messages.Message}},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.InMemoryMarketDataStorage`1"/>.
            </summary>
            <param name="security">The instrument.</param>
            <param name="arg">The additional argument, associated with data. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.</param>
            <param name="getData">Handler for retrieving in-memory data.</param>
            <param name="dataType">Data type.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.InMemoryMarketDataStorage`1.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.DateTimeOffset,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.InMemoryMarketDataStorage`1"/>.
            </summary>
            <param name="security">The instrument.</param>
            <param name="arg">The additional argument, associated with data. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.</param>
            <param name="getData">Handler for retrieving in-memory data.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.InMemoryMarketDataStorage`1.Load(System.DateTime)">
            <summary>
            To load data.
            </summary>
            <param name="date">Date, for which data shall be loaded.</param>
            <returns>Data. If there is no data, the empty set will be returned.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.ISecurityMarketDataDrive">
            <summary>
            The interface, describing the storage for instrument.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.ISecurityMarketDataDrive.SecurityId">
            <summary>
            Instrument identifier.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityMarketDataDrive.GetTickStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.ExecutionMessage})">
            <summary>
            To get the storage of tick trades for the specified instrument.
            </summary>
            <param name="serializer">The serializer.</param>
            <returns>The storage of tick trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityMarketDataDrive.GetQuoteStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.QuoteChangeMessage})">
            <summary>
            To get the storage of order books for the specified instrument.
            </summary>
            <param name="serializer">The serializer.</param>
            <returns>The order books storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityMarketDataDrive.GetOrderLogStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.ExecutionMessage})">
            <summary>
            To get the storage of orders log for the specified instrument.
            </summary>
            <param name="serializer">The serializer.</param>
            <returns>The storage of orders log.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityMarketDataDrive.GetLevel1Storage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.Level1ChangeMessage})">
            <summary>
            To get the storage of level1 data.
            </summary>
            <param name="serializer">The serializer.</param>
            <returns>The storage of level1 data.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityMarketDataDrive.GetPositionMessageStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.PositionChangeMessage})">
            <summary>
            To get the storage of position changes data.
            </summary>
            <param name="serializer">The serializer.</param>
            <returns>The storage of position changes data.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityMarketDataDrive.GetCandleStorage(System.Type,System.Object,StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.CandleMessage})">
            <summary>
            To get the candles storage for the specified instrument.
            </summary>
            <param name="candleType">The candle type.</param>
            <param name="arg">Candle arg.</param>
            <param name="serializer">The serializer.</param>
            <returns>The candles storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityMarketDataDrive.GetTransactionStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.ExecutionMessage})">
            <summary>
            To get the transactions storage for the specified instrument.
            </summary>
            <param name="serializer">The serializer.</param>
            <returns>The transactions storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityMarketDataDrive.GetStorage(System.Type,System.Object,StockSharp.Algo.Storages.IMarketDataSerializer)">
            <summary>
            To get the market-data storage.
            </summary>
            <param name="dataType">Market data type.</param>
            <param name="arg">The parameter associated with the <paramref name="dataType" /> type. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.</param>
            <param name="serializer">The serializer.</param>
            <returns>Market-data storage.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.SecurityMarketDataDrive">
            <summary>
            The storage for the instrument.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.#ctor(StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.BusinessEntities.Security)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.SecurityMarketDataDrive"/>.
            </summary>
            <param name="drive">The storage (database, file etc.).</param>
            <param name="security">Security.</param>
        </member>
        <member name="P:StockSharp.Algo.Storages.SecurityMarketDataDrive.Drive">
            <summary>
            The storage (database, file etc.).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.SecurityMarketDataDrive.Security">
            <summary>
            Security.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.SecurityMarketDataDrive.SecurityId">
            <summary>
            Instrument identifier.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.SecurityMarketDataDrive.ExchangeInfoProvider">
            <summary>
            Exchanges and trading boards provider.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.GetTickStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.ExecutionMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.GetQuoteStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.QuoteChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.GetOrderLogStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.ExecutionMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.GetLevel1Storage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.Level1ChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.GetPositionMessageStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.PositionChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.GetCandleStorage(System.Type,System.Object,StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.CandleMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.GetTransactionStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.ExecutionMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.GetStorage(System.Type,System.Object,StockSharp.Algo.Storages.IMarketDataSerializer)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Storages.ISecurityStorage">
            <summary>
            The interface for access to the storage of information on instruments.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityStorage.Save(StockSharp.BusinessEntities.Security,System.Boolean)">
            <summary>
            Save security.
            </summary>
            <param name="security">Security.</param>
            <param name="forced">Forced update.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityStorage.Delete(StockSharp.BusinessEntities.Security)">
            <summary>
            Delete security.
            </summary>
            <param name="security">Security.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISecurityStorage.DeleteBy(StockSharp.BusinessEntities.Security)">
            <summary>
            To delete instruments by the criterion.
            </summary>
            <param name="criteria">The criterion.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.ISnapshotStorage">
            <summary>
            The interface for access to the storage of snapshot prices.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.ISnapshotStorage.Dates">
            <summary>
            To get all the dates for which market data are recorded.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISnapshotStorage.ClearAll">
            <summary>
            Clear storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISnapshotStorage.Clear(System.Object)">
            <summary>
            Remove snapshot for the specified key.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISnapshotStorage.Update(StockSharp.Messages.Message)">
            <summary>
            Update snapshot.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISnapshotStorage.Get(System.Object)">
            <summary>
            Get snapshot for the specified key.
            </summary>
            <param name="key">Key.</param>
            <returns>Snapshot.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISnapshotStorage.GetAll(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Get all snapshots.
            </summary>
            <param name="from">Start date, from which data needs to be retrieved.</param>
            <param name="to">End date, until which data needs to be retrieved.</param>
            <returns>All snapshots.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.ISnapshotStorage`2">
            <summary>
            The interface for access to the storage of snapshot prices.
            </summary>
            <typeparam name="TKey">Type of key value.</typeparam>
            <typeparam name="TMessage">Message type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISnapshotStorage`2.Clear(`0)">
            <summary>
            Remove snapshot for the specified key.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISnapshotStorage`2.Get(`0)">
            <summary>
            Get snapshot for the specified key.
            </summary>
            <param name="key">Key.</param>
            <returns>Snapshot.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.ISnapshotStorage`2.GetAll(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Get all snapshots.
            </summary>
            <param name="from">Start date, from which data needs to be retrieved.</param>
            <param name="to">End date, until which data needs to be retrieved.</param>
            <returns>All snapshots.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.IPositionStorage">
            <summary>
            The interface for access to the position storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IPositionStorage.Save(StockSharp.BusinessEntities.Portfolio)">
            <summary>
            Save portfolio.
            </summary>
            <param name="portfolio">Portfolio.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IPositionStorage.Delete(StockSharp.BusinessEntities.Portfolio)">
            <summary>
            Delete portfolio.
            </summary>
            <param name="portfolio">Portfolio.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IPositionStorage.Save(StockSharp.BusinessEntities.Position)">
            <summary>
            Save position.
            </summary>
            <param name="position">Position.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IPositionStorage.Delete(StockSharp.BusinessEntities.Position)">
            <summary>
            Delete position.
            </summary>
            <param name="position">Position.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.IStoragePositionList">
            <summary>
            The interface for access to the position storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStoragePositionList.GetPosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security,System.String,System.String)">
            <summary>
            To get the position by portfolio and instrument.
            </summary>
            <param name="portfolio">The portfolio on which the position should be found.</param>
            <param name="security">The instrument on which the position should be found.</param>
            <param name="clientCode">The client code.</param>
            <param name="depoName">The depository name where the stock is located physically. By default, an empty string is passed, which means the total position by all depositories.</param>
            <returns>Position.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.IStorageSecurityList">
            <summary>
            The interface for access to the instrument storage.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.NewsList">
            <summary>
            The class for representation in the form of list of news, stored in the external storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.NewsList.#ctor(Ecng.Serialization.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.NewsList"/>.
            </summary>
            <param name="storage">The special interface for direct access to the storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.SnapshotRegistry">
            <summary>
            Snapshot storage registry.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.SnapshotRegistry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.SnapshotRegistry"/>.
            </summary>
            <param name="path">Path to storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.SnapshotRegistry.Init">
            <summary>
            Initialize the storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.SnapshotRegistry.DisposeManaged">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.SnapshotRegistry.GetSnapshotStorage(System.Type,System.Object)">
            <summary>
            To get the snapshot storage.
            </summary>
            <param name="dataType">Market data type.</param>
            <param name="arg">The parameter associated with the <paramref name="dataType" /> type. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.</param>
            <returns>The snapshot storage.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.StorageEntityFactory">
            <summary>
            Storage based entity factory.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageEntityFactory.#ctor(StockSharp.Algo.Storages.ISecurityStorage,StockSharp.Algo.Storages.IPositionStorage,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.StorageEntityFactory"/>.
            </summary>
            <param name="securityStorage">Securities meta info storage.</param>
            <param name="positionStorage">Position storage.</param>
            <param name="trackPositions">Track positions.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageEntityFactory.CreateSecurity(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageEntityFactory.CreatePortfolio(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageEntityFactory.CreatePosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Storages.EntityRegistry">
            <summary>
            The storage of trade objects.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.EntityRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.EntityRegistry"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.EntityRegistry.#ctor(Ecng.Serialization.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.EntityRegistry"/>.
            </summary>
            <param name="storage">The special interface for direct access to the storage.</param>
        </member>
        <member name="P:StockSharp.Algo.Storages.EntityRegistry.Storage">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Storages.EntityRegistry.Exchanges">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Storages.EntityRegistry.ExchangeBoards">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Storages.EntityRegistry.Securities">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Storages.EntityRegistry.Portfolios">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Storages.EntityRegistry.Positions">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Storages.EntityRegistry.PositionStorage">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Storages.EntityRegistry.DelayAction">
            <summary>
            The time delayed action.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.ExchangeBoardList">
            <summary>
            The class for representation in the form of list of exchange sites, stored in the external storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.ExchangeBoardList.#ctor(Ecng.Serialization.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.ExchangeBoardList"/>.
            </summary>
            <param name="storage">The special interface for direct access to the storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.ExchangeBoardList.GetIds">
            <summary>
            To get identifiers.
            </summary>
            <returns>Identifiers.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.IEntityRegistry">
            <summary>
            The interface describing the trade objects storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Storage">
            <summary>
            The special interface for direct access to the storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IEntityRegistry.DelayAction">
            <summary>
            The time delayed action.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Exchanges">
            <summary>
            List of exchanges.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IEntityRegistry.ExchangeBoards">
            <summary>
            The list of stock boards.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Securities">
            <summary>
            The list of instruments.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IEntityRegistry.PositionStorage">
            <summary>
            Position storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Portfolios">
            <summary>
            The list of portfolios.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Positions">
            <summary>
            The list of positions.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IEntityRegistry.Init">
            <summary>
            Initialize the storage.
            </summary>
            <returns>Possible errors with storage names. Empty dictionary means initialization without any issues.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.IMarketDataSerializer">
            <summary>
            The serializer.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataSerializer.Format">
            <summary>
            Storage format.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataSerializer.TimePrecision">
            <summary>
            Time precision.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataSerializer.CreateMetaInfo(System.DateTime)">
            <summary>
            To create empty meta-information.
            </summary>
            <param name="date">Date.</param>
            <returns>Meta-information on data for one day.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataSerializer.Serialize(System.IO.Stream,System.Collections.IEnumerable,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Save data into stream.
            </summary>
            <param name="stream">Data stream.</param>
            <param name="data">Data.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataSerializer.Deserialize(System.IO.Stream,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            To load data from the stream.
            </summary>
            <param name="stream">Data stream.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
            <returns>Data.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.IMarketDataSerializer`1">
            <summary>
            The serializer.
            </summary>
            <typeparam name="TData">Data type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataSerializer`1.Serialize(System.IO.Stream,System.Collections.Generic.IEnumerable{`0},StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            Save data into stream.
            </summary>
            <param name="stream">Data stream.</param>
            <param name="data">Data.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataSerializer`1.Deserialize(System.IO.Stream,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
            <summary>
            To load data from the stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="metaInfo">Meta-information on data for one day.</param>
            <returns>Data.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.IMarketDataStorage">
            <summary>
            The interface, describing the storage of market data (ticks, order books etc.).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.Dates">
            <summary>
            All data, for which market data are recorded.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.DataType">
            <summary>
            The type of market-data, operated by given storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.Security">
            <summary>
            The instrument, operated by the external storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.Arg">
            <summary>
            The additional argument, associated with data. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.Drive">
            <summary>
            The storage (database, file etc.).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.AppendOnlyNew">
            <summary>
            Whether to add new data or attempt to record all data without filter.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataStorage.Save(System.Collections.IEnumerable)">
            <summary>
            To save market data in storage.
            </summary>
            <param name="data">Market data.</param>
            <returns>Count of saved data.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataStorage.Delete(System.Collections.IEnumerable)">
            <summary>
            To delete market data from storage.
            </summary>
            <param name="data">Market data to be deleted.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataStorage.Delete(System.DateTime)">
            <summary>
            To remove market data on specified date from the storage.
            </summary>
            <param name="date">Date, for which all data shall be deleted.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataStorage.Load(System.DateTime)">
            <summary>
            To load data.
            </summary>
            <param name="date">Date, for which data shall be loaded.</param>
            <returns>Data. If there is no data, the empty set will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataStorage.GetMetaInfo(System.DateTime)">
            <summary>
            To get meta-information on data.
            </summary>
            <param name="date">Date, for which meta-information on data shall be received.</param>
            <returns>Meta-information on data. If there is no such date in history, <see langword="null" /> will be returned.</returns>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.Serializer">
            <summary>
            The serializer.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.IMarketDataStorage`1">
            <summary>
            The interface, describing the storage of market data (ticks, order books etc.).
            </summary>
            <typeparam name="TData">Market data type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.Save(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            To save market data in storage.
            </summary>
            <param name="data">Market data.</param>
            <returns>Count of saved data.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            To delete market data from storage.
            </summary>
            <param name="data">Market data to be deleted.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.Load(System.DateTime)">
            <summary>
            To load data.
            </summary>
            <param name="date">Date, for which data shall be loaded.</param>
            <returns>Data. If there is no data, the empty set will be returned.</returns>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataStorage`1.Serializer">
            <summary>
            The serializer.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.IMarketDataStorageDrive">
            <summary>
            The interface, describing the storage, associated with <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataStorageDrive.Drive">
            <summary>
            The storage (database, file etc.).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataStorageDrive.Dates">
            <summary>
            To get all the dates for which market data are recorded.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataStorageDrive.ClearDatesCache">
            <summary>
            To delete cache-files, containing information on available time ranges.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataStorageDrive.Delete(System.DateTime)">
            <summary>
            To remove market data on specified date from the storage.
            </summary>
            <param name="date">Date, for which all data shall be deleted.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataStorageDrive.SaveStream(System.DateTime,System.IO.Stream)">
            <summary>
            To save data in the format of StockSharp storage.
            </summary>
            <param name="date">The date, for which data shall be saved.</param>
            <param name="stream">Data in the format of StockSharp storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataStorageDrive.LoadStream(System.DateTime)">
            <summary>
            To load data in the format of StockSharp storage.
            </summary>
            <param name="date">Date, for which data shall be loaded.</param>
            <returns>Data in the format of StockSharp storage. If no data exists, <see cref="F:System.IO.Stream.Null"/> will be returned.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.IMarketDataDrive">
            <summary>
            The interface, describing the storage (database, file etc.).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataDrive.Path">
            <summary>
            Path to market data.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataDrive.GetNewsMessageStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.NewsMessage})">
            <summary>
            To get news storage.
            </summary>
            <param name="serializer">The serializer.</param>
            <returns>The news storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataDrive.GetSecurityDrive(StockSharp.BusinessEntities.Security)">
            <summary>
            To get the storage for the instrument.
            </summary>
            <param name="security">Security.</param>
            <returns>The storage for the instrument.</returns>
        </member>
        <member name="P:StockSharp.Algo.Storages.IMarketDataDrive.AvailableSecurities">
            <summary>
            Get all available instruments.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataDrive.GetAvailableDataTypes(StockSharp.Messages.SecurityId,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            Get all available data types.
            </summary>
            <param name="securityId">Instrument identifier.</param>
            <param name="format">Format type.</param>
            <returns>Data types.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IMarketDataDrive.GetStorageDrive(StockSharp.Messages.SecurityId,System.Type,System.Object,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the storage for <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage"/>.
            </summary>
            <param name="securityId">Security ID.</param>
            <param name="dataType">Market data type.</param>
            <param name="arg">The parameter associated with the <paramref name="dataType" /> type. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.</param>
            <param name="format">Format type.</param>
            <returns>Storage for <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage"/>.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.BaseMarketDataDrive">
            <summary>
            The base implementation <see cref="T:StockSharp.Algo.Storages.IMarketDataDrive"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Storages.BaseMarketDataDrive"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.BaseMarketDataDrive.Path">
            <summary>
            Path to market data.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.GetNewsMessageStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.NewsMessage})">
            <summary>
            To get news storage.
            </summary>
            <param name="serializer">The serializer.</param>
            <returns>The news storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.GetSecurityDrive(StockSharp.BusinessEntities.Security)">
            <summary>
            To get the storage for the instrument.
            </summary>
            <param name="security">Security.</param>
            <returns>The storage for the instrument.</returns>
        </member>
        <member name="P:StockSharp.Algo.Storages.BaseMarketDataDrive.AvailableSecurities">
            <summary>
            Get all available instruments.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.GetAvailableDataTypes(StockSharp.Messages.SecurityId,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            Get all available data types.
            </summary>
            <param name="securityId">Instrument identifier.</param>
            <param name="format">Format type.</param>
            <returns>Data types.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.GetStorageDrive(StockSharp.Messages.SecurityId,System.Type,System.Object,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            Create storage for <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage"/>.
            </summary>
            <param name="securityId">Security ID.</param>
            <param name="dataType">Market data type.</param>
            <param name="arg">The parameter associated with the <paramref name="dataType" /> type. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.</param>
            <param name="format">Format type.</param>
            <returns>Storage for <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.LocalMarketDataDrive">
            <summary>
            The file storage for market data.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.LocalMarketDataDrive"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.LocalMarketDataDrive"/>.
            </summary>
            <param name="path">The path to the directory with data.</param>
        </member>
        <member name="P:StockSharp.Algo.Storages.LocalMarketDataDrive.Path">
            <summary>
            The path to the directory with data.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.LocalMarketDataDrive.AvailableSecurities">
            <summary>
            Get all available instruments.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetAvailableSecurities(System.String)">
            <summary>
            Get all available instruments.
            </summary>
            <param name="path">The path to the directory with data.</param>
            <returns>All available instruments.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetAvailableDataTypes(StockSharp.Messages.SecurityId,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            Get all available data types.
            </summary>
            <param name="securityId">Instrument identifier.</param>
            <param name="format">Format type.</param>
            <returns>Data types.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetStorageDrive(StockSharp.Messages.SecurityId,System.Type,System.Object,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            Create storage for <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage"/>.
            </summary>
            <param name="securityId">Security ID.</param>
            <param name="dataType">Market data type.</param>
            <param name="arg">The parameter associated with the <paramref name="dataType" /> type. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.</param>
            <param name="format">Format type.</param>
            <returns>Storage for <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetExtension(StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the file extension for the format.
            </summary>
            <param name="format">Format.</param>
            <returns>The extension.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetDataType(System.String)">
            <summary>
            Get data type and parameter for the specified file name.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>Data type and parameter associated with the type. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetFileName(System.Type,System.Object,System.Nullable{StockSharp.Algo.Storages.StorageFormats})">
            <summary>
            To get the file name by the type of data.
            </summary>
            <param name="dataType">Data type.</param>
            <param name="arg">The parameter associated with the <paramref name="dataType" /> type. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.</param>
            <param name="format">Storage format. If set an extension will be added to the file name.</param>
            <returns>The file name.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetDate(System.String)">
            <summary>
            Convert directory name to the date.
            </summary>
            <param name="dirName">Directory name.</param>
            <returns>The date.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetDirName(System.DateTime)">
            <summary>
            Convert the date to directory name.
            </summary>
            <param name="date">The date.</param>
            <returns>Directory name.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetSecurityPath(StockSharp.Messages.SecurityId)">
            <summary>
            To get the path to the folder with market data for the instrument.
            </summary>
            <param name="securityId">Security ID.</param>
            <returns>The path to the folder with market data.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.StorageModes">
            <summary>
            Storage modes.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Storages.StorageModes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Storages.StorageModes.Incremental">
            <summary>
            Incremental.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Storages.StorageModes.Snapshot">
            <summary>
            Snapshot.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.StorageMessageAdapter">
            <summary>
            Storage based message adapter.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter,StockSharp.Algo.Storages.IEntityRegistry,StockSharp.Algo.Storages.IStorageRegistry,StockSharp.Algo.Storages.SnapshotRegistry,StockSharp.Algo.Candles.Compression.CandleBuilderProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.StorageMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">The adapter, to which messages will be directed.</param>
            <param name="entityRegistry">The storage of trade objects.</param>
            <param name="storageRegistry">The storage of market data.</param>
            <param name="snapshotRegistry">Snapshot storage registry.</param>
            <param name="candleBuilderProvider">Candle builders provider.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter,StockSharp.Algo.Storages.ISecurityStorage,StockSharp.Algo.Storages.IPositionStorage,StockSharp.Algo.Storages.IStorageRegistry,StockSharp.Algo.Storages.SnapshotRegistry,StockSharp.Algo.Candles.Compression.CandleBuilderProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.StorageMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">The adapter, to which messages will be directed.</param>
            <param name="securityStorage">Securities meta info storage.</param>
            <param name="positionStorage">Position storage.</param>
            <param name="storageRegistry">The storage of market data.</param>
            <param name="snapshotRegistry">Snapshot storage registry.</param>
            <param name="candleBuilderProvider">Candle builders provider.</param>
        </member>
        <member name="P:StockSharp.Algo.Storages.StorageMessageAdapter.Drive">
            <summary>
            The storage (database, file etc.).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.StorageMessageAdapter.Format">
            <summary>
            Format.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.StorageMessageAdapter.DaysLoad">
            <summary>
            Max days to load stored data.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.StorageMessageAdapter.SupportLookupMessages">
            <summary>
            Support lookup messages.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.StorageMessageAdapter.CacheBuildableCandles">
            <summary>
            Cache buildable from smaller time-frames candles.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.StorageMessageAdapter.OverrideSecurityData">
            <summary>
            Override previous security data by new values.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.StorageMessageAdapter.Mode">
            <summary>
            Storage mode. By default is <see cref="F:StockSharp.Algo.Storages.StorageModes.Incremental"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.StorageMessageAdapter.TimeFrames">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageMessageAdapter.GetTimeFrames(StockSharp.Messages.SecurityId)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageMessageAdapter.Load">
            <summary>
            Load save data from storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageMessageAdapter.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageMessageAdapter.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Storages.StorageMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.StorageFormats">
            <summary>
            Format types.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Storages.StorageFormats.Binary">
            <summary>
            The binary format StockSharp.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Storages.StorageFormats.Csv">
            <summary>
            The text format CSV.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.StorageHelper">
            <summary>
            Extension class for storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageHelper.GetCandleStorage``2(StockSharp.Algo.Storages.IStorageRegistry,StockSharp.BusinessEntities.Security,``1,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the storage of candles.
            </summary>
            <typeparam name="TCandle">The candle type.</typeparam>
            <typeparam name="TArg">The type of candle parameter.</typeparam>
            <param name="storageRegistry">The external storage.</param>
            <param name="security">Security.</param>
            <param name="arg">Candle arg.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The candles storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageHelper.GetCandleStorage(StockSharp.Algo.Storages.IStorageRegistry,StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the storage of candles.
            </summary>
            <param name="storageRegistry">The external storage.</param>
            <param name="series">Candles series.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The candles storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageHelper.Load``1(StockSharp.Algo.Storages.IMarketDataStorage{``0},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            To create an iterative loader of market data for the time range.
            </summary>
            <typeparam name="TData">Data type.</typeparam>
            <param name="storage">Market-data storage.</param>
            <param name="from">The start time for data loading. If the value is not specified, data will be loaded from the starting time <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetFromDate(StockSharp.Algo.Storages.IMarketDataStorage)"/>.</param>
            <param name="to">The end time for data loading. If the value is not specified, data will be loaded up to the <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetToDate(StockSharp.Algo.Storages.IMarketDataStorage)"/> date, inclusive.</param>
            <returns>The iterative loader of market data.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageHelper.Delete(StockSharp.Algo.Storages.IMarketDataStorage,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            To delete market data from the storage for the specified time period.
            </summary>
            <param name="storage">Market-data storage.</param>
            <param name="from">The start time for data deleting. If the value is not specified, the data will be deleted starting from the date <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetFromDate(StockSharp.Algo.Storages.IMarketDataStorage)"/>.</param>
            <param name="to">The end time, up to which the data shall be deleted. If the value is not specified, data will be deleted up to the end date <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetToDate(StockSharp.Algo.Storages.IMarketDataStorage)"/>, inclusive.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageHelper.GetFromDate(StockSharp.Algo.Storages.IMarketDataStorage)">
            <summary>
            To get the start date for market data, stored in the storage.
            </summary>
            <param name="storage">Market-data storage.</param>
            <returns>The start date. If the value is not initialized, the storage is empty.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageHelper.GetToDate(StockSharp.Algo.Storages.IMarketDataStorage)">
            <summary>
            To get the end date for market data, stored in the storage.
            </summary>
            <param name="storage">Market-data storage.</param>
            <returns>The end date. If the value is not initialized, the storage is empty.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageHelper.GetDates(StockSharp.Algo.Storages.IMarketDataStorage,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            To get all dates for stored market data for the specified range.
            </summary>
            <param name="storage">Market-data storage.</param>
            <param name="from">The range start time. If the value is not specified, data will be loaded from the start date <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetFromDate(StockSharp.Algo.Storages.IMarketDataStorage)"/>.</param>
            <param name="to">The range end time. If the value is not specified, data will be loaded up to the end date <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetToDate(StockSharp.Algo.Storages.IMarketDataStorage)"/>, inclusive.</param>
            <returns>All available data within the range.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageHelper.ToCandleArg(System.Type,System.String)">
            <summary>
            To convert string representation of the candle argument into typified.
            </summary>
            <param name="messageType">The type of candle message.</param>
            <param name="str">The string representation of the argument.</param>
            <returns>Argument.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageHelper.ReadBySecurityId(StockSharp.Algo.Storages.IStorageEntityList{StockSharp.BusinessEntities.Security},StockSharp.Messages.SecurityId)">
            <summary>
            Read instrument by identifier.
            </summary>
            <param name="securities">Instrument storage collection.</param>
            <param name="securityId">Identifier.</param>
            <returns>Instrument.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageHelper.SynchronizeSecurities(System.Collections.Generic.IEnumerable{StockSharp.Algo.Storages.IMarketDataDrive},StockSharp.Algo.Storages.ISecurityStorage,StockSharp.Algo.Storages.IExchangeInfoProvider,System.Action{StockSharp.BusinessEntities.Security},System.Action{System.Int32,System.Int32},System.Func{System.Boolean},StockSharp.Logging.ILogReceiver)">
            <summary>
            Synchronize securities with storage.
            </summary>
            <param name="drives">Storage drives.</param>
            <param name="securityStorage">Securities meta info storage.</param>
            <param name="exchangeInfoProvider">Exchanges and trading boards provider.</param>
            <param name="newSecurity">The handler through which a new instrument will be passed.</param>
            <param name="updateProgress">The handler through which a progress change will be passed.</param>
            <param name="logsReceiver">Logs receiver.</param>
            <param name="isCancelled">The handler which returns an attribute of search cancel.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageHelper.ClearDatesCache(System.Collections.Generic.IEnumerable{StockSharp.Algo.Storages.IMarketDataDrive},System.Action{System.Int32,System.Int32},System.Func{System.Boolean},StockSharp.Logging.ILogReceiver)">
            <summary>
            Clear dates cache for storages.
            </summary>
            <param name="drives">Storage drives.</param>
            <param name="updateProgress">The handler through which a progress change will be passed.</param>
            <param name="isCancelled">The handler which returns an attribute of search cancel.</param>
            <param name="logsReceiver">Logs receiver.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageHelper.DeleteById(StockSharp.Algo.Storages.ISecurityStorage,System.String)">
            <summary>
            Delete instrument by identifier.
            </summary>
            <param name="securityStorage">Securities meta info storage.</param>
            <param name="securityId">Identifier.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageHelper.GetCandleMessageBuildableStorage(StockSharp.Algo.Storages.IStorageRegistry,StockSharp.BusinessEntities.Security,System.TimeSpan,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the candles storage for the specified instrument. The storage will build candles from smaller time-frames if original time-frames is not exist.
            </summary>
            <param name="registry">Market-data storage.</param>
            <param name="security">Security.</param>
            <param name="timeFrame">Time-frame.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The candles storage.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.StorageRegistry">
            <summary>
            The storage of market data.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.StorageRegistry"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.DisposeManaged">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.StorageRegistry.DefaultDrive">
            <summary>
            The storage used by default.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.StorageRegistry.ExchangeInfoProvider">
            <summary>
            Exchanges and trading boards provider.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterTradeStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.Trade})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterMarketDepthStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.MarketDepth})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterOrderLogStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.OrderLogItem})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterCandleStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Algo.Candles.Candle})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterTradeStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.ExecutionMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterMarketDepthStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.QuoteChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterOrderLogStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.ExecutionMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterLevel1Storage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.Level1ChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterPositionStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.PositionChangeMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterCandleStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.CandleMessage})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetTradeStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetMarketDepthStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetOrderLogStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetCandleStorage(System.Type,StockSharp.BusinessEntities.Security,System.Object,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetTickMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetQuoteMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetOrderLogMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetTransactionStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetLevel1MessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetPositionMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetCandleMessageStorage(System.Type,StockSharp.BusinessEntities.Security,System.Object,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetExecutionMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Messages.ExecutionTypes,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetStorage(StockSharp.BusinessEntities.Security,System.Type,System.Object,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetNewsStorage(StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetNewsMessageStorage(StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetSecurityStorage(StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the instruments storage.
            </summary>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.StorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The instruments storage.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.TradeList">
            <summary>
            The class for representation of tick trades, stored in external storage, in the form of list.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.TradeList.#ctor(Ecng.Serialization.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.TradeList"/>.
            </summary>
            <param name="storage">The special interface for direct access to the storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.IStorageRegistry">
            <summary>
            The interface describing the storage of market data.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive">
            <summary>
            The storage used by default.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.IStorageRegistry.ExchangeInfoProvider">
            <summary>
            Exchanges and trading boards provider.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetNewsStorage(StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get news storage.
            </summary>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The news storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetNewsMessageStorage(StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get news storage.
            </summary>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The news storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetTradeStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the storage of tick trades for the specified instrument.
            </summary>
            <param name="security">Security.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The storage of tick trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetMarketDepthStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the storage of order books for the specified instrument.
            </summary>
            <param name="security">Security.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The order books storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetOrderLogStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the storage of orders log for the specified instrument.
            </summary>
            <param name="security">Security.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The storage of orders log.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetCandleStorage(System.Type,StockSharp.BusinessEntities.Security,System.Object,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the candles storage for the specified instrument.
            </summary>
            <param name="candleType">The candle type.</param>
            <param name="security">Security.</param>
            <param name="arg">Candle arg.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The candles storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetTickMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the storage of tick trades for the specified instrument.
            </summary>
            <param name="security">Security.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The storage of tick trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetQuoteMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the storage of order books for the specified instrument.
            </summary>
            <param name="security">Security.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The order books storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetOrderLogMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the storage of orders log for the specified instrument.
            </summary>
            <param name="security">Security.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The storage of orders log.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetLevel1MessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the storage of level1 data.
            </summary>
            <param name="security">Security.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The storage of level1 data.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetPositionMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the storage of position changes data.
            </summary>
            <param name="security">Security.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The storage of position changes data.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetCandleMessageStorage(System.Type,StockSharp.BusinessEntities.Security,System.Object,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the candles storage for the specified instrument.
            </summary>
            <param name="candleMessageType">The type of candle message.</param>
            <param name="security">Security.</param>
            <param name="arg">Candle arg.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The candles storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetExecutionMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Messages.ExecutionTypes,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the <see cref="T:StockSharp.Messages.ExecutionMessage"/> storage for the specified instrument.
            </summary>
            <param name="security">Security.</param>
            <param name="type">Data type, information about which is contained in the <see cref="T:StockSharp.Messages.ExecutionMessage"/>.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The <see cref="T:StockSharp.Messages.ExecutionMessage"/> storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetTransactionStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the transactions storage for the specified instrument.
            </summary>
            <param name="security">Security.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The transactions storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetStorage(StockSharp.BusinessEntities.Security,System.Type,System.Object,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the market-data storage.
            </summary>
            <param name="security">Security.</param>
            <param name="dataType">Market data type.</param>
            <param name="arg">The parameter associated with the <paramref name="dataType" /> type. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.</param>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>Market-data storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetSecurityStorage(StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
            <summary>
            To get the instruments storage.
            </summary>
            <param name="drive">The storage. If a value is <see langword="null" />, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> will be used.</param>
            <param name="format">The format type. By default <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is passed.</param>
            <returns>The instruments storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterTradeStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.Trade})">
            <summary>
            To register tick trades storage.
            </summary>
            <param name="storage">The storage of tick trades.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterMarketDepthStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.MarketDepth})">
            <summary>
            To register the order books storage.
            </summary>
            <param name="storage">The order books storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterOrderLogStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.OrderLogItem})">
            <summary>
            To register the order log storage.
            </summary>
            <param name="storage">The storage of orders log.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterCandleStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Algo.Candles.Candle})">
            <summary>
            To register the candles storage.
            </summary>
            <param name="storage">The candles storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterTradeStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.ExecutionMessage})">
            <summary>
            To register tick trades storage.
            </summary>
            <param name="storage">The storage of tick trades.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterMarketDepthStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.QuoteChangeMessage})">
            <summary>
            To register the order books storage.
            </summary>
            <param name="storage">The order books storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterOrderLogStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.ExecutionMessage})">
            <summary>
            To register the order log storage.
            </summary>
            <param name="storage">The storage of orders log.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterLevel1Storage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.Level1ChangeMessage})">
            <summary>
            To register the storage of level1 data.
            </summary>
            <param name="storage">The storage of level1 data.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterPositionStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.PositionChangeMessage})">
            <summary>
            To register the storage of position changes data.
            </summary>
            <param name="storage">The storage of position changes data.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterCandleStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.CandleMessage})">
            <summary>
            To register the candles storage.
            </summary>
            <param name="storage">The candles storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.IStorageEntityList`1">
            <summary>
            The interface for presentation in the form of list of trade objects, received from the external storage.
            </summary>
            <typeparam name="T">The type of the trading object (for example, <see cref="T:StockSharp.BusinessEntities.Security"/> or <see cref="T:StockSharp.BusinessEntities.MyTrade"/>).</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageEntityList`1.ReadById(System.Object)">
            <summary>
            To load the trading object by identifier.
            </summary>
            <param name="id">Identifier.</param>
            <returns>The trading object. If the object was not found by identifier, <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageEntityList`1.Save(`0)">
            <summary>
            To save the trading object.
            </summary>
            <param name="entity">The trading object.</param>
        </member>
        <member name="P:StockSharp.Algo.Storages.IStorageEntityList`1.DelayAction">
            <summary>
            The time delayed action.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IStorageEntityList`1.WaitFlush">
            <summary>
            Wait flush.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.BaseStorageEntityList`1">
            <summary>
            The base class for representation in the form of list of trade objects, stored in database.
            </summary>
            <typeparam name="T">The type of the trading object (for example, <see cref="T:StockSharp.BusinessEntities.Security"/> or <see cref="T:StockSharp.BusinessEntities.MyTrade"/>).</typeparam>
        </member>
        <member name="P:StockSharp.Algo.Storages.BaseStorageEntityList`1.SyncRoot">
            <summary>
            The object of synchronization.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.#ctor(Ecng.Serialization.IStorage)">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Storages.BaseStorageEntityList`1"/>.
            </summary>
            <param name="storage">The special interface for direct access to the storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.StockSharp#Algo#Storages#IStorageEntityList{T}#WaitFlush">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.Add(`0)">
            <summary>
            To add the trading object to the collection.
            </summary>
            <param name="entity">The trading object.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.Remove(`0)">
            <summary>
            To delete the trading object from the collection.
            </summary>
            <param name="entity">The trading object.</param>
            <returns><see langword="true" />, if the element was deleted. Otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.Save(`0)">
            <summary>
            To save the trading object.
            </summary>
            <param name="entity">The trading object.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.OnAdd(`0)">
            <summary>
            It is called when adding element to the storage.
            </summary>
            <param name="entity">The trading object.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.OnClear">
            <summary>
            It is called at deleting all elements in the storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.OnGetCount">
            <summary>
            It is called at getting number of elements in the storage.
            </summary>
            <returns>The number of elements in the storage.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.OnGetGroup(System.Int64,System.Int64,Ecng.Serialization.Field,System.ComponentModel.ListSortDirection)">
            <summary>
            It is called at selection elements from the storage.
            </summary>
            <param name="startIndex">First element index.</param>
            <param name="count">The number of elements.</param>
            <param name="orderBy">The sorting condition.</param>
            <param name="direction">The sorting direction.</param>
            <returns>The set of elements.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.OnRemove(`0)">
            <summary>
            It is called when deleting element from the storage.
            </summary>
            <param name="entity">Element.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.OnUpdate(`0)">
            <summary>
            It is called at renewal element in the storage.
            </summary>
            <param name="entity">Element.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            To add items.
            </summary>
            <param name="items">New items.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            To delete elements.
            </summary>
            <param name="items">Elements to be deleted.</param>
            <returns>Deleted elements.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            To delete elements.
            </summary>
            <param name="index">The index, starting with which the elements have to be deleted.</param>
            <param name="count">The number of elements to be deleted.</param>
            <returns>The number of deleted elements.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.OrderFailList">
            <summary>
            The class for representation in the form of list of orders with errors, stored in the external storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.OrderFailList.#ctor(Ecng.Serialization.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.OrderFailList"/>.
            </summary>
            <param name="storage">The special interface for direct access to the storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.IBasketMarketDataStorageEnumerable`1">
            <summary>
            The aggregator-storage enumerator.
            </summary>
            <typeparam name="TMessage">Message type.</typeparam>
        </member>
        <member name="P:StockSharp.Algo.Storages.IBasketMarketDataStorageEnumerable`1.DataTypes">
            <summary>
            Available message types.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Storages.IBasketMarketDataStorageInnerList">
            <summary>
            The interface, describing a list of embedded storages of market data.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.IBasketMarketDataStorageInnerList.Add(StockSharp.Algo.Storages.IMarketDataStorage,System.Int64)">
            <summary>
            Add inner storage with the specified request id.
            </summary>
            <param name="storage">Market-data storage.</param>
            <param name="transactionId">The subscription identifier.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.IBasketMarketDataStorageInnerList.Remove(System.Int64)">
            <summary>
            Remove inner storage.
            </summary>
            <param name="originalTransactionId">The subscription identifier.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.BasketMarketDataStorage`1">
            <summary>
            The aggregator-storage, allowing to load data simultaneously from several market data storages.
            </summary>
            <typeparam name="TMessage">Message type.</typeparam>
        </member>
        <member name="P:StockSharp.Algo.Storages.BasketMarketDataStorage`1.BasketMarketDataStorageEnumerator.Current">
            <summary>
            The current message.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.BasketMarketDataStorage`1.InnerStorages">
            <summary>
            Embedded storages of market data.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.BasketMarketDataStorage`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.BasketMarketDataStorage`1"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.BasketMarketDataStorage`1.DisposeManaged">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.BasketMarketDataStorage`1.DataType">
            <summary>
            The type of market-data, operated by given storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.BasketMarketDataStorage`1.Security">
            <summary>
            The instrument, operated by the external storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Storages.BasketMarketDataStorage`1.Arg">
            <summary>
            The additional argument, associated with data. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.BasketMarketDataStorage`1.Load(System.DateTime)">
            <summary>
            To load messages from embedded storages for specified date.
            </summary>
            <param name="date">Date.</param>
            <returns>The messages loader.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.BasketMarketDataStorage`1.OnLoad(System.DateTime)">
            <summary>
            To load messages from embedded storages for specified date.
            </summary>
            <param name="date">Date.</param>
            <returns>The messages.</returns>
        </member>
        <member name="T:StockSharp.Algo.Storages.MyTradeList">
            <summary>
            The class for representation in the form of list of own trades, stored in external storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.MyTradeList.#ctor(Ecng.Serialization.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.MyTradeList"/>.
            </summary>
            <param name="storage">The special interface for direct access to the storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.MyTradeList.GetOverridedAddSource(StockSharp.BusinessEntities.MyTrade)">
            <summary>
            To get data from essence for creation.
            </summary>
            <param name="entity">Entity.</param>
            <returns>Data for creation.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.MyTradeList.GetOverridedRemoveSource(StockSharp.BusinessEntities.MyTrade)">
            <summary>
            To get data from essence for deletion.
            </summary>
            <param name="entity">Entity.</param>
            <returns>Data for deletion.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.MyTradeList.ReadByOrderAndTrade(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
            <summary>
            To load own trade.
            </summary>
            <param name="order">Order.</param>
            <param name="trade">Tick trade.</param>
            <returns>Own trade.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.MyTradeList.Save(StockSharp.BusinessEntities.MyTrade)">
            <summary>
            To save the trading object.
            </summary>
            <param name="entity">The trading object.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.OrderList">
            <summary>
            The class for representation in the form of list of orders, stored in external storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.OrderList.#ctor(Ecng.Serialization.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.OrderList"/>.
            </summary>
            <param name="storage">The special interface for direct access to the storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.PortfolioList">
            <summary>
            The class for representation in the form of list of portfolios, stored in external storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.PortfolioList.#ctor(Ecng.Serialization.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.PortfolioList"/>.
            </summary>
            <param name="storage">The special interface for direct access to the storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Storages.PositionList">
            <summary>
            The class for representation in the form of list of positions, stored in external storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.PositionList.#ctor(Ecng.Serialization.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.PositionList"/>.
            </summary>
            <param name="storage">The special interface for direct access to the storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.PositionList.GetOverridedAddSource(StockSharp.BusinessEntities.Position)">
            <summary>
            To get data from essence for creation.
            </summary>
            <param name="entity">Entity.</param>
            <returns>Data for creation.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.PositionList.GetOverridedRemoveSource(StockSharp.BusinessEntities.Position)">
            <summary>
            To get data from essence for deletion.
            </summary>
            <param name="entity">Entity.</param>
            <returns>Data for deletion.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.PositionList.GetPosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.PositionList.Save(StockSharp.BusinessEntities.Position)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Storages.SecurityList">
            <summary>
            The class for representation in the form of list of instruments, stored in external storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityList.#ctor(StockSharp.Algo.Storages.IEntityRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Storages.SecurityList"/>.
            </summary>
            <param name="registry">The storage of trade objects.</param>
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityList.Lookup(StockSharp.BusinessEntities.Security)">
            <summary>
            Lookup securities by criteria <paramref name="criteria" />.
            </summary>
            <param name="criteria">The instrument whose fields will be used as a filter.</param>
            <returns>Found instruments.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityList.Save(StockSharp.BusinessEntities.Security,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityList.Save(StockSharp.BusinessEntities.Security)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityList.GetSecurityIds">
            <summary>
            To get identifiers of saved instruments.
            </summary>
            <returns>IDs securities.</returns>
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityList.OnAdd(StockSharp.BusinessEntities.Security)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityList.Delete(StockSharp.BusinessEntities.Security)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Storages.SecurityList.DeleteBy(StockSharp.BusinessEntities.Security)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.SecurityMappingMessageAdapter">
            <summary>
            Security identifier mappings message adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.SecurityMappingMessageAdapter.Storage">
            <summary>
            Security identifier mappings storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.SecurityMappingMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter,StockSharp.Algo.Storages.ISecurityMappingStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.SecurityMappingMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">The adapter, to which messages will be directed.</param>
            <param name="storage">Security identifier mappings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.SecurityMappingMessageAdapter.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.SecurityMappingMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.SecurityMappingMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.SecurityMappingMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.SecurityMappingMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.ExtendedInfoStorageMessageAdapter">
            <summary>
            The message adapter, that save <see cref="P:StockSharp.Messages.Message.ExtensionInfo"/> into <see cref="T:StockSharp.Algo.Storages.IExtendedInfoStorage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.ExtendedInfoStorageMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter,StockSharp.Algo.Storages.IExtendedInfoStorage,System.String,System.Tuple{System.String,System.Type}[])">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.MessageAdapterWrapper"/>.
            </summary>
            <param name="innerAdapter">Underlying adapter.</param>
            <param name="extendedInfoStorage">Extended info <see cref="P:StockSharp.Messages.Message.ExtensionInfo"/> storage.</param>
            <param name="storageName">Storage name.</param>
            <param name="fields">Extended fields (names and types).</param>
        </member>
        <member name="M:StockSharp.Algo.ExtendedInfoStorageMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.ExtendedInfoStorageMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.ExtendedInfoStorageMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Level1DepthBuilderAdapter">
            <summary>
            Level1 depth builder adapter.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Level1DepthBuilderAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Level1DepthBuilderAdapter"/>.
            </summary>
            <param name="innerAdapter">Inner message adapter.</param>
        </member>
        <member name="M:StockSharp.Algo.Level1DepthBuilderAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.Level1DepthBuilderAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Level1DepthBuilderAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.OfflineMessageAdapter">
            <summary>
            The messages adapter keeping message until connection will be done.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.OfflineMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.OfflineMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">Underlying adapter.</param>
        </member>
        <member name="P:StockSharp.Algo.OfflineMessageAdapter.MaxMessageCount">
            <summary>
            Max message queue count. The default value is 10000.
            </summary>
            <remarks>
            Value set to -1 corresponds to the size without limitations.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.OfflineMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.OfflineMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.OfflineMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.OfflineMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.PnL.PnLMessageAdapter">
            <summary>
            The message adapter, automatically calculating profit-loss.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PnL.PnLMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.PnL.PnLMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">The adapter, to which messages will be directed.</param>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLMessageAdapter.PnLManager">
            <summary>
            The profit-loss manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PnL.PnLMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.PnL.PnLMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.PnL.PnLMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.PnL.PnLMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="P:StockSharp.Algo.PnL.PortfolioPnLManager.PnL">
            <summary>
            Total profit-loss.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.PortfolioPnLManager.RealizedPnL">
            <summary>
            The relative value of profit-loss without open position accounting.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PnL.PortfolioPnLManager.Reset">
            <summary>
            To zero <see cref="P:StockSharp.Algo.PnL.PortfolioPnLManager.PnL"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PnL.PortfolioPnLManager.ProcessMyTrade(StockSharp.Messages.ExecutionMessage,StockSharp.Algo.PnL.PnLInfo@)">
            <summary>
            To calculate trade profitability. If the trade was already processed earlier, previous information returns.
            </summary>
            <param name="trade">Trade.</param>
            <param name="info">Information on new trade.</param>
            <returns><see langword="true" />, if new trade received, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.PnL.PortfolioPnLManager.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the message, containing market data.
            </summary>
            <param name="message">The message, containing market data.</param>
        </member>
        <member name="T:StockSharp.Algo.PnL.PnLInfo">
            <summary>
            Information on trade, its closed volume and its profitability.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PnL.PnLInfo.#ctor(StockSharp.Messages.ExecutionMessage,System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.PnL.PnLInfo"/>.
            </summary>
            <param name="trade">Own trade.</param>
            <param name="closedVolume">The volume of position, which was closed by own trade.</param>
            <param name="pnL">The profit, realized by this trade.</param>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLInfo.Trade">
            <summary>
            Own trade.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLInfo.ClosedVolume">
            <summary>
            The volume of position, which was closed by own trade.
            </summary>
            <remarks>
            For example, in strategy position was 2. The trade for -5 contracts. Closed position 2.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLInfo.PnL">
            <summary>
            The profit, realized by this trade.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.PnL.PnLQueue">
            <summary>
            The queue of profit calculation by messages stream.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PnL.PnLQueue.#ctor(StockSharp.Messages.SecurityId)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.PnL.PnLQueue"/>.
            </summary>
            <param name="securityId">Security ID.</param>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLQueue.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLQueue.PriceStep">
            <summary>
            Price step.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLQueue.StepPrice">
            <summary>
            Step price.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLQueue.Leverage">
            <summary>
            Leverage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLQueue.LotMultiplier">
            <summary>
            Lot multiplier.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLQueue.TradePrice">
            <summary>
            Last price of tick trade.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLQueue.BidPrice">
            <summary>
            Last price of bid.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLQueue.AskPrice">
            <summary>
            Last price of offer.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLQueue.UnrealizedPnL">
            <summary>
            Unrealized profit.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLQueue.RealizedPnL">
            <summary>
            Realized profit.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PnL.PnLQueue.Process(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To calculate trade profitability. If the trade was already processed earlier, previous information returns.
            </summary>
            <param name="trade">Trade.</param>
            <returns>Information on new trade.</returns>
        </member>
        <member name="M:StockSharp.Algo.PnL.PnLQueue.ProcessLevel1(StockSharp.Messages.Level1ChangeMessage)">
            <summary>
            To process the message, containing market data.
            </summary>
            <param name="levelMsg">The message, containing market data.</param>
        </member>
        <member name="M:StockSharp.Algo.PnL.PnLQueue.ProcessExecution(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To process the message, containing information on tick trade.
            </summary>
            <param name="execMsg">The message, containing information on tick trade.</param>
        </member>
        <member name="M:StockSharp.Algo.PnL.PnLQueue.ProcessQuotes(StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            To process the message, containing data on order book.
            </summary>
            <param name="quoteMsg">The message, containing data on order book.</param>
        </member>
        <member name="T:StockSharp.Algo.PnL.PnLManager">
            <summary>
            The profit-loss manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PnL.PnLManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.PnL.PnLManager"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLManager.PnL">
            <summary>
            Total profit-loss.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLManager.RealizedPnL">
            <summary>
            The relative value of profit-loss without open position accounting.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.PnLManager.UnrealizedPnL">
            <summary>
            The value of unrealized profit-loss.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PnL.PnLManager.Reset">
            <summary>
            To zero <see cref="P:StockSharp.Algo.PnL.PnLManager.PnL"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PnL.PnLManager.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the message, containing market data or trade. If the trade was already processed earlier, previous information returns.
            </summary>
            <param name="message">The message, containing market data or trade.</param>
            <returns>Information on new trade.</returns>
        </member>
        <member name="M:StockSharp.Algo.PnL.PnLManager.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.PnL.PnLManager.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.PnL.IPnLManager">
            <summary>
            The interface of the profit-loss calculation manager.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.IPnLManager.PnL">
            <summary>
            Total profit-loss.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.IPnLManager.RealizedPnL">
            <summary>
            The value of realized profit-loss.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.PnL.IPnLManager.UnrealizedPnL">
            <summary>
            The value of unrealized profit-loss.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PnL.IPnLManager.Reset">
            <summary>
            To zero <see cref="P:StockSharp.Algo.PnL.IPnLManager.PnL"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.PnL.IPnLManager.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the message, containing market data or trade. If the trade was already processed earlier, previous information returns.
            </summary>
            <param name="message">The message, containing market data or trade.</param>
            <returns>Information on new trade.</returns>
        </member>
        <member name="T:StockSharp.Algo.Positions.PositionMessageAdapter">
            <summary>
            The message adapter, automatically calculating position.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Positions.PositionMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Positions.PositionMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">The adapter, to which messages will be directed.</param>
        </member>
        <member name="P:StockSharp.Algo.Positions.PositionMessageAdapter.PositionManager">
            <summary>
            The position manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Positions.PositionMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.Positions.PositionMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.Positions.PositionMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Positions.PositionMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Positions.PositionManager">
            <summary>
            The position calculation manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Positions.PositionManager.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Positions.PositionManager"/>.
            </summary>
            <param name="byOrders">To calculate the position on realized volume for orders (<see langword="true" />) or by trades (<see langword="false" />).</param>
        </member>
        <member name="P:StockSharp.Algo.Positions.PositionManager.ByOrders">
            <summary>
            To calculate the position on realized volume for orders (<see langword="true" />) or by trades (<see langword="false" />).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Positions.PositionManager.SecurityId">
            <summary>
            The security for which <see cref="P:StockSharp.Algo.Positions.PositionManager.Position"/> will be calculated.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Positions.PositionManager.Position">
            <summary>
            The position aggregate value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Positions.PositionManager.Positions">
            <summary>
            Positions, grouped by instruments and portfolios.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Positions.PositionManager.NewPosition">
            <summary>
            The event of new position occurrence in <see cref="P:StockSharp.Algo.Positions.IPositionManager.Positions"/>.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Positions.PositionManager.PositionChanged">
            <summary>
            The event of position change in <see cref="P:StockSharp.Algo.Positions.IPositionManager.Positions"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Positions.PositionManager.Reset">
            <summary>
            To null position.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Positions.PositionManager.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To calculate position.
            </summary>
            <param name="message">Message.</param>
            <returns>The position by order or trade.</returns>
        </member>
        <member name="T:StockSharp.Algo.Positions.IPositionManager">
            <summary>
            The interface for the position calculation manager.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Positions.IPositionManager.Position">
            <summary>
            The position aggregate value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Positions.IPositionManager.SecurityId">
            <summary>
            The security for which <see cref="P:StockSharp.Algo.Positions.IPositionManager.Position"/> will be calculated.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Positions.IPositionManager.Positions">
            <summary>
            Positions, grouped by instruments and portfolios.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Positions.IPositionManager.NewPosition">
            <summary>
            The event of new position occurrence in <see cref="P:StockSharp.Algo.Positions.IPositionManager.Positions"/>.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Positions.IPositionManager.PositionChanged">
            <summary>
            The event of position change in <see cref="P:StockSharp.Algo.Positions.IPositionManager.Positions"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Positions.IPositionManager.Reset">
            <summary>
            To null position.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Positions.IPositionManager.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To calculate position.
            </summary>
            <param name="message">Message.</param>
            <returns>The position by order or trade.</returns>
        </member>
        <member name="T:StockSharp.Algo.Risk.RiskMessageAdapter">
            <summary>
            The message adapter, automatically controlling risk rules.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Risk.RiskMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">The adapter, to which messages will be directed.</param>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskMessageAdapter.RiskManager">
            <summary>
            Risk control manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Risk.RiskMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Risk.IRiskManager">
            <summary>
            The interface, describing risks control manager.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.IRiskManager.Rules">
            <summary>
            Rule list.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.IRiskManager.ProcessRules(StockSharp.Messages.Message)">
            <summary>
            To process the trade message.
            </summary>
            <param name="message">The trade message.</param>
            <returns>List of rules, activated by the message.</returns>
        </member>
        <member name="T:StockSharp.Algo.Risk.IRiskRule">
            <summary>
            The interface, describing risk-rule.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.IRiskRule.Title">
            <summary>
            Header.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.IRiskRule.Action">
            <summary>
            Action.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.IRiskRule.Reset">
            <summary>
            To reset the state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.IRiskRule.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the trade message.
            </summary>
            <param name="message">The trade message.</param>
            <returns><see langword="true" />, if the rule is activated, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:StockSharp.Algo.Risk.RiskActions">
            <summary>
            Types of actions.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Risk.RiskActions.ClosePositions">
            <summary>
            Close positions.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Risk.RiskActions.StopTrading">
            <summary>
            Stop trading.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Risk.RiskActions.CancelOrders">
            <summary>
            Cancel orders.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Risk.RiskManager">
            <summary>
            The risks control manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Risk.RiskManager"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskManager.Rules">
            <summary>
            Rule list.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskManager.Reset">
            <summary>
            To reset the state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskManager.ProcessRules(StockSharp.Messages.Message)">
            <summary>
            To process the trade message.
            </summary>
            <param name="message">The trade message.</param>
            <returns>List of rules, activated by the message.</returns>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskManager.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskManager.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Risk.RiskRule">
            <summary>
            Base risk-rule.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskRule.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Risk.RiskRule"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskRule.Title">
            <summary>
            Header.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskRule.Action">
            <summary>
            Action that needs to be taken in case of rule activation.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskRule.Reset">
            <summary>
            To reset the state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskRule.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the trade message.
            </summary>
            <param name="message">The trade message.</param>
            <returns><see langword="true" />, if the rule is activated, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Risk.RiskPnLRule">
            <summary>
            Risk-rule, tracking profit-loss.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskPnLRule.PnL">
            <summary>
            Profit-loss.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskPnLRule.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the trade message.
            </summary>
            <param name="message">The trade message.</param>
            <returns><see langword="true" />, if the rule is activated, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskPnLRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskPnLRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Risk.RiskPositionSizeRule">
            <summary>
            Risk-rule, tracking position size.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskPositionSizeRule.Position">
            <summary>
            Position size.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskPositionSizeRule.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the trade message.
            </summary>
            <param name="message">The trade message.</param>
            <returns><see langword="true" />, if the rule is activated, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskPositionSizeRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskPositionSizeRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Risk.RiskPositionTimeRule">
            <summary>
            Risk-rule, tracking position lifetime.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskPositionTimeRule.Time">
            <summary>
            Position lifetime.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskPositionTimeRule.Reset">
            <summary>
            To reset the state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskPositionTimeRule.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the trade message.
            </summary>
            <param name="message">The trade message.</param>
            <returns><see langword="true" />, if the rule is activated, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskPositionTimeRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskPositionTimeRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Risk.RiskCommissionRule">
            <summary>
            Risk-rule, tracking commission size.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskCommissionRule.Commission">
            <summary>
            Commission size.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskCommissionRule.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the trade message.
            </summary>
            <param name="message">The trade message.</param>
            <returns><see langword="true" />, if the rule is activated, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskCommissionRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskCommissionRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Risk.RiskSlippageRule">
            <summary>
            Risk-rule, tracking slippage size.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskSlippageRule.Slippage">
            <summary>
            Slippage size.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskSlippageRule.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the trade message.
            </summary>
            <param name="message">The trade message.</param>
            <returns><see langword="true" />, if the rule is activated, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskSlippageRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskSlippageRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Risk.RiskOrderPriceRule">
            <summary>
            Risk-rule, tracking order price.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskOrderPriceRule.Price">
            <summary>
            Order price.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskOrderPriceRule.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the trade message.
            </summary>
            <param name="message">The trade message.</param>
            <returns><see langword="true" />, if the rule is activated, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskOrderPriceRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskOrderPriceRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Risk.RiskOrderVolumeRule">
            <summary>
            Risk-rule, tracking order volume.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskOrderVolumeRule.Volume">
            <summary>
            Order volume.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskOrderVolumeRule.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the trade message.
            </summary>
            <param name="message">The trade message.</param>
            <returns><see langword="true" />, if the rule is activated, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskOrderVolumeRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskOrderVolumeRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Risk.RiskOrderFreqRule">
            <summary>
            Risk-rule, tracking orders placing frequency.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskOrderFreqRule.Count">
            <summary>
            Order count.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskOrderFreqRule.Interval">
            <summary>
            Interval, during which orders quantity will be monitored.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskOrderFreqRule.Reset">
            <summary>
            To reset the state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskOrderFreqRule.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the trade message.
            </summary>
            <param name="message">The trade message.</param>
            <returns><see langword="true" />, if the rule is activated, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskOrderFreqRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskOrderFreqRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Risk.RiskTradePriceRule">
            <summary>
            Risk-rule, tracking trade price.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskTradePriceRule.Price">
            <summary>
            Trade price.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskTradePriceRule.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the trade message.
            </summary>
            <param name="message">The trade message.</param>
            <returns><see langword="true" />, if the rule is activated, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskTradePriceRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskTradePriceRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Risk.RiskTradeVolumeRule">
            <summary>
            Risk-rule, tracking trade volume.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskTradeVolumeRule.Volume">
            <summary>
            Trade volume.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskTradeVolumeRule.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the trade message.
            </summary>
            <param name="message">The trade message.</param>
            <returns><see langword="true" />, if the rule is activated, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskTradeVolumeRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskTradeVolumeRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Risk.RiskTradeFreqRule">
            <summary>
            Risk-rule, tracking orders execution frequency.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskTradeFreqRule.Count">
            <summary>
            Number of trades.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Risk.RiskTradeFreqRule.Interval">
            <summary>
            Interval, during which trades quantity will be monitored.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskTradeFreqRule.Reset">
            <summary>
            To reset the state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskTradeFreqRule.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the trade message.
            </summary>
            <param name="message">The trade message.</param>
            <returns><see langword="true" />, if the rule is activated, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskTradeFreqRule.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Risk.RiskTradeFreqRule.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.SecurityNativeIdMessageAdapter">
            <summary>
            Security native id message adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.SecurityNativeIdMessageAdapter.Storage">
            <summary>
            Security native identifier storage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.SecurityNativeIdMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter,StockSharp.Algo.Storages.INativeIdStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.SecurityNativeIdMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">The adapter, to which messages will be directed.</param>
            <param name="storage">Security native identifier storage.</param>
        </member>
        <member name="M:StockSharp.Algo.SecurityNativeIdMessageAdapter.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.SecurityNativeIdMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.SecurityNativeIdMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.SecurityNativeIdMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.SecurityNativeIdMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.SecurityRemoveMessage">
            <summary>
            The message, containing security id to remove.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.SecurityRemoveMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.SecurityRemoveMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.SecurityRemoveMessage.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.SecurityRemoveMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.SecurityRemoveMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.SecurityTrie">
            <summary>
            Security trie collection.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.SecurityTrie.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.SecurityTrie"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.SecurityTrie.Count">
            <summary>
            Gets the number of instruments contained in the <see cref="T:StockSharp.Algo.SecurityTrie"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.SecurityTrie.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:StockSharp.Algo.SecurityTrie.Add(StockSharp.BusinessEntities.Security)">
            <summary>
            Add new instrument.
            </summary>
            <param name="security">New instrument.</param>
        </member>
        <member name="M:StockSharp.Algo.SecurityTrie.Retrieve(System.String)">
            <summary>
            Find all instrument by filter.
            </summary>
            <param name="filter">Filter</param>
            <returns>Found instruments.</returns>
        </member>
        <member name="M:StockSharp.Algo.SecurityTrie.CopyTo(StockSharp.BusinessEntities.Security[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">Destination array.</param>
            <param name="arrayIndex">Start index.</param>
        </member>
        <member name="M:StockSharp.Algo.SecurityTrie.Remove(StockSharp.BusinessEntities.Security)">
            <summary>
            Remove the instrument.
            </summary>
            <param name="security">The instrument.</param>
            <returns><see langword="true"/> if <paramref name="security"/> was successfully removed from the <see cref="T:StockSharp.Algo.SecurityTrie"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.SecurityTrie.RemoveRange(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
            <summary>
            Remove the instruments.
            </summary>
            <param name="securities">The instruments.</param>
        </member>
        <member name="M:StockSharp.Algo.SecurityTrie.Clear">
            <summary>
            Remove all instruments.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.SecurityTrie.Contains(StockSharp.BusinessEntities.Security)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:StockSharp.Algo.SecurityTrie.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:StockSharp.Algo.SecurityTrie.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:StockSharp.Algo.Slippage.SlippageMessageAdapter">
            <summary>
            The message adapter, automatically calculating slippage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Slippage.SlippageMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Slippage.SlippageMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">The adapter, to which messages will be directed.</param>
        </member>
        <member name="P:StockSharp.Algo.Slippage.SlippageMessageAdapter.SlippageManager">
            <summary>
            Slippage manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Slippage.SlippageMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.Slippage.SlippageMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.Slippage.SlippageMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Slippage.SlippageMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Slippage.ISlippageManager">
            <summary>
            The interface for the slippage calculation manager.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Slippage.ISlippageManager.Slippage">
            <summary>
            Total slippage.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Slippage.ISlippageManager.Reset">
            <summary>
            To reset the state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Slippage.ISlippageManager.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To calculate slippage.
            </summary>
            <param name="message">Message.</param>
            <returns>The slippage. If it is impossible to calculate slippage, <see langword="null" /> will be returned.</returns>
        </member>
        <member name="T:StockSharp.Algo.Slippage.SlippageManager">
            <summary>
            The slippage manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Slippage.SlippageManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Slippage.SlippageManager"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Slippage.SlippageManager.Slippage">
            <summary>
            Total slippage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Slippage.SlippageManager.CalculateNegative">
            <summary>
            To calculate negative slippage. By default, the calculation is enabled.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Slippage.SlippageManager.Reset">
            <summary>
            To zero <see cref="P:StockSharp.Algo.Slippage.ISlippageManager.Slippage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Slippage.SlippageManager.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To calculate slippage.
            </summary>
            <param name="message">Message.</param>
            <returns>The slippage. If it is impossible to calculate slippage, <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Slippage.SlippageManager.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Slippage.SlippageManager.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.IInnerAdapterList">
            <summary>
            The interface describing the list of adapters to trading systems with which the aggregator operates.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IInnerAdapterList.SortedAdapters">
            <summary>
            Internal adapters sorted by operation speed.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IInnerAdapterList.Item(StockSharp.Messages.IMessageAdapter)">
            <summary>
            The indexer through which speed priorities (the smaller the value, then adapter is faster) for internal adapters are set.
            </summary>
            <param name="adapter">The internal adapter.</param>
            <returns>The adapter priority. If the -1 value is set the adapter is considered to be off.</returns>
        </member>
        <member name="T:StockSharp.Algo.BasketMessageAdapter">
            <summary>
            Adapter-aggregator that allows simultaneously to operate multiple adapters connected to different trading systems.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.InnerAdapters">
            <summary>
            Adapters with which the aggregator operates.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.NativeIdStorage">
            <summary>
            Security native identifier storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.SecurityMappingStorage">
            <summary>
            Security identifier mappings storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.ExtendedInfoStorage">
            <summary>
            Extended info <see cref="P:StockSharp.Messages.Message.ExtensionInfo"/> storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.LatencyManager">
            <summary>
            Orders registration delay calculation manager.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.PnLManager">
            <summary>
            The profit-loss manager.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.CommissionManager">
            <summary>
            The commission calculating manager.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.SlippageManager">
            <summary>
            Slippage manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.BasketMessageAdapter.#ctor(Ecng.Common.IdGenerator,StockSharp.Messages.IPortfolioMessageAdapterProvider,StockSharp.Algo.Candles.Compression.CandleBuilderProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.BasketMessageAdapter"/>.
            </summary>
            <param name="transactionIdGenerator">Transaction id generator.</param>
            <param name="adapterProvider">The message adapter's provider.</param>
            <param name="candleBuilderProvider">Candle builders provider.</param>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.AdapterProvider">
            <summary>
            The message adapter's provider.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.CandleBuilderProvider">
            <summary>
            Candle builders provider.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.SupportedMessages">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.PortfolioLookupRequired">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.OrderStatusRequired">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.SecurityLookupRequired">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.IsSupportNativePortfolioLookup">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.IsSupportNativeSecurityLookup">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.IsSupportSecuritiesLookupAll">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.Categories">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.IsRestoreSubscriptionOnReconnect">
            <summary>
            Restore subscription on reconnect.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.SuppressReconnectingErrors">
            <summary>
            Suppress reconnecting errors.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.SupportCandlesCompression">
            <summary>
            Use <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilderMessageAdapter"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.SupportBuildingFromOrderLog">
            <summary>
            Use <see cref="T:StockSharp.Algo.OrderLogMessageAdapter"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.SupportOffline">
            <summary>
            Use <see cref="T:StockSharp.Algo.OfflineMessageAdapter"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketMessageAdapter.TimeFrames">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.BasketMessageAdapter.CreateOrderCondition">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.BasketMessageAdapter.IsConnectionAlive">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.BasketMessageAdapter.GetSortedAdapters">
            <summary>
            To get adapters <see cref="P:StockSharp.Algo.IInnerAdapterList.SortedAdapters"/> sorted by the specified priority. By default, there is no sorting.
            </summary>
            <returns>Sorted adapters.</returns>
        </member>
        <member name="M:StockSharp.Algo.BasketMessageAdapter.ApplyHeartbeat(StockSharp.Messages.IMessageAdapter,System.Boolean)">
            <summary>
            Apply on/off heartbeat mode for the specified adapter.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="on">Is active.</param>
        </member>
        <member name="M:StockSharp.Algo.BasketMessageAdapter.OnSendInMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.BasketMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.IMessageAdapter,StockSharp.Messages.Message)">
            <summary>
            The embedded adapter event <see cref="E:StockSharp.Messages.IMessageChannel.NewOutMessage"/> handler.
            </summary>
            <param name="innerAdapter">The embedded adapter.</param>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.BasketMessageAdapter.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.BasketMessageAdapter.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.BasketMessageAdapter.DisposeManaged">
            <summary>
            To release allocated resources.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.BasketMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.BasketMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.BasketPortfolio">
            <summary>
            Basket portfolio.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketPortfolio.InnerPortfolios">
            <summary>
            Portfolios from which this basket is created.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketPortfolio.InnerPositions">
            <summary>
            Positions from which this basket is created.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.WeightedPortfolio">
            <summary>
            Portfolios basket based on the weights <see cref="P:StockSharp.Algo.WeightedPortfolio.Weights"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.WeightedPortfolio.#ctor(StockSharp.BusinessEntities.IConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.WeightedPortfolio"/>.
            </summary>
            <param name="connector">The connection of interaction with trade systems.</param>
        </member>
        <member name="P:StockSharp.Algo.WeightedPortfolio.Weights">
            <summary>
            Instruments and their weighting coefficients in the basket.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.WeightedPortfolio.InnerPortfolios">
            <summary>
            Portfolios from which this basket is created.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.WeightedPortfolio.InnerPositions">
            <summary>
            Positions from which this basket is created.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.BasketPosition">
            <summary>
            The basket with positions which belong to <see cref="T:StockSharp.Algo.BasketPortfolio"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.BasketPosition.InnerPositions">
            <summary>
            Positions from which this basket is created.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Connector">
            <summary>
            The class to create connections to trading systems.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.RaiseConnectedOnFirstAdapter">
            <summary>
            To call the <see cref="E:StockSharp.Algo.Connector.Connected"/> event when the first adapter connects to <see cref="P:StockSharp.Algo.Connector.Adapter"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.InMessageChannel">
            <summary>
            Input message channel.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.OutMessageChannel">
            <summary>
            Outgoing message channel.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.InnerAdapter">
            <summary>
            Inner message adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.Adapter">
            <summary>
            Message adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.SupportBasketSecurities">
            <summary>
            Use <see cref="T:StockSharp.Algo.BasketSecurityMessageAdapter"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.SupportOffline">
            <summary>
            Use <see cref="T:StockSharp.Algo.OfflineMessageAdapter"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.SupportSubscriptionTracking">
            <summary>
            Use <see cref="T:StockSharp.Algo.SubscriptionMessageAdapter"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.SupportFilteredMarketDepth">
            <summary>
            Use <see cref="T:StockSharp.Algo.FilteredMarketDepthAdapter"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.SupportAssociatedSecurity">
            <summary>
            Use <see cref="T:StockSharp.Algo.AssociatedSecurityAdapter"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.SupportLevel1DepthBuilder">
            <summary>
            Use <see cref="T:StockSharp.Algo.Level1DepthBuilderAdapter"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.LookupMessagesOnConnect">
            <summary>
            Send lookup messages on connect. By default is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.AutoPortfoliosSubscribe">
            <summary>
            Send subscribe messages on connect. By default is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.TransactionAdapter">
            <summary>
            Transactional adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.MarketDataAdapter">
            <summary>
            Market-data adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.StorageAdapter">
            <summary>
            Storage adapter.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.SendOutMessage(StockSharp.Messages.Message)">
            <summary>
            Send outgoing message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.SendOutError(System.Exception)">
            <summary>
            Send error message.
            </summary>
            <param name="error">Error details.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.OnProcessMessage(StockSharp.Messages.Message)">
            <summary>
            Process message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.LookupSecurity(StockSharp.Messages.SecurityId)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.GetPortfolio(System.String)">
            <summary>
            To get the portfolio by the name.
            </summary>
            <remarks>
            If the portfolio is not registered, it is created via <see cref="M:StockSharp.Algo.IEntityFactory.CreatePortfolio(System.String)"/>.
            </remarks>
            <param name="name">Portfolio name.</param>
            <returns>Portfolio.</returns>
        </member>
        <member name="M:StockSharp.Algo.Connector.GetPortfolio(System.String,System.Func{StockSharp.BusinessEntities.Portfolio,System.Boolean},System.Boolean@)">
            <summary>
            To get the portfolio by the name.
            </summary>
            <remarks>
            If the portfolio is not registered, it is created via <see cref="M:StockSharp.Algo.IEntityFactory.CreatePortfolio(System.String)"/>.
            </remarks>
            <param name="name">Portfolio name.</param>
            <param name="changePortfolio">Portfolio handler.</param>
            <param name="isNew">Is newly created.</param>
            <returns>Portfolio.</returns>
        </member>
        <member name="E:StockSharp.Algo.Connector.NewMyTrade">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewMyTrades">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewTrade">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewTrades">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewOrder">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewOrders">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.OrderChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewStopOrders">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.OrdersChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.OrderRegisterFailed">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.OrderCancelFailed">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.StopOrdersChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.StopOrderRegisterFailed">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.StopOrderCancelFailed">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewStopOrder">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.StopOrderChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewSecurity">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.OrdersRegisterFailed">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.OrdersCancelFailed">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.MassOrderCanceled">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.MassOrderCancelFailed">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.OrderStatusFailed">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.StopOrdersRegisterFailed">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.StopOrdersCancelFailed">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewSecurities">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.SecurityChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.SecuritiesChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewPortfolio">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewPortfolios">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.PortfolioChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.PortfoliosChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewPosition">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewPositions">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.PositionChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.PositionsChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewMarketDepth">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.MarketDepthChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewMarketDepths">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.MarketDepthsChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewOrderLogItem">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewOrderLogItems">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.MarketTimeChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewNews">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewsChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.NewMessage">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.Connected">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.Disconnected">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.ConnectionError">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.ConnectedEx">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.DisconnectedEx">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.ConnectionErrorEx">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.Error">
            <summary>
            Data process error.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Connector.LookupSecuritiesResult">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.LookupPortfoliosResult">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.LookupBoardsResult">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.LookupSecuritiesResult2">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.LookupPortfoliosResult2">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.LookupBoardsResult2">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.MarketDataSubscriptionSucceeded">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.MarketDataSubscriptionFailed">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.MarketDataUnSubscriptionSucceeded">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.MarketDataUnSubscriptionFailed">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.MarketDataSubscriptionFinished">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.MarketDataUnexpectedCancelled">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.SessionStateChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.ValuesChanged">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Connector.Restored">
            <summary>
            Connection restored.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Connector.TimeOut">
            <summary>
            Connection timed-out.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Connector.CandleSeriesProcessing">
            <summary>
            A new value for processing occurrence event.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Connector.CandleSeriesStopped">
            <summary>
            The series processing end event.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseNewStopOrder(StockSharp.BusinessEntities.Order)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.NewStopOrders"/>.
            </summary>
            <param name="stopOrder">Stop order that should be passed to the event.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseStopOrderChanged(StockSharp.BusinessEntities.Order)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.StopOrdersChanged"/>.
            </summary>
            <param name="stopOrder">Stop orders that should be passed to the event.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseStopOrdersRegisterFailed(StockSharp.BusinessEntities.OrderFail)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.StopOrdersRegisterFailed"/>.
            </summary>
            <param name="fail">Error information that should be passed to the event.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseStopOrdersCancelFailed(StockSharp.BusinessEntities.OrderFail)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.StopOrdersCancelFailed"/>.
            </summary>
            <param name="fail">Error information that should be passed to the event.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseNewNews(StockSharp.BusinessEntities.News)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.NewNews"/>.
            </summary>
            <param name="news">News.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseNewsChanged(StockSharp.BusinessEntities.News)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.NewsChanged"/>.
            </summary>
            <param name="news">News.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseConnected">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.Connected"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseConnectedEx(StockSharp.Messages.IMessageAdapter)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.ConnectedEx"/>.
            </summary>
            <param name="adapter">Adapter, initiated event.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseDisconnected">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.Disconnected"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseDisconnectedEx(StockSharp.Messages.IMessageAdapter)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.DisconnectedEx"/>.
            </summary>
            <param name="adapter">Adapter, initiated event.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseConnectionError(System.Exception)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.ConnectionError"/>.
            </summary>
            <param name="exception">Error connection.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseConnectionErrorEx(StockSharp.Messages.IMessageAdapter,System.Exception)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.ConnectionErrorEx"/>.
            </summary>
            <param name="adapter">Adapter, initiated event.</param>
            <param name="exception">Error connection.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseError(System.Exception)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.Error"/>.
            </summary>
            <param name="exception">Data processing error.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseMarketTimeChanged(System.TimeSpan)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.MarketTimeChanged"/>.
            </summary>
            <param name="diff">The difference in the time since the last call of the event. The first time the event passes the <see cref="F:System.TimeSpan.Zero"/> value.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseLookupSecuritiesResult(StockSharp.Messages.SecurityLookupMessage,System.Exception,StockSharp.BusinessEntities.Security[],StockSharp.BusinessEntities.Security[])">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.LookupSecuritiesResult"/>.
            </summary>
            <param name="message">Message.</param>
            <param name="error">An error of lookup operation. The value will be <see langword="null"/> if operation complete successfully.</param>
            <param name="securities">Found instruments.</param>
            <param name="newSecurities">Newly created.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseLookupBoardsResult(StockSharp.Messages.BoardLookupMessage,System.Exception,StockSharp.BusinessEntities.ExchangeBoard[],StockSharp.BusinessEntities.ExchangeBoard[])">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.LookupBoardsResult"/>.
            </summary>
            <param name="message">Message.</param>
            <param name="error">An error of lookup operation. The value will be <see langword="null"/> if operation complete successfully.</param>
            <param name="boards">Found boards.</param>
            <param name="newBoards">Newly created.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseLookupPortfoliosResult(StockSharp.Messages.PortfolioLookupMessage,System.Exception,StockSharp.BusinessEntities.Portfolio[],StockSharp.BusinessEntities.Portfolio[])">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.LookupPortfoliosResult"/>.
            </summary>
            <param name="message">Message.</param>
            <param name="error">An error of lookup operation. The value will be <see langword="null"/> if operation complete successfully.</param>
            <param name="portfolios">Found portfolios.</param>
            <param name="newPortfolios">Newly created.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RaiseNewMessage(StockSharp.Messages.Message)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Connector.NewMessage"/>.
            </summary>
            <param name="message">A new message.</param>
        </member>
        <member name="P:StockSharp.Algo.Connector.RegisteredSecurities">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Connector.RegisteredMarketDepths">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Connector.RegisteredTrades">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Connector.RegisteredOrderLogs">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Connector.RegisteredPortfolios">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Connector.SubscribedCandleSeries">
            <summary>
            List of all candles series, subscribed via <see cref="M:StockSharp.Algo.Connector.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Collections.Generic.IDictionary{System.String,System.Object})"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.SubscribeMarketData(StockSharp.BusinessEntities.Security,StockSharp.Messages.MarketDataMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.UnSubscribeMarketData(StockSharp.BusinessEntities.Security,StockSharp.Messages.MarketDataMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.RegisterSecurity(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.UnRegisterSecurity(StockSharp.BusinessEntities.Security)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.RegisterMarketDepth(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.UnRegisterMarketDepth(StockSharp.BusinessEntities.Security)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.RegisterFilteredMarketDepth(StockSharp.BusinessEntities.Security)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.UnRegisterFilteredMarketDepth(StockSharp.BusinessEntities.Security)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.RegisterTrades(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.UnRegisterTrades(StockSharp.BusinessEntities.Security)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.OnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
            <summary>
            Subscribe on the portfolio changes.
            </summary>
            <param name="portfolio">Portfolio for subscription.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.UnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
            <summary>
            Unsubscribe from the portfolio changes.
            </summary>
            <param name="portfolio">Portfolio for unsubscription.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.OnUnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
            <summary>
            Unsubscribe from the portfolio changes.
            </summary>
            <param name="portfolio">Portfolio for unsubscription.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.RegisterOrderLog(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.UnRegisterOrderLog(StockSharp.BusinessEntities.Security)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.RegisterNews">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.OnRegisterNews">
            <summary>
            Subscribe on news.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.UnRegisterNews">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.SubscribeBoard(StockSharp.BusinessEntities.ExchangeBoard)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.UnSubscribeBoard(StockSharp.BusinessEntities.ExchangeBoard)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.RequestNewsStory(StockSharp.BusinessEntities.News)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.OnUnRegisterNews">
            <summary>
            Unsubscribe from news.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Subscribe to receive new candles.
            </summary>
            <param name="series">Candles series.</param>
            <param name="from">The initial date from which you need to get data.</param>
            <param name="to">The final date by which you need to get data.</param>
            <param name="count">Candles count.</param>
            <param name="transactionId">Transaction ID.</param>
            <param name="extensionInfo">Extended information.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.UnSubscribeCandles(StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To stop the candles receiving subscription, previously created by <see cref="M:StockSharp.Algo.Connector.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Collections.Generic.IDictionary{System.String,System.Object})"/>.
            </summary>
            <param name="series">Candles series.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Connector"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.#ctor(StockSharp.Algo.Storages.IEntityRegistry,StockSharp.Algo.Storages.IStorageRegistry,StockSharp.Algo.Storages.SnapshotRegistry,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Connector"/>.
            </summary>
            <param name="entityRegistry">The storage of trade objects.</param>
            <param name="storageRegistry">The storage of market data.</param>
            <param name="snapshotRegistry">Snapshot storage registry.</param>
            <param name="initManagers">Initialize managers.</param>
            <param name="supportOffline">Use <see cref="T:StockSharp.Algo.OfflineMessageAdapter"/>.</param>
            <param name="supportSubscriptionTracking">Use <see cref="T:StockSharp.Algo.SubscriptionMessageAdapter"/>.</param>
            <param name="isRestoreSubscriptionOnReconnect">Restore subscription on reconnect.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.#ctor(StockSharp.Algo.Storages.ISecurityStorage,StockSharp.Algo.Storages.IPositionStorage,StockSharp.Algo.Storages.IStorageRegistry,StockSharp.Algo.Storages.SnapshotRegistry,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Connector"/>.
            </summary>
            <param name="securityStorage">Securities meta info storage.</param>
            <param name="positionStorage">Position storage.</param>
            <param name="storageRegistry">The storage of market data.</param>
            <param name="snapshotRegistry">Snapshot storage registry.</param>
            <param name="initManagers">Initialize managers.</param>
            <param name="supportOffline">Use <see cref="T:StockSharp.Algo.OfflineMessageAdapter"/>.</param>
            <param name="supportSubscriptionTracking">Use <see cref="T:StockSharp.Algo.SubscriptionMessageAdapter"/>.</param>
            <param name="isRestoreSubscriptionOnReconnect">Restore subscription on reconnect.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Connector"/>.
            </summary>
            <param name="initAdapter">Initialize basket adapter.</param>
            <param name="initChannels">Initialize channels.</param>
            <param name="initManagers">Initialize managers.</param>
            <param name="supportOffline">Use <see cref="T:StockSharp.Algo.OfflineMessageAdapter"/>.</param>
            <param name="supportSubscriptionTracking">Use <see cref="T:StockSharp.Algo.SubscriptionMessageAdapter"/>.</param>
            <param name="isRestoreSubscriptionOnReconnect">Restore subscription on reconnect.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.InitializeStorage(StockSharp.Algo.Storages.IEntityRegistry,StockSharp.Algo.Storages.IStorageRegistry,StockSharp.Algo.Storages.SnapshotRegistry)">
            <summary>
            Initialize <see cref="P:StockSharp.Algo.Connector.StorageAdapter"/>.
            </summary>
            <param name="entityRegistry">The storage of trade objects.</param>
            <param name="storageRegistry">The storage of market data.</param>
            <param name="snapshotRegistry">Snapshot storage registry.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.InitializeStorage(StockSharp.Algo.Storages.ISecurityStorage,StockSharp.Algo.Storages.IPositionStorage,StockSharp.Algo.Storages.IStorageRegistry,StockSharp.Algo.Storages.SnapshotRegistry)">
            <summary>
            Initialize <see cref="P:StockSharp.Algo.Connector.StorageAdapter"/>.
            </summary>
            <param name="securityStorage">Securities meta info storage.</param>
            <param name="positionStorage">Position storage.</param>
            <param name="storageRegistry">The storage of market data.</param>
            <param name="snapshotRegistry">Snapshot storage registry.</param>
        </member>
        <member name="P:StockSharp.Algo.Connector.EntityRegistry">
            <summary>
            The storage of trade objects.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.SecurityStorage">
            <summary>
            Securities meta info storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.PositionStorage">
            <summary>
            Position storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.StorageRegistry">
            <summary>
            The storage of market data.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.SnapshotRegistry">
            <summary>
            Snapshot storage registry.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.BasketSecurityProcessorProvider">
            <summary>
            Basket security processors provider.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.ReConnectionSettings">
            <summary>
            Settings of the connection control <see cref="T:StockSharp.BusinessEntities.IConnector"/> to the trading system.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.EntityFactory">
            <summary>
            Entity factory (<see cref="T:StockSharp.BusinessEntities.Security"/>, <see cref="T:StockSharp.BusinessEntities.Order"/> etc.).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.TradesKeepCount">
            <summary>
            Number of tick trades for storage. The default is 100000. If the value is set to <see cref="F:System.Int32.MaxValue"/>, the trades will not be deleted. If the value is set to 0, then the trades will not be stored.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.OrdersKeepCount">
            <summary>
            The number of orders for storage. The default is 1000. If the value is set to <see cref="F:System.Int32.MaxValue"/>, then the orders will not be deleted. If the value is set to 0, then the orders will not be stored.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.TransactionIdGenerator">
            <summary>
            Transaction id generator.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.SecurityIdGenerator">
            <summary>
            The instrument identifiers generator <see cref="P:StockSharp.BusinessEntities.Security.Id"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.OverrideSecurityData">
            <summary>
            Override previous security data by new values.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.ExchangeBoards">
            <summary>
            List of all exchange boards, for which instruments are loaded <see cref="P:StockSharp.BusinessEntities.IConnector.Securities"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.Securities">
            <summary>
            List of all loaded instruments. It should be called after event <see cref="E:StockSharp.BusinessEntities.IConnector.NewSecurities"/> arisen. Otherwise the empty set will be returned.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.Lookup(StockSharp.BusinessEntities.Security)">
            <summary>
            Lookup securities by criteria <paramref name="criteria" />.
            </summary>
            <param name="criteria">The instrument whose fields will be used as a filter.</param>
            <returns>Found instruments.</returns>
        </member>
        <member name="P:StockSharp.Algo.Connector.CurrentTime">
            <summary>
            Current time, which will be passed to the <see cref="P:StockSharp.Logging.LogMessage.Time"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.GetSessionState(StockSharp.BusinessEntities.ExchangeBoard)">
            <summary>
            Get session state for required board.
            </summary>
            <param name="board">Electronic board.</param>
            <returns>Session state. If the information about session state does not exist, then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="P:StockSharp.Algo.Connector.Orders">
            <summary>
            Get all orders.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.StopOrders">
            <summary>
            Get all stop-orders.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.OrderRegisterFails">
            <summary>
            Get all registration errors.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.OrderCancelFails">
            <summary>
            Get all cancellation errors.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.Trades">
            <summary>
            Get all tick trades.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.MyTrades">
            <summary>
            Get all own trades.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.Portfolios">
            <summary>
            Get all portfolios.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.Positions">
            <summary>
            Get all positions.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.News">
            <summary>
            All news.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.RiskManager">
            <summary>
            Risk control manager.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.LatencyManager">
            <summary>
            Orders registration delay calculation manager.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.PnLManager">
            <summary>
            The profit-loss manager.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.CommissionManager">
            <summary>
            The commission calculating manager.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.SlippageManager">
            <summary>
            Slippage manager.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.ConnectionState">
            <summary>
            Connection state.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.CreateDepthFromOrdersLog">
            <summary>
            Use orders log to create market depths. Disabled by default.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.CreateTradesFromOrdersLog">
            <summary>
            Use orders log to create ticks. Disabled by default.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.UpdateSecurityLastQuotes">
            <summary>
            To update <see cref="P:StockSharp.BusinessEntities.Security.LastTrade"/>, <see cref="P:StockSharp.BusinessEntities.Security.BestBid"/>, <see cref="P:StockSharp.BusinessEntities.Security.BestAsk"/> at each update of order book and/or trades. By default is enabled.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.UpdateSecurityByLevel1">
            <summary>
            To update <see cref="T:StockSharp.BusinessEntities.Security"/> fields when the <see cref="T:StockSharp.Messages.Level1ChangeMessage"/> message appears. By default is enabled.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.UpdateSecurityByDefinition">
            <summary>
            To update <see cref="T:StockSharp.BusinessEntities.Security"/> fields when the <see cref="T:StockSharp.Messages.SecurityMessage"/> message appears. By default is enabled.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.CreateDepthFromLevel1">
            <summary>
            To update the order book for the instrument when the <see cref="T:StockSharp.Messages.Level1ChangeMessage"/> message appears. By default is enabled.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.CreateAssociatedSecurity">
            <summary>
            Create a combined security for securities from different boards.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.ErrorCount">
            <summary>
            The number of errors passed through the <see cref="E:StockSharp.Algo.Connector.Error"/> event.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.MarketTimeChangedInterval">
            <summary>
            The <see cref="T:StockSharp.Messages.TimeMessage"/> message generating Interval. The default is 10 milliseconds.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.TimeChange">
            <summary>
            Increment periodically <see cref="P:StockSharp.Algo.Connector.MarketTimeChangedInterval"/> value of <see cref="P:StockSharp.Algo.Connector.CurrentTime"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Connector.IsRestoreSubscriptionOnReconnect">
            <summary>
            Restore subscription on reconnect.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.Connect">
            <summary>
            Connect to trading system.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.OnConnect">
            <summary>
            Connect to trading system.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.Disconnect">
            <summary>
            Disconnect from trading system.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.OnDisconnect">
            <summary>
            Disconnect from trading system.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.LookupSecurities(StockSharp.BusinessEntities.Security,StockSharp.Messages.IMessageAdapter,StockSharp.Messages.MessageOfflineModes)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.LookupSecurities(StockSharp.Messages.SecurityLookupMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.LookupOrders(StockSharp.BusinessEntities.Order,StockSharp.Messages.IMessageAdapter)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.LookupOrders(StockSharp.Messages.OrderStatusMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.LookupPortfolios(StockSharp.BusinessEntities.Portfolio,StockSharp.Messages.IMessageAdapter,StockSharp.Messages.MessageOfflineModes)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.LookupPortfolios(StockSharp.Messages.PortfolioLookupMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.LookupBoards(StockSharp.BusinessEntities.ExchangeBoard,StockSharp.Messages.IMessageAdapter,StockSharp.Messages.MessageOfflineModes)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.LookupBoards(StockSharp.Messages.BoardLookupMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Connector.GetPosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security,System.String,System.String)">
            <summary>
            To get the position by portfolio and instrument.
            </summary>
            <param name="portfolio">The portfolio on which the position should be found.</param>
            <param name="security">The instrument on which the position should be found.</param>
            <param name="clientCode">The client code.</param>
            <param name="depoName">The depository name where the stock is located physically. By default, an empty string is passed, which means the total position by all depositories.</param>
            <returns>Position.</returns>
        </member>
        <member name="M:StockSharp.Algo.Connector.GetMarketDepth(StockSharp.BusinessEntities.Security)">
            <summary>
            To get the quotes order book.
            </summary>
            <param name="security">The instrument by which an order book should be got.</param>
            <returns>Order book.</returns>
        </member>
        <member name="M:StockSharp.Algo.Connector.GetFilteredMarketDepth(StockSharp.BusinessEntities.Security)">
            <summary>
            Get filtered order book.
            </summary>
            <param name="security">The instrument by which an order book should be got.</param>
            <returns>Filtered order book.</returns>
        </member>
        <member name="M:StockSharp.Algo.Connector.RegisterOrder(StockSharp.BusinessEntities.Order)">
            <summary>
            Register new order.
            </summary>
            <param name="order">Registration details.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.ReRegisterOrder(StockSharp.BusinessEntities.Order,System.Decimal,System.Decimal)">
            <summary>
            Reregister the order.
            </summary>
            <param name="oldOrder">Changing order.</param>
            <param name="price">Price of the new order.</param>
            <param name="volume">Volume of the new order.</param>
            <returns>New order.</returns>
            <remarks>
            If the volume is not set, only the price changes.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Connector.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
            <summary>
            Reregister the order.
            </summary>
            <param name="oldOrder">Cancelling order.</param>
            <param name="newOrder">New order to register.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.ReRegisterOrderPair(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
            <summary>
            Reregister of pair orders.
            </summary>
            <param name="oldOrder1">First order to cancel.</param>
            <param name="newOrder1">First new order to register.</param>
            <param name="oldOrder2">Second order to cancel.</param>
            <param name="newOrder2">Second new order to register.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.CancelOrder(StockSharp.BusinessEntities.Order)">
            <summary>
            Cancel the order.
            </summary>
            <param name="order">Order to cancel.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.InitNewOrder(StockSharp.BusinessEntities.Order)">
            <summary>
            Initialize registering order (transaction id etc.).
            </summary>
            <param name="order">New order.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.OnRegisterOrder(StockSharp.BusinessEntities.Order)">
            <summary>
            Register new order.
            </summary>
            <param name="order">Registration details.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.OnReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
            <summary>
            Reregister the order.
            </summary>
            <param name="oldOrder">Cancelling order.</param>
            <param name="newOrder">New order to register.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.OnReRegisterOrderPair(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
            <summary>
            Reregister of pair orders.
            </summary>
            <param name="oldOrder1">First order to cancel.</param>
            <param name="newOrder1">First new order to register.</param>
            <param name="oldOrder2">Second order to cancel.</param>
            <param name="newOrder2">Second new order to register.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.OnCancelOrder(StockSharp.BusinessEntities.Order,System.Int64)">
            <summary>
            Cancel the order.
            </summary>
            <param name="order">Order to cancel.</param>
            <param name="transactionId">Order cancellation transaction id.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.CancelOrders(System.Nullable{System.Boolean},StockSharp.BusinessEntities.Portfolio,System.Nullable{StockSharp.Messages.Sides},StockSharp.BusinessEntities.ExchangeBoard,StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.Messages.SecurityTypes},System.Nullable{System.Int64})">
            <summary>
            Cancel orders by filter.
            </summary>
            <param name="isStopOrder"><see langword="true" />, if cancel only a stop orders, <see langword="false" /> - if regular orders, <see langword="null" /> - both.</param>
            <param name="portfolio">Portfolio. If the value is equal to <see langword="null" />, then the portfolio does not match the orders cancel filter.</param>
            <param name="direction">Order side. If the value is <see langword="null" />, the direction does not use.</param>
            <param name="board">Trading board. If the value is equal to <see langword="null" />, then the board does not match the orders cancel filter.</param>
            <param name="security">Instrument. If the value is equal to <see langword="null" />, then the instrument does not match the orders cancel filter.</param>
            <param name="securityType">Security type. If the value is <see langword="null" />, the type does not use.</param>
            <param name="transactionId">Order cancellation transaction id.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.OnCancelOrders(System.Int64,System.Nullable{System.Boolean},StockSharp.BusinessEntities.Portfolio,System.Nullable{StockSharp.Messages.Sides},StockSharp.BusinessEntities.ExchangeBoard,StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.Messages.SecurityTypes})">
            <summary>
            Cancel orders by filter.
            </summary>
            <param name="transactionId">Order cancellation transaction id.</param>
            <param name="isStopOrder"><see langword="true" />, if cancel only a stop orders, <see langword="false" /> - if regular orders, <see langword="null" /> - both.</param>
            <param name="portfolio">Portfolio. If the value is equal to <see langword="null" />, then the portfolio does not match the orders cancel filter.</param>
            <param name="direction">Order side. If the value is <see langword="null" />, the direction does not use.</param>
            <param name="board">Trading board. If the value is equal to <see langword="null" />, then the board does not match the orders cancel filter.</param>
            <param name="security">Instrument. If the value is equal to <see langword="null" />, then the instrument does not match the orders cancel filter.</param>
            <param name="securityType">Security type. If the value is <see langword="null" />, the type does not use.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.ChangePassword(System.String)">
            <summary>
            Change password.
            </summary>
            <param name="newPassword">New password.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.GetSecurity(StockSharp.Messages.SecurityId)">
            <summary>
            Get security by code.
            </summary>
            <param name="securityId">Security ID.</param>
            <returns>Security.</returns>
        </member>
        <member name="M:StockSharp.Algo.Connector.GetSecurity(System.String,System.Func{StockSharp.BusinessEntities.Security,System.Boolean},System.Boolean@)">
            <summary>
            To get the instrument by the code. If the instrument is not found, then the <see cref="M:StockSharp.Algo.IEntityFactory.CreateSecurity(System.String)"/> is called to create an instrument.
            </summary>
            <param name="id">Security ID.</param>
            <param name="changeSecurity">The handler changing the instrument. It returns <see langword="true" /> if the instrument has been changed and the <see cref="E:StockSharp.BusinessEntities.IConnector.SecuritiesChanged"/> should be called.</param>
            <param name="isNew">Is newly created.</param>
            <returns>Security.</returns>
        </member>
        <member name="M:StockSharp.Algo.Connector.GetSecurityId(StockSharp.BusinessEntities.Security)">
            <summary>
            Get <see cref="T:StockSharp.Messages.SecurityId"/>.
            </summary>
            <param name="security">Security.</param>
            <returns>Security ID.</returns>
        </member>
        <member name="M:StockSharp.Algo.Connector.CreateSecurityId(System.String,System.String)">
            <summary>
            Generate <see cref="P:StockSharp.BusinessEntities.Security.Id"/> security.
            </summary>
            <param name="secCode">Security code.</param>
            <param name="secClass">Security class.</param>
            <returns><see cref="P:StockSharp.BusinessEntities.Security.Id"/> security.</returns>
        </member>
        <member name="M:StockSharp.Algo.Connector.GetSecurityValue(StockSharp.BusinessEntities.Security,StockSharp.Messages.Level1Fields)">
            <summary>
            To get the value of market data for the instrument.
            </summary>
            <param name="security">Security.</param>
            <param name="field">Market-data field.</param>
            <returns>The field value. If no data, the <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Connector.GetLevel1Fields(StockSharp.BusinessEntities.Security)">
            <summary>
            To get a set of available fields <see cref="T:StockSharp.Messages.Level1Fields"/>, for which there is a market data for the instrument.
            </summary>
            <param name="security">Security.</param>
            <returns>Possible fields.</returns>
        </member>
        <member name="M:StockSharp.Algo.Connector.ClearCache">
            <summary>
            Clear cache.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.DisposeManaged">
            <summary>
            To release allocated resources. In particular, to disconnect from the trading system via <see cref="M:StockSharp.Algo.Connector.Disconnect"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Connector.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Connector.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.HeartbeatMessageAdapter">
            <summary>
            The messages adapter controlling the connection.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.HeartbeatMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.HeartbeatMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">Underlying adapter.</param>
        </member>
        <member name="P:StockSharp.Algo.HeartbeatMessageAdapter.SuppressReconnectingErrors">
            <summary>
            Suppress reconnecting errors.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.HeartbeatMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.HeartbeatMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.HeartbeatMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.HeartbeatMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.ContinuousSecurity">
            <summary>
            Continuous security (generally, a futures contract), containing expirable securities.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.ExpirationContinuousSecurity">
            <summary>
            Rollover by expiration date continuous security.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.ExpirationContinuousSecurity.IExpirationJumpList">
            <summary>
            The interface describing the internal instruments collection <see cref="P:StockSharp.Algo.ExpirationContinuousSecurity.ExpirationJumps"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ExpirationContinuousSecurity.IExpirationJumpList.Item(System.DateTimeOffset)">
            <summary>
            To get the instrument for the specified expiration time.
            </summary>
            <param name="time">The expiration time.</param>
            <returns>Security.</returns>
        </member>
        <member name="P:StockSharp.Algo.ExpirationContinuousSecurity.IExpirationJumpList.FirstSecurity">
            <summary>
            To get the first instrument by expiration.
            </summary>
            <returns>The first instrument. If the <see cref="P:StockSharp.Algo.ExpirationContinuousSecurity.ExpirationJumps"/> is empty, the <see langword="null" /> will be returned.</returns>
        </member>
        <member name="P:StockSharp.Algo.ExpirationContinuousSecurity.IExpirationJumpList.LastSecurity">
            <summary>
            To get the last instrument by expiration.
            </summary>
            <returns>The last instrument. If the <see cref="P:StockSharp.Algo.ExpirationContinuousSecurity.ExpirationJumps"/> is empty, the <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.ExpirationContinuousSecurity.IExpirationJumpList.GetNextSecurity(StockSharp.Messages.SecurityId)">
            <summary>
            To get the next instrument.
            </summary>
            <param name="security">Security.</param>
            <returns>The next instrument. If the <paramref name="security" /> is the last instrument then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.ExpirationContinuousSecurity.IExpirationJumpList.GetPrevSecurity(StockSharp.Messages.SecurityId)">
            <summary>
            To get the previous instrument.
            </summary>
            <param name="security">Security.</param>
            <returns>The previous instrument. If the <paramref name="security" /> is the first instrument then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.ExpirationContinuousSecurity.IExpirationJumpList.GetActivityRange(StockSharp.Messages.SecurityId)">
            <summary>
            To get the range of operation of the internal instrument.
            </summary>
            <param name="security">The internal instrument.</param>
            <returns>The range of operation.</returns>
        </member>
        <member name="M:StockSharp.Algo.ExpirationContinuousSecurity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.ExpirationContinuousSecurity"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ExpirationContinuousSecurity.ExpirationJumps">
            <summary>
            Instruments and dates of transition at which the transition to the next instrument takes place.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.ExpirationContinuousSecurity.InnerSecurityIds">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.ExpirationContinuousSecurity.GetSecurity(System.DateTimeOffset)">
            <summary>
            To get the instrument that trades for the specified exchange time.
            </summary>
            <param name="marketTime">The exchange time.</param>
            <returns>The instrument. If there is no instrument for the specified time then the <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.ExpirationContinuousSecurity.ToSerializedString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.ExpirationContinuousSecurity.FromSerializedString(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.VolumeContinuousSecurity">
            <summary>
            Rollover by volume continuous security.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.VolumeContinuousSecurity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.VolumeContinuousSecurity"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.VolumeContinuousSecurity.InnerSecurities">
            <summary>
            Instruments rollover by volume.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.VolumeContinuousSecurity.IsOpenInterest">
            <summary>
            Use open interest for <see cref="P:StockSharp.Algo.VolumeContinuousSecurity.VolumeLevel"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.VolumeContinuousSecurity.VolumeLevel">
            <summary>
            Volume trigger causes switch to the next contract.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.VolumeContinuousSecurity.InnerSecurityIds">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.VolumeContinuousSecurity.ToSerializedString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.VolumeContinuousSecurity.FromSerializedString(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Derivatives.BasketBlackScholes">
            <summary>
            Portfolio model for calculating the values of Greeks by the Black-Scholes formula.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Derivatives.BasketBlackScholes.IInnerModelList">
            <summary>
            The interface describing the internal models collection <see cref="P:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModels"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.IInnerModelList.Item(StockSharp.BusinessEntities.Security)">
            <summary>
            To get the model for calculating Greeks values by the Black-Scholes formula for a particular option.
            </summary>
            <param name="option">Options contract.</param>
            <returns>The model. If the option is not registered, then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.#ctor(StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.BusinessEntities.IPositionProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Derivatives.BasketBlackScholes"/>.
            </summary>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="dataProvider">The market data provider.</param>
            <param name="positionProvider">The position provider.</param>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.BusinessEntities.IPositionProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Derivatives.BasketBlackScholes"/>.
            </summary>
            <param name="underlyingAsset">Underlying asset.</param>
            <param name="dataProvider">The market data provider.</param>
            <param name="positionProvider">The position provider.</param>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.PositionProvider">
            <summary>
            The position provider.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModels">
            <summary>
            Information about options.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.Option">
            <summary>
            Options contract.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.UnderlyingAsset">
            <summary>
            Underlying asset.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.RoundDecimals">
            <summary>
            The number of decimal places at calculated values. The default is -1, which means no values rounding.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Delta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option delta.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option delta. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Gamma(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option gamma.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option gamma. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Vega(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option vega.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option vega. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Theta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option theta.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option theta. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Rho(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option rho.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option rho. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Premium(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option premium.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option premium. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.ImpliedVolatility(System.DateTimeOffset,System.Decimal)">
            <summary>
            To calculate the implied volatility.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="premium">The option premium.</param>
            <returns>The implied volatility. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.ImpliedVolatility(System.DateTimeOffset)">
            <summary>
            To create the order book of volatility.
            </summary>
            <param name="currentTime">The current time.</param>
            <returns>The order book volatility.</returns>
        </member>
        <member name="T:StockSharp.Algo.Derivatives.BasketStrike">
            <summary>
            The virtual strike created from a combination of other strikes.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BasketStrike.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Derivatives.BasketStrike"/>.
            </summary>
            <param name="underlyingAsset">Underlying asset.</param>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="dataProvider">The market data provider.</param>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BasketStrike.SecurityProvider">
            <summary>
            The provider of information about instruments.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BasketStrike.DataProvider">
            <summary>
            The market data provider.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BasketStrike.UnderlyingAsset">
            <summary>
            Underlying asset.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BasketStrike.InnerSecurityIds">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BasketStrike.FilterStrikes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
            <summary>
            To get filtered strikes.
            </summary>
            <param name="allStrikes">All strikes.</param>
            <returns>Filtered strikes.</returns>
        </member>
        <member name="T:StockSharp.Algo.Derivatives.OffsetBasketStrike">
            <summary>
            The virtual strike including strikes of the specified shift boundary.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.OffsetBasketStrike.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider,Ecng.ComponentModel.Range{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Derivatives.OffsetBasketStrike"/>.
            </summary>
            <param name="underlyingSecurity">Underlying asset.</param>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="dataProvider">The market data provider.</param>
            <param name="strikeOffset">Boundaries of shift from the main strike (a negative value specifies the shift to options in the money, a positive value - out of the money).</param>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.OffsetBasketStrike.FilterStrikes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Derivatives.OffsetBasketStrike.ToSerializedString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Derivatives.OffsetBasketStrike.FromSerializedString(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Derivatives.VolatilityBasketStrike">
            <summary>
            The virtual strike including strikes of the specified volatility boundary.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.VolatilityBasketStrike.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider,Ecng.ComponentModel.Range{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Derivatives.VolatilityBasketStrike"/>.
            </summary>
            <param name="underlyingAsset">Underlying asset.</param>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="dataProvider">The market data provider.</param>
            <param name="volatilityRange">Volatility range.</param>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.VolatilityBasketStrike.FilterStrikes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Derivatives.VolatilityBasketStrike.ToSerializedString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Derivatives.VolatilityBasketStrike.FromSerializedString(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Derivatives.Black">
            <summary>
            The Greeks values calculating model by the Black formula.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Black.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Derivatives.Black"/>.
            </summary>
            <param name="option">Options contract.</param>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="dataProvider">The market data provider.</param>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Black.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Derivatives.Black"/>.
            </summary>
            <param name="option">Options contract.</param>
            <param name="underlyingAsset">Underlying asset.</param>
            <param name="dataProvider">The market data provider.</param>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.Black.Dividend">
            <summary>
            The dividend amount on shares.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Black.Premium(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option premium.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option premium. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Black.Delta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option delta.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option delta. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Black.Gamma(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option gamma.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option gamma. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Black.Vega(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option vega.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option vega. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Black.Theta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option theta.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option theta. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Black.Rho(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option rho.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option rho. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Black.D1(System.Decimal,System.Decimal,System.Double)">
            <summary>
            To calculate the d1 parameter of the option fulfilment probability estimating.
            </summary>
            <param name="deviation">Standard deviation.</param>
            <param name="assetPrice">Underlying asset price.</param>
            <param name="timeToExp">The option period before the expiration.</param>
            <returns>The d1 parameter.</returns>
        </member>
        <member name="T:StockSharp.Algo.Derivatives.BlackScholes">
            <summary>
            The model for calculating Greeks values by the Black-Scholes formula.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.#ctor(StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Derivatives.BlackScholes"/>.
            </summary>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="dataProvider">The market data provider.</param>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Derivatives.BlackScholes"/>.
            </summary>
            <param name="option">Options contract.</param>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="dataProvider">The market data provider.</param>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Derivatives.BlackScholes"/>.
            </summary>
            <param name="underlyingAsset">Underlying asset.</param>
            <param name="dataProvider">The market data provider.</param>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Derivatives.BlackScholes"/>.
            </summary>
            <param name="option">Options contract.</param>
            <param name="underlyingAsset">Underlying asset.</param>
            <param name="dataProvider">The market data provider.</param>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BlackScholes.SecurityProvider">
            <summary>
            The provider of information about instruments.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BlackScholes.DataProvider">
            <summary>
            The market data provider.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BlackScholes.Option">
            <summary>
            Options contract.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BlackScholes.RiskFree">
            <summary>
            The risk free interest rate.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BlackScholes.Dividend">
            <summary>
            The dividend amount on shares.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BlackScholes.RoundDecimals">
            <summary>
            The number of decimal places at calculated values. The default is -1, which means no values rounding.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset">
            <summary>
            Underlying asset.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation">
            <summary>
            The standard deviation by default.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.GetExpirationTimeLine(System.DateTimeOffset)">
            <summary>
            The time before expiration calculation.
            </summary>
            <param name="currentTime">The current time.</param>
            <returns>The time remaining until expiration. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.GetAssetPrice(System.Nullable{System.Decimal})">
            <summary>
            To get the price of the underlying asset.
            </summary>
            <param name="assetPrice">The price of the underlying asset if it is specified.</param>
            <returns>The price of the underlying asset. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.BlackScholes.OptionType">
            <summary>
            Option type.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.TryRound(System.Nullable{System.Decimal})">
            <summary>
            To round to <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.RoundDecimals"/>.
            </summary>
            <param name="value">The initial value.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Premium(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option premium.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option premium. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Delta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option delta.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option delta. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Gamma(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option gamma.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option gamma. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Vega(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option vega.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option vega. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Theta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option theta.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option theta. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Rho(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option rho.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">The standard deviation. If it is not specified, then <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation"/> is used.</param>
            <param name="assetPrice">The price of the underlying asset. If the price is not specified, then the last trade price getting from <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset"/>.</param>
            <returns>The option rho. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.ImpliedVolatility(System.DateTimeOffset,System.Decimal)">
            <summary>
            To calculate the implied volatility.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="premium">The option premium.</param>
            <returns>The implied volatility. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.D1(System.Decimal,System.Decimal,System.Double)">
            <summary>
            To calculate the d1 parameter of the option fulfilment probability estimating.
            </summary>
            <param name="deviation">Standard deviation.</param>
            <param name="assetPrice">Underlying asset price.</param>
            <param name="timeToExp">The option period before the expiration.</param>
            <returns>The d1 parameter.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.BlackScholes.ImpliedVolatility(System.DateTimeOffset)">
            <summary>
            To create the order book of volatility.
            </summary>
            <param name="currentTime">The current time.</param>
            <returns>The order book volatility.</returns>
        </member>
        <member name="T:StockSharp.Algo.Derivatives.DerivativesHelper">
            <summary>
            Extension class for derivatives.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetUnderlyingAsset(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider)">
            <summary>
            To get the underlying asset by the derivative.
            </summary>
            <param name="derivative">The derivative.</param>
            <param name="provider">The provider of information about instruments.</param>
            <returns>Underlying asset.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Decimal)">
            <summary>
            To filter options by the strike <see cref="P:StockSharp.BusinessEntities.Security.Strike"/>.
            </summary>
            <param name="options">Options to be filtered.</param>
            <param name="strike">The strike price.</param>
            <returns>Filtered options.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},StockSharp.Messages.OptionTypes)">
            <summary>
            To filter options by type <see cref="P:StockSharp.BusinessEntities.Security.OptionType"/>.
            </summary>
            <param name="options">Options to be filtered.</param>
            <param name="type">Option type.</param>
            <returns>Filtered options.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.FilterByUnderlying(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},StockSharp.BusinessEntities.Security)">
            <summary>
            To filter instruments by the underlying asset.
            </summary>
            <param name="securities">Instruments to be filtered.</param>
            <param name="asset">Underlying asset.</param>
            <returns>Instruments filtered.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Nullable{System.DateTimeOffset})">
            <summary>
            To filter instruments by the expiration date <see cref="P:StockSharp.BusinessEntities.Security.ExpiryDate"/>.
            </summary>
            <param name="securities">Instruments to be filtered.</param>
            <param name="expirationDate">The expiration date.</param>
            <returns>Instruments filtered.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetDerivatives(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,System.Nullable{System.DateTimeOffset})">
            <summary>
            To get derivatives by the underlying asset.
            </summary>
            <param name="asset">Underlying asset.</param>
            <param name="provider">The provider of information about instruments.</param>
            <param name="expirationDate">The expiration date.</param>
            <returns>The list of derivatives.</returns>
            <remarks>
            It returns an empty list if derivatives are not found.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetAsset(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider)">
            <summary>
            To get the underlying asset.
            </summary>
            <param name="derivative">The derivative.</param>
            <param name="provider">The provider of information about instruments.</param>
            <returns>Underlying asset.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Invert(StockSharp.Messages.OptionTypes)">
            <summary>
            To change the option type for opposite.
            </summary>
            <param name="type">The initial value.</param>
            <returns>The opposite value.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOppositeOption(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider)">
            <summary>
            To get opposite option (for Call to get Put, for Put to get Call).
            </summary>
            <param name="option">Options contract.</param>
            <param name="provider">The provider of information about instruments.</param>
            <returns>The opposite option.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetCall(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,System.Decimal,System.DateTimeOffset)">
            <summary>
            To get Call for the underlying futures.
            </summary>
            <param name="future">Underlying futures.</param>
            <param name="provider">The provider of information about instruments.</param>
            <param name="strike">Strike.</param>
            <param name="expirationDate">The date of the option expiration.</param>
            <returns>The Call option.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetPut(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,System.Decimal,System.DateTimeOffset)">
            <summary>
            To get Put for the underlying futures.
            </summary>
            <param name="future">Underlying futures.</param>
            <param name="provider">The provider of information about instruments.</param>
            <param name="strike">Strike.</param>
            <param name="expirationDate">The date of the option expiration.</param>
            <returns>The Put option.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOption(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,System.Decimal,System.DateTimeOffset,StockSharp.Messages.OptionTypes)">
            <summary>
            To get an option for the underlying futures.
            </summary>
            <param name="future">Underlying futures.</param>
            <param name="provider">The provider of information about instruments.</param>
            <param name="strike">Strike.</param>
            <param name="expirationDate">The options expiration date.</param>
            <param name="optionType">Option type.</param>
            <returns>Options contract.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetCentralStrike(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider,System.DateTimeOffset,StockSharp.Messages.OptionTypes)">
            <summary>
            To get the main strike.
            </summary>
            <param name="underlyingAsset">Underlying asset.</param>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="dataProvider">The market data provider.</param>
            <param name="expirationDate">The options expiration date.</param>
            <param name="optionType">Option type.</param>
            <returns>The main strike.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetCentralStrike(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
            <summary>
            To get the main strike.
            </summary>
            <param name="underlyingAsset">Underlying asset.</param>
            <param name="provider">The market data provider.</param>
            <param name="allStrikes">All strikes.</param>
            <returns>The main strike. If it is impossible to get the current market price of the asset then the <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetStrikeStep(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,System.Nullable{System.DateTimeOffset})">
            <summary>
            To get the strike step size.
            </summary>
            <param name="provider">The provider of information about instruments.</param>
            <param name="underlyingAsset">Underlying asset.</param>
            <param name="expirationDate">The options expiration date (to specify a particular series).</param>
            <returns>The strike step size.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOutOfTheMoney(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
            <summary>
            To get out of the money options (OTM).
            </summary>
            <param name="underlyingAsset">Underlying asset.</param>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="dataProvider">The market data provider.</param>
            <returns>Out of the money options.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOutOfTheMoney(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
            <summary>
            To get out of the money options (OTM).
            </summary>
            <param name="underlyingAsset">Underlying asset.</param>
            <param name="provider">The market data provider.</param>
            <param name="allStrikes">All strikes.</param>
            <returns>Out of the money options.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetInTheMoney(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
            <summary>
            To get in the money options (ITM).
            </summary>
            <param name="underlyingAsset">Underlying asset.</param>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="dataProvider">The market data provider.</param>
            <returns>In the money options.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetInTheMoney(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
            <summary>
            To get in the money options (ITM).
            </summary>
            <param name="underlyingAsset">Underlying asset.</param>
            <param name="provider">The market data provider.</param>
            <param name="allStrikes">All strikes.</param>
            <returns>In the money options.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetAtTheMoney(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
            <summary>
            To get at the money options (ATM).
            </summary>
            <param name="underlyingAsset">Underlying asset.</param>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="dataProvider">The market data provider.</param>
            <returns>At the money options.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetAtTheMoney(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
            <summary>
            To get at the money options (ATM).
            </summary>
            <param name="underlyingAsset">Underlying asset.</param>
            <param name="provider">The market data provider.</param>
            <param name="allStrikes">All strikes.</param>
            <returns>At the money options.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetIntrinsicValue(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
            <summary>
            To get the internal option value.
            </summary>
            <param name="option">Options contract.</param>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="dataProvider">The market data provider.</param>
            <returns>The internal value. If it is impossible to get the current market price of the asset then the <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetTimeValue(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
            <summary>
            To get the timed option value.
            </summary>
            <param name="option">Options contract.</param>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="dataProvider">The market data provider.</param>
            <returns>The timed value. If it is impossible to get the current market price of the asset then the <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.IsExpired(StockSharp.BusinessEntities.Security,System.DateTimeOffset)">
            <summary>
            To check whether the instrument has finished the action.
            </summary>
            <param name="security">Security.</param>
            <param name="currentTime">The current time.</param>
            <returns><see langword="true" /> if the instrument has finished its action.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOptionInfo(System.String,StockSharp.BusinessEntities.ExchangeBoard)">
            <summary>
            To get the information about the option from its name (underlying asset, strike, expiration date, etc.).
            </summary>
            <param name="optionName">The option name.</param>
            <param name="board">Board info.</param>
            <returns>Information about the option.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetFutureInfo(System.String,System.String,StockSharp.BusinessEntities.ExchangeBoard)">
            <summary>
            To get the information about the futures from its name (underlying asset, expiration date, etc.).
            </summary>
            <param name="futureName">The futures name.</param>
            <param name="optionCode">The option code.</param>
            <param name="board">Board info.</param>
            <returns>Information about futures.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.ImpliedVolatility(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider,System.DateTimeOffset,System.Decimal,System.Decimal)">
            <summary>
            To create the volatility order book from usual order book.
            </summary>
            <param name="depth">The order book quotes of which will be changed to volatility quotes.</param>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="dataProvider">The market data provider.</param>
            <param name="currentTime">The current time.</param>
            <param name="riskFree">The risk free interest rate.</param>
            <param name="dividend">The dividend amount on shares.</param>
            <returns>The order book volatility.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.ImpliedVolatility(StockSharp.BusinessEntities.MarketDepth,StockSharp.Algo.Derivatives.BlackScholes,System.DateTimeOffset)">
            <summary>
            To create the volatility order book from usual order book.
            </summary>
            <param name="depth">The order book quotes of which will be changed to volatility quotes.</param>
            <param name="model">The model for calculating Greeks values by the Black-Scholes formula.</param>
            <param name="currentTime">The current time.</param>
            <returns>The order book volatility.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetExpirationTimeLine(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            To get the option period before expiration.
            </summary>
            <param name="expirationTime">The option expiration time.</param>
            <param name="currentTime">The current time.</param>
            <returns>The option period before expiration. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetExpirationTimeLine(System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan)">
            <summary>
            To get the option period before expiration.
            </summary>
            <param name="expirationTime">The option expiration time.</param>
            <param name="currentTime">The current time.</param>
            <param name="timeLine">The length of the total period.</param>
            <returns>The option period before expiration. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.ExpRate(System.Decimal,System.Double)">
            <summary>
            To calculate the time exhibitor.
            </summary>
            <param name="riskFree">The risk free interest rate.</param>
            <param name="timeToExp">The option period before the expiration.</param>
            <returns>The time exhibitor.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.D1(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Double)">
            <summary>
            To calculate the d1 parameter of the option fulfilment probability estimating.
            </summary>
            <param name="assetPrice">Underlying asset price.</param>
            <param name="strike">The strike price.</param>
            <param name="riskFree">The risk free interest rate.</param>
            <param name="dividend">The dividend amount on shares.</param>
            <param name="deviation">Standard deviation.</param>
            <param name="timeToExp">The option period before the expiration.</param>
            <returns>The d1 parameter of the option fulfilment probability estimating.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.D2(System.Double,System.Decimal,System.Double)">
            <summary>
            To calculate the d2 parameter of the option fulfilment probability estimating.
            </summary>
            <param name="d1">The d1 parameter of the option fulfilment probability estimating.</param>
            <param name="deviation">Standard deviation.</param>
            <param name="timeToExp">The option period before the expiration.</param>
            <returns>The d2 parameter of the option fulfilment probability estimating.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Premium(StockSharp.Messages.OptionTypes,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Double,System.Double)">
            <summary>
            To calculate the option premium.
            </summary>
            <param name="optionType">Option type.</param>
            <param name="strike">The strike price.</param>
            <param name="assetPrice">Underlying asset price.</param>
            <param name="riskFree">The risk free interest rate.</param>
            <param name="dividend">The dividend amount on shares.</param>
            <param name="deviation">Standard deviation.</param>
            <param name="timeToExp">The option period before the expiration.</param>
            <param name="d1">The d1 parameter of the option fulfilment probability estimating.</param>
            <returns>The option premium.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Delta(StockSharp.Messages.OptionTypes,System.Decimal,System.Double)">
            <summary>
            To calculate the option delta.
            </summary>
            <param name="optionType">Option type.</param>
            <param name="assetPrice">Underlying asset price.</param>
            <param name="d1">The d1 parameter of the option fulfilment probability estimating.</param>
            <returns>Option delta.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Gamma(System.Decimal,System.Decimal,System.Double,System.Double)">
            <summary>
            To calculate the option gamma.
            </summary>
            <param name="assetPrice">Underlying asset price.</param>
            <param name="deviation">Standard deviation.</param>
            <param name="timeToExp">The option period before the expiration.</param>
            <param name="d1">The d1 parameter of the option fulfilment probability estimating.</param>
            <returns>Option gamma.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Vega(System.Decimal,System.Double,System.Double)">
            <summary>
            To calculate the option vega.
            </summary>
            <param name="assetPrice">Underlying asset price.</param>
            <param name="timeToExp">The option period before the expiration.</param>
            <param name="d1">The d1 parameter of the option fulfilment probability estimating.</param>
            <returns>Option vega.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Theta(StockSharp.Messages.OptionTypes,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Double,System.Double,System.Decimal)">
            <summary>
            To calculate the option theta.
            </summary>
            <param name="optionType">Option type.</param>
            <param name="strike">The strike price.</param>
            <param name="assetPrice">Underlying asset price.</param>
            <param name="riskFree">The risk free interest rate.</param>
            <param name="deviation">Standard deviation.</param>
            <param name="timeToExp">The option period before the expiration.</param>
            <param name="d1">The d1 parameter of the option fulfilment probability estimating.</param>
            <param name="daysInYear">Days per year.</param>
            <returns>Option theta.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Rho(StockSharp.Messages.OptionTypes,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Double,System.Double)">
            <summary>
            To calculate the option rho.
            </summary>
            <param name="optionType">Option type.</param>
            <param name="strike">The strike price.</param>
            <param name="assetPrice">Underlying asset price.</param>
            <param name="riskFree">The risk free interest rate.</param>
            <param name="deviation">Standard deviation.</param>
            <param name="timeToExp">The option period before the expiration.</param>
            <param name="d1">The d1 parameter of the option fulfilment probability estimating.</param>
            <returns>Option rho.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.ImpliedVolatility(System.Decimal,System.Func{System.Decimal,System.Nullable{System.Decimal}})">
            <summary>
            To calculate the implied volatility.
            </summary>
            <param name="premium">The option premium.</param>
            <param name="getPremium">To calculate the premium by volatility.</param>
            <returns>The implied volatility. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="T:StockSharp.Algo.Derivatives.IBlackScholes">
            <summary>
            The interface of the model for calculating Greeks values by the Black-Scholes formula.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.IBlackScholes.Option">
            <summary>
            Options contract.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.IBlackScholes.RiskFree">
            <summary>
            The risk free interest rate.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Derivatives.IBlackScholes.Dividend">
            <summary>
            The dividend amount on shares.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Premium(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option premium.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">Standard deviation.</param>
            <param name="assetPrice">Underlying asset price.</param>
            <returns>The option premium. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Delta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option delta.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">Standard deviation.</param>
            <param name="assetPrice">Underlying asset price.</param>
            <returns>The option delta. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Gamma(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option gamma.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">Standard deviation.</param>
            <param name="assetPrice">Underlying asset price.</param>
            <returns>The option gamma. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Vega(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option vega.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">Standard deviation.</param>
            <param name="assetPrice">Underlying asset price.</param>
            <returns>The option vega. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Theta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option theta.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">Standard deviation.</param>
            <param name="assetPrice">Underlying asset price.</param>
            <returns>The option theta. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Rho(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To calculate the option rho.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="deviation">Standard deviation.</param>
            <param name="assetPrice">Underlying asset price.</param>
            <returns>The option rho. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.ImpliedVolatility(System.DateTimeOffset,System.Decimal)">
            <summary>
            To calculate the implied volatility.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="premium">The option premium.</param>
            <returns>The implied volatility. If the value is equal to <see langword="null" />, then the value calculation currently is impossible.</returns>
        </member>
        <member name="T:StockSharp.Algo.Derivatives.Synthetic">
            <summary>
            The synthetic positions builder.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Synthetic.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Derivatives.Synthetic"/>.
            </summary>
            <param name="security">The instrument (the option or the underlying asset).</param>
            <param name="provider">The provider of information about instruments.</param>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Synthetic.Buy">
            <summary>
            To get the synthetic position to buy the option.
            </summary>
            <returns>The synthetic position.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Synthetic.Sell">
            <summary>
            To get the synthetic position to sale the option.
            </summary>
            <returns>The synthetic position.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Synthetic.Position(StockSharp.Messages.Sides)">
            <summary>
            To get the synthetic position for the option.
            </summary>
            <param name="side">The main position direction.</param>
            <returns>The synthetic position.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Synthetic.Buy(System.Decimal)">
            <summary>
            To get the option position for the underlying asset synthetic buy.
            </summary>
            <param name="strike">Strike.</param>
            <returns>The option position.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Synthetic.Buy(System.Decimal,System.DateTimeOffset)">
            <summary>
            To get the option position for the underlying asset synthetic buy.
            </summary>
            <param name="strike">Strike.</param>
            <param name="expiryDate">The date of the option expiration.</param>
            <returns>The option position.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Synthetic.Sell(System.Decimal)">
            <summary>
            To get the option position for synthetic sale of the base asset.
            </summary>
            <param name="strike">Strike.</param>
            <returns>The option position.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Synthetic.Sell(System.Decimal,System.DateTimeOffset)">
            <summary>
            To get the option position for synthetic sale of the base asset.
            </summary>
            <param name="strike">Strike.</param>
            <param name="expiryDate">The date of the option expiration.</param>
            <returns>The option position.</returns>
        </member>
        <member name="M:StockSharp.Algo.Derivatives.Synthetic.Position(System.Decimal,System.DateTimeOffset,StockSharp.Messages.Sides)">
            <summary>
            To get the option position for the synthetic base asset.
            </summary>
            <param name="strike">Strike.</param>
            <param name="expiryDate">The date of the option expiration.</param>
            <param name="side">The main position direction.</param>
            <returns>The option position.</returns>
        </member>
        <member name="T:StockSharp.Algo.Latency.LatencyMessageAdapter">
            <summary>
            The message adapter, automatically calculating network delays.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Latency.LatencyMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Latency.LatencyMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">The adapter, to which messages will be directed.</param>
        </member>
        <member name="P:StockSharp.Algo.Latency.LatencyMessageAdapter.LatencyManager">
            <summary>
            Orders registration delay calculation manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Latency.LatencyMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.Latency.LatencyMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Algo.Latency.LatencyMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Latency.LatencyMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Latency.ILatencyManager">
            <summary>
            The interface of the order registration delay calculation manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Latency.ILatencyManager.Reset">
            <summary>
            To zero calculations.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Latency.ILatencyManager.LatencyRegistration">
            <summary>
            The aggregate value of registration delay by all orders.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Latency.ILatencyManager.LatencyCancellation">
            <summary>
            The aggregate value of cancelling delay by all orders.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Latency.ILatencyManager.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the message for transaction delay calculation. Messages of <see cref="T:StockSharp.Messages.OrderRegisterMessage"/>, <see cref="T:StockSharp.Messages.OrderReplaceMessage"/>, <see cref="T:StockSharp.Messages.OrderCancelMessage"/> and <see cref="T:StockSharp.Messages.ExecutionMessage"/> types are accepted.
            </summary>
            <param name="message">Message.</param>
            <returns>The transaction delay. If it is impossible to calculate delay, <see langword="null" /> will be returned.</returns>
        </member>
        <member name="T:StockSharp.Algo.Latency.LatencyManager">
            <summary>
            Orders registration delay calculation manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Latency.LatencyManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Latency.LatencyManager"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Latency.LatencyManager.LatencyRegistration">
            <summary>
            The aggregate value of registration delay by all orders.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Latency.LatencyManager.LatencyCancellation">
            <summary>
            The aggregate value of cancelling delay by all orders.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Latency.LatencyManager.ProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the message for transaction delay calculation. Messages of types <see cref="T:StockSharp.Messages.OrderRegisterMessage"/>, <see cref="T:StockSharp.Messages.OrderReplaceMessage"/>, <see cref="T:StockSharp.Messages.OrderPairReplaceMessage"/>, <see cref="T:StockSharp.Messages.OrderCancelMessage"/> and <see cref="T:StockSharp.Messages.ExecutionMessage"/> are accepted.
            </summary>
            <param name="message">Message.</param>
            <returns>Transaction delay.</returns>
        </member>
        <member name="M:StockSharp.Algo.Latency.LatencyManager.Reset">
            <summary>
            To zero calculations.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Latency.LatencyManager.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Latency.LatencyManager.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.AuthorizationModes">
            <summary>
            Types of authorization.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.AuthorizationModes.Anonymous">
            <summary>
            Anonymous.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.AuthorizationModes.Windows">
            <summary>
            Windows authorization.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.AuthorizationModes.Custom">
            <summary>
            Custom.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.AuthorizationModes.Community">
            <summary>
            StockSharp.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.IMarketRuleContainer">
            <summary>
            The interface, describing the rules container.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IMarketRuleContainer.ProcessState">
            <summary>
            The operation state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.IMarketRuleContainer.ActivateRule(StockSharp.Algo.IMarketRule,System.Func{System.Boolean})">
            <summary>
            To activate the rule.
            </summary>
            <param name="rule">Rule.</param>
            <param name="process">The processor returning <see langword="true" /> if the rule has ended its operation, otherwise - <see langword="false" />.</param>
        </member>
        <member name="P:StockSharp.Algo.IMarketRuleContainer.IsRulesSuspended">
            <summary>
            Is rules execution suspended.
            </summary>
            <remarks>
            Rules suspension is performed through the method <see cref="M:StockSharp.Algo.IMarketRuleContainer.SuspendRules"/>.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.IMarketRuleContainer.SuspendRules">
            <summary>
            To suspend rules execution until next restoration through the method <see cref="M:StockSharp.Algo.IMarketRuleContainer.ResumeRules"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.IMarketRuleContainer.ResumeRules">
            <summary>
            To restore rules execution, suspended through the method <see cref="M:StockSharp.Algo.IMarketRuleContainer.SuspendRules"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IMarketRuleContainer.Rules">
            <summary>
            Registered rules.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.IMarketRuleList">
            <summary>
            The interface, describing the rules list.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IMarketRuleList.Tokens">
            <summary>
            To get all active tokens of rules.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.IMarketRuleList.GetRulesByToken(System.Object)">
            <summary>
            To get all rules, associated with tokens.
            </summary>
            <param name="token">Token rules.</param>
            <returns>All rules, associated with token.</returns>
        </member>
        <member name="M:StockSharp.Algo.IMarketRuleList.RemoveRulesByToken(System.Object,StockSharp.Algo.IMarketRule)">
            <summary>
            Delete all rules, for which <see cref="P:StockSharp.Algo.IMarketRule.Token"/> is equal to <paramref name="token" />.
            </summary>
            <param name="token">Token rules.</param>
            <param name="currentRule">The current rule that has initiated deletion. If it was passed, it will not be deleted.</param>
        </member>
        <member name="T:StockSharp.Algo.MarketRuleList">
            <summary>
            Rule list.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleList.#ctor(StockSharp.Algo.IMarketRuleContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.MarketRuleList"/>.
            </summary>
            <param name="container">The rules container.</param>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleList.OnAdded(StockSharp.Algo.IMarketRule)">
            <summary>
            Adding the element.
            </summary>
            <param name="item">Element.</param>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleList.OnRemoving(StockSharp.Algo.IMarketRule)">
            <summary>
            Deleting the element.
            </summary>
            <param name="item">Element.</param>
            <returns>The sign of possible action.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleList.OnRemoved(StockSharp.Algo.IMarketRule)">
            <summary>
            Deleting the element.
            </summary>
            <param name="item">Element.</param>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleList.OnClearing">
            <summary>
            Clearing elements.
            </summary>
            <returns>The sign of possible action.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleList.GetRulesByToken(System.Object)">
            <summary>
            To get all rules, associated with tokens.
            </summary>
            <param name="token">Token rules.</param>
            <returns>All rules, associated with token.</returns>
        </member>
        <member name="T:StockSharp.Algo.IndexSecurity">
            <summary>
            The index, built of instruments. For example, to specify spread at arbitrage or pair trading.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IndexSecurity.IgnoreErrors">
            <summary>
            Ignore calculation errors.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IndexSecurity.CalculateExtended">
            <summary>
            Calculate extended information.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IndexSecurity.FillGapsByZeros">
            <summary>
            Fill market-data gaps by zero values.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.IndexSecurity.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.IndexSecurity"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.WeightedIndexSecurity">
            <summary>
            The instruments basket, based on weigh-scales <see cref="P:StockSharp.Algo.WeightedIndexSecurity.Weights"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.WeightedIndexSecurity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.WeightedIndexSecurity"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.WeightedIndexSecurity.Weights">
            <summary>
            Instruments and their weighting coefficients in the basket.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.WeightedIndexSecurity.InnerSecurityIds">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.WeightedIndexSecurity.Clone">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.WeightedIndexSecurity.FromSerializedString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.WeightedIndexSecurity.ToSerializedString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.WeightedIndexSecurity.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.OrderLogCancelReasons">
            <summary>
            Reasons for orders cancelling in the orders log.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.OrderLogCancelReasons.ReRegistered">
            <summary>
            The order re-registration.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.OrderLogCancelReasons.Canceled">
            <summary>
            Cancel order.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.OrderLogCancelReasons.GroupCanceled">
            <summary>
            Group canceling of orders.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.OrderLogCancelReasons.CrossTrade">
            <summary>
            The sign of deletion of order residual due to cross-trade.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.OrderLogHelper">
            <summary>
            Building order book by the orders log.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.OrderLogHelper.IsRegistered(StockSharp.BusinessEntities.OrderLogItem)">
            <summary>
            To check, does the string contain the order registration.
            </summary>
            <param name="item">Order log item.</param>
            <returns><see langword="true" />, if the string contains the order registration, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.OrderLogHelper.IsCanceled(StockSharp.BusinessEntities.OrderLogItem)">
            <summary>
            To check, does the string contain the cancelled order.
            </summary>
            <param name="item">Order log item.</param>
            <returns><see langword="true" />, if the string contain the cancelled order, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.OrderLogHelper.IsMatched(StockSharp.BusinessEntities.OrderLogItem)">
            <summary>
            To check, does the string contain the order matching.
            </summary>
            <param name="item">Order log item.</param>
            <returns><see langword="true" />, if the string contains order matching, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.OrderLogHelper.GetOrderLogCancelReason(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To get the reason for cancelling order in orders log.
            </summary>
            <param name="item">Order log item.</param>
            <returns>The reason for order cancelling in order log.</returns>
        </member>
        <member name="M:StockSharp.Algo.OrderLogHelper.GetCancelReason(StockSharp.BusinessEntities.OrderLogItem)">
            <summary>
            To get the reason for cancelling order in orders log.
            </summary>
            <param name="item">Order log item.</param>
            <returns>The reason for order cancelling in order log.</returns>
        </member>
        <member name="M:StockSharp.Algo.OrderLogHelper.ToMarketDepths(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderLogItem},StockSharp.Messages.IOrderLogMarketDepthBuilder,System.TimeSpan,System.Int32)">
            <summary>
            Build market depths from order log.
            </summary>
            <param name="items">Orders log lines.</param>
            <param name="builder">Order log to market depth builder.</param>
            <param name="interval">The interval of the order book generation. The default is <see cref="F:System.TimeSpan.Zero"/>, which means order books generation at each new string of orders log.</param>
            <param name="maxDepth">The maximal depth of order book. The default is <see cref="F:System.Int32.MaxValue"/>, which means endless depth.</param>
            <returns>Market depths.</returns>
        </member>
        <member name="M:StockSharp.Algo.OrderLogHelper.ToMarketDepths(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage},StockSharp.Messages.IOrderLogMarketDepthBuilder,System.TimeSpan,System.Int32)">
            <summary>
            Build market depths from order log.
            </summary>
            <param name="items">Orders log lines.</param>
            <param name="builder">Order log to market depth builder.</param>
            <param name="interval">The interval of the order book generation. The default is <see cref="F:System.TimeSpan.Zero"/>, which means order books generation at each new string of orders log.</param>
            <param name="maxDepth">The maximal depth of order book. The default is <see cref="F:System.Int32.MaxValue"/>, which means endless depth.</param>
            <returns>Market depths.</returns>
        </member>
        <member name="M:StockSharp.Algo.OrderLogHelper.ToTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderLogItem})">
            <summary>
            To build tick trades from the orders log.
            </summary>
            <param name="items">Orders log lines.</param>
            <returns>Tick trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.OrderLogHelper.ToTick(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To tick trade from the order log.
            </summary>
            <param name="item">Order log item.</param>
            <returns>Tick trade.</returns>
        </member>
        <member name="M:StockSharp.Algo.OrderLogHelper.ToTicks(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
            <summary>
            To build tick trades from the orders log.
            </summary>
            <param name="items">Orders log lines.</param>
            <returns>Tick trades.</returns>
        </member>
        <member name="T:StockSharp.Algo.MarketTimer">
            <summary>
            The timer, based on trading system time.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.MarketTimer.#ctor(StockSharp.BusinessEntities.IConnector,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.MarketTimer"/>.
            </summary>
            <param name="connector">The connection to trading system, from which event <see cref="E:StockSharp.BusinessEntities.IConnector.MarketTimeChanged"/> will be used.</param>
            <param name="activated">The timer processor.</param>
        </member>
        <member name="M:StockSharp.Algo.MarketTimer.Interval(System.TimeSpan)">
            <summary>
            To set the interval.
            </summary>
            <param name="interval">The timer interval. If <see cref="F:System.TimeSpan.Zero"/> value is set, timer stops to be periodical.</param>
            <returns>The timer.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketTimer.Start">
            <summary>
            To start the timer.
            </summary>
            <returns>The timer.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketTimer.Stop">
            <summary>
            To stop the timer.
            </summary>
            <returns>The timer.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketTimer.DisposeManaged">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Statistics.IOrderStatisticParameter">
            <summary>
            The interface, describing statistic parameter, calculated based on orders.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.IOrderStatisticParameter.New(StockSharp.BusinessEntities.Order)">
            <summary>
            To add to the parameter an information on new order.
            </summary>
            <param name="order">New order.</param>
        </member>
        <member name="M:StockSharp.Algo.Statistics.IOrderStatisticParameter.Changed(StockSharp.BusinessEntities.Order)">
            <summary>
            To add to the parameter an information on changed order.
            </summary>
            <param name="order">The changed order.</param>
        </member>
        <member name="M:StockSharp.Algo.Statistics.IOrderStatisticParameter.RegisterFailed(StockSharp.BusinessEntities.OrderFail)">
            <summary>
            To add to the parameter an information on error of order registration.
            </summary>
            <param name="fail">Error registering order.</param>
        </member>
        <member name="M:StockSharp.Algo.Statistics.IOrderStatisticParameter.CancelFailed(StockSharp.BusinessEntities.OrderFail)">
            <summary>
            To add to the parameter an information on error of order cancelling.
            </summary>
            <param name="fail">Error cancelling order.</param>
        </member>
        <member name="T:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1">
            <summary>
            The base statistic parameter, calculated based on orders.
            </summary>
            <typeparam name="TValue">The type of the parameter value.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1.New(StockSharp.BusinessEntities.Order)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1.Changed(StockSharp.BusinessEntities.Order)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1.RegisterFailed(StockSharp.BusinessEntities.OrderFail)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1.CancelFailed(StockSharp.BusinessEntities.OrderFail)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.MaxLatencyRegistrationParameter">
            <summary>
            The maximal value of the order registration delay.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.MaxLatencyRegistrationParameter.New(StockSharp.BusinessEntities.Order)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.MaxLatencyCancellationParameter">
            <summary>
            The maximal value of the order cancelling delay.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.MaxLatencyCancellationParameter.Changed(StockSharp.BusinessEntities.Order)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.MinLatencyRegistrationParameter">
            <summary>
            The minimal value of order registration delay.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.MinLatencyRegistrationParameter.Reset">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.MinLatencyRegistrationParameter.New(StockSharp.BusinessEntities.Order)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.MinLatencyRegistrationParameter.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.MinLatencyRegistrationParameter.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.MinLatencyCancellationParameter">
            <summary>
            The minimal value of order cancelling delay.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.MinLatencyCancellationParameter.Reset">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.MinLatencyCancellationParameter.Changed(StockSharp.BusinessEntities.Order)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.MinLatencyCancellationParameter.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.MinLatencyCancellationParameter.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.OrderCountParameter">
            <summary>
            Total number of orders.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.OrderCountParameter.New(StockSharp.BusinessEntities.Order)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.IPnLStatisticParameter">
            <summary>
            The interface, describing statistic parameter, calculated based on the profit-loss value (maximal contraction, Sharp coefficient etc.).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.IPnLStatisticParameter.Add(System.DateTimeOffset,System.Decimal)">
            <summary>
            To add new data to the parameter.
            </summary>
            <param name="marketTime">The exchange time.</param>
            <param name="pnl">The profit-loss value.</param>
        </member>
        <member name="T:StockSharp.Algo.Statistics.MaxProfitParameter">
            <summary>
            The maximal profit value for the entire period.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.MaxProfitParameter.Add(System.DateTimeOffset,System.Decimal)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.MaxDrawdownParameter">
            <summary>
            Maximum absolute drawdown during the whole period.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.MaxDrawdownParameter.Reset">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.MaxDrawdownParameter.Add(System.DateTimeOffset,System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.MaxDrawdownParameter.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.MaxDrawdownParameter.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.MaxRelativeDrawdownParameter">
            <summary>
            Maximum relative equity drawdown during the whole period.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.MaxRelativeDrawdownParameter.Reset">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.MaxRelativeDrawdownParameter.Add(System.DateTimeOffset,System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.MaxRelativeDrawdownParameter.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.MaxRelativeDrawdownParameter.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.ReturnParameter">
            <summary>
            Relative income for the whole time period.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.ReturnParameter.Reset">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.ReturnParameter.Add(System.DateTimeOffset,System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.ReturnParameter.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.ReturnParameter.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.RecoveryFactorParameter">
            <summary>
            Recovery factor (net profit / maximum drawdown).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.RecoveryFactorParameter.Reset">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.RecoveryFactorParameter.Add(System.DateTimeOffset,System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.RecoveryFactorParameter.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.RecoveryFactorParameter.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.NetProfitParameter">
            <summary>
            Net profit for whole time period.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.NetProfitParameter.Reset">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.NetProfitParameter.Add(System.DateTimeOffset,System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.NetProfitParameter.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.NetProfitParameter.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.IPositionStatisticParameter">
            <summary>
            The interface, describing statistic parameter, calculated based on position.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.IPositionStatisticParameter.Add(System.DateTimeOffset,System.Decimal)">
            <summary>
            To add the new position value to the parameter.
            </summary>
            <param name="marketTime">The exchange time.</param>
            <param name="position">The new position value.</param>
        </member>
        <member name="T:StockSharp.Algo.Statistics.MaxLongPositionParameter">
            <summary>
            Maximum long position size.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.MaxLongPositionParameter.Add(System.DateTimeOffset,System.Decimal)">
            <summary>
            To add the new position value to the parameter.
            </summary>
            <param name="marketTime">The exchange time.</param>
            <param name="position">The new position value.</param>
        </member>
        <member name="T:StockSharp.Algo.Statistics.MaxShortPositionParameter">
            <summary>
            Maximum short position size.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.MaxShortPositionParameter.Add(System.DateTimeOffset,System.Decimal)">
            <summary>
            To add the new position value to the parameter.
            </summary>
            <param name="marketTime">The exchange time.</param>
            <param name="position">The new position value.</param>
        </member>
        <member name="T:StockSharp.Algo.Statistics.IStatisticParameter">
            <summary>
            The interface, describing statistic parameter.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Statistics.IStatisticParameter.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Statistics.IStatisticParameter.Value">
            <summary>
            The current value of the parameter.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Statistics.IStatisticParameter.DisplayName">
            <summary>
            The displayed parameter name.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Statistics.IStatisticParameter.Description">
            <summary>
            The parameter description.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Statistics.IStatisticParameter.Category">
            <summary>
            Category.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Statistics.IStatisticParameter.ValueChanged">
            <summary>
            <see cref="P:StockSharp.Algo.Statistics.IStatisticParameter.Value"/> change event.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.IStatisticParameter.Reset">
            <summary>
            To reset the parameter value.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Statistics.IStatisticParameter`1">
            <summary>
            The interface, describing statistic parameter.
            </summary>
            <typeparam name="TValue">The type of the parameter value.</typeparam>
        </member>
        <member name="P:StockSharp.Algo.Statistics.IStatisticParameter`1.Value">
            <summary>
            The current value of the parameter.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Statistics.BaseStatisticParameter`1">
            <summary>
            The base statistics parameter.
            </summary>
            <typeparam name="TValue">The type of the parameter value.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Statistics.BaseStatisticParameter`1.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Statistics.BaseStatisticParameter`1"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Name">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Description">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Category">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Value">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Statistics.BaseStatisticParameter`1.ValueChanged">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Reset">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.BaseStatisticParameter`1.RaiseValueChanged">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Statistics.BaseStatisticParameter`1.ValueChanged"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            To load the state of statistic parameter.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            To save the state of statistic parameter.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Statistics.ITradeStatisticParameter">
            <summary>
            The interface, describing statistic parameter, calculated based on trade.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.ITradeStatisticParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
            <summary>
            To add information about new trade to the parameter.
            </summary>
            <param name="info">Information on new trade.</param>
        </member>
        <member name="T:StockSharp.Algo.Statistics.WinningTradesParameter">
            <summary>
            Number of trades won (whose profit is greater than 0).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.WinningTradesParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.LossingTradesParameter">
            <summary>
            Number of trades lost with zero profit (whose profit is less than or equal to 0).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.LossingTradesParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.TradeCountParameter">
            <summary>
            Total number of trades.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.TradeCountParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.RoundtripCountParameter">
            <summary>
            Total number of closing trades.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.RoundtripCountParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.AverageTradeParameter">
            <summary>
            Average trade profit.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.AverageTradeParameter.Reset">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.AverageTradeParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.AverageTradeParameter.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.AverageTradeParameter.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.AverageWinTradeParameter">
            <summary>
            Average winning trade.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.AverageWinTradeParameter.Reset">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.AverageWinTradeParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.AverageWinTradeParameter.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.AverageWinTradeParameter.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.AverageLossTradeParameter">
            <summary>
            Average losing trade.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.AverageLossTradeParameter.Reset">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.AverageLossTradeParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.AverageLossTradeParameter.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Statistics.AverageLossTradeParameter.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Statistics.StatisticManager">
            <summary>
            The statistics manager.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.StatisticManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Statistics.StatisticManager"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Statistics.StatisticManager.Parameters">
            <summary>
            Calculated parameters.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddPnL(System.DateTimeOffset,System.Decimal)">
            <summary>
            To add the new profit-loss value.
            </summary>
            <param name="time">The change time <paramref name="pnl" />.</param>
            <param name="pnl">New profit-loss value.</param>
        </member>
        <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddPosition(System.DateTimeOffset,System.Decimal)">
            <summary>
            To add the new position value.
            </summary>
            <param name="time">The change time <paramref name="position" />.</param>
            <param name="position">The new position value.</param>
        </member>
        <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddMyTrade(StockSharp.Algo.PnL.PnLInfo)">
            <summary>
            To add information about new trade.
            </summary>
            <param name="info">Information on new trade.</param>
        </member>
        <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddNewOrder(StockSharp.BusinessEntities.Order)">
            <summary>
            To add new order.
            </summary>
            <param name="order">New order.</param>
        </member>
        <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddChangedOrder(StockSharp.BusinessEntities.Order)">
            <summary>
            To add the changed order.
            </summary>
            <param name="order">The changed order.</param>
        </member>
        <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddRegisterFailedOrder(StockSharp.BusinessEntities.OrderFail)">
            <summary>
            To add the order registration error.
            </summary>
            <param name="fail">Error registering order.</param>
        </member>
        <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddFailedOrderCancel(StockSharp.BusinessEntities.OrderFail)">
            <summary>
            To add the order cancelling error.
            </summary>
            <param name="fail">The order error.</param>
        </member>
        <member name="M:StockSharp.Algo.Statistics.StatisticManager.Reset">
            <summary>
            To clear data on equity.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.IEntityFactory">
            <summary>
            The interface of the business-essences factory (<see cref="T:StockSharp.BusinessEntities.Security"/>, <see cref="T:StockSharp.BusinessEntities.Order"/> etc.).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.IEntityFactory.CreateSecurity(System.String)">
            <summary>
            To create the instrument by the identifier.
            </summary>
            <param name="id">Security ID.</param>
            <returns>Created instrument.</returns>
        </member>
        <member name="M:StockSharp.Algo.IEntityFactory.CreatePortfolio(System.String)">
            <summary>
            To create the portfolio by the account number.
            </summary>
            <param name="name">Account number.</param>
            <returns>Created portfolio.</returns>
        </member>
        <member name="M:StockSharp.Algo.IEntityFactory.CreatePosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security)">
            <summary>
            Create position.
            </summary>
            <param name="portfolio">Portfolio.</param>
            <param name="security">Security.</param>
            <returns>Created position.</returns>
        </member>
        <member name="M:StockSharp.Algo.IEntityFactory.CreateTrade(StockSharp.BusinessEntities.Security,System.Nullable{System.Int64},System.String)">
            <summary>
            To create the tick trade by its identifier.
            </summary>
            <param name="security">Security.</param>
            <param name="id">The trade identifier (equals <see langword="null" />, if string identifier is used).</param>
            <param name="stringId">Trade ID (as string, if electronic board does not use numeric order ID representation).</param>
            <returns>Created trade.</returns>
        </member>
        <member name="M:StockSharp.Algo.IEntityFactory.CreateOrder(StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.Messages.OrderTypes},System.Int64)">
            <summary>
            To create the order by the transaction identifier.
            </summary>
            <param name="security">Security.</param>
            <param name="type">Order type.</param>
            <param name="transactionId">The identifier of the order registration transaction.</param>
            <returns>Created order.</returns>
        </member>
        <member name="M:StockSharp.Algo.IEntityFactory.CreateOrderFail(StockSharp.BusinessEntities.Order,System.Exception)">
            <summary>
            To create the error description for the order.
            </summary>
            <param name="order">Order.</param>
            <param name="error">The system description of error.</param>
            <returns>Created error description.</returns>
        </member>
        <member name="M:StockSharp.Algo.IEntityFactory.CreateMyTrade(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
            <summary>
            To create own trade.
            </summary>
            <param name="order">Order.</param>
            <param name="trade">Tick trade.</param>
            <returns>Created own trade.</returns>
        </member>
        <member name="M:StockSharp.Algo.IEntityFactory.CreateMarketDepth(StockSharp.BusinessEntities.Security)">
            <summary>
            To create the order book for the instrument.
            </summary>
            <param name="security">Security.</param>
            <returns>Created order book.</returns>
        </member>
        <member name="M:StockSharp.Algo.IEntityFactory.CreateOrderLogItem(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
            <summary>
            To create the string of orders log.
            </summary>
            <param name="order">Order.</param>
            <param name="trade">Tick trade.</param>
            <returns>Order log item.</returns>
        </member>
        <member name="M:StockSharp.Algo.IEntityFactory.CreateNews">
            <summary>
            To create news.
            </summary>
            <returns>News.</returns>
        </member>
        <member name="M:StockSharp.Algo.IEntityFactory.CreateExchange(System.String)">
            <summary>
            To create exchange.
            </summary>
            <param name="code"><see cref="P:StockSharp.BusinessEntities.Exchange.Name"/> value.</param>
            <returns>Exchange.</returns>
        </member>
        <member name="M:StockSharp.Algo.IEntityFactory.CreateBoard(System.String,StockSharp.BusinessEntities.Exchange)">
            <summary>
            To create exchange.
            </summary>
            <param name="code"><see cref="P:StockSharp.BusinessEntities.ExchangeBoard.Code"/> value.</param>
            <param name="exchange"><see cref="P:StockSharp.BusinessEntities.ExchangeBoard.Exchange"/> value.</param>
            <returns>Exchange.</returns>
        </member>
        <member name="T:StockSharp.Algo.EntityFactory">
            <summary>
            Entity factory (<see cref="T:StockSharp.BusinessEntities.Security"/>, <see cref="T:StockSharp.BusinessEntities.Order"/> etc.).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.EntityFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.EntityFactory"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.EntityFactory.CreateSecurity(System.String)">
            <summary>
            To create the instrument by the identifier.
            </summary>
            <param name="id">Security ID.</param>
            <returns>Created instrument.</returns>
        </member>
        <member name="M:StockSharp.Algo.EntityFactory.CreatePortfolio(System.String)">
            <summary>
            To create the portfolio by the account number.
            </summary>
            <param name="name">Account number.</param>
            <returns>Created portfolio.</returns>
        </member>
        <member name="M:StockSharp.Algo.EntityFactory.CreatePosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security)">
            <summary>
            Create position.
            </summary>
            <param name="portfolio">Portfolio.</param>
            <param name="security">Security.</param>
            <returns>Created position.</returns>
        </member>
        <member name="M:StockSharp.Algo.EntityFactory.CreateTrade(StockSharp.BusinessEntities.Security,System.Nullable{System.Int64},System.String)">
            <summary>
            To create the tick trade by its identifier.
            </summary>
            <param name="security">Security.</param>
            <param name="id">The trade identifier (equals <see langword="null" />, if string identifier is used).</param>
            <param name="stringId">Trade ID (as string, if electronic board does not use numeric order ID representation).</param>
            <returns>Created trade.</returns>
        </member>
        <member name="M:StockSharp.Algo.EntityFactory.CreateOrder(StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.Messages.OrderTypes},System.Int64)">
            <summary>
            To create the order by the transaction identifier.
            </summary>
            <param name="security">Security.</param>
            <param name="type">Order type.</param>
            <param name="transactionId">The identifier of the order registration transaction.</param>
            <returns>Created order.</returns>
        </member>
        <member name="M:StockSharp.Algo.EntityFactory.CreateOrderFail(StockSharp.BusinessEntities.Order,System.Exception)">
            <summary>
            To create the error description for the order.
            </summary>
            <param name="order">Order.</param>
            <param name="error">The system description of error.</param>
            <returns>Created error description.</returns>
        </member>
        <member name="M:StockSharp.Algo.EntityFactory.CreateMyTrade(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
            <summary>
            To create own trade.
            </summary>
            <param name="order">Order.</param>
            <param name="trade">Tick trade.</param>
            <returns>Created own trade.</returns>
        </member>
        <member name="M:StockSharp.Algo.EntityFactory.CreateMarketDepth(StockSharp.BusinessEntities.Security)">
            <summary>
            To create the order book for the instrument.
            </summary>
            <param name="security">Security.</param>
            <returns>Created order book.</returns>
        </member>
        <member name="M:StockSharp.Algo.EntityFactory.CreateOrderLogItem(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
            <summary>
            To create the string of orders log.
            </summary>
            <param name="order">Order.</param>
            <param name="trade">Tick trade.</param>
            <returns>Order log item.</returns>
        </member>
        <member name="M:StockSharp.Algo.EntityFactory.CreateNews">
            <summary>
            To create news.
            </summary>
            <returns>News.</returns>
        </member>
        <member name="M:StockSharp.Algo.EntityFactory.CreateExchange(System.String)">
            <summary>
            To create exchange.
            </summary>
            <param name="code"><see cref="P:StockSharp.BusinessEntities.Exchange.Name"/> value.</param>
            <returns>Exchange.</returns>
        </member>
        <member name="M:StockSharp.Algo.EntityFactory.CreateBoard(System.String,StockSharp.BusinessEntities.Exchange)">
            <summary>
            To create exchange.
            </summary>
            <param name="code"><see cref="P:StockSharp.BusinessEntities.ExchangeBoard.Code"/> value.</param>
            <param name="exchange"><see cref="P:StockSharp.BusinessEntities.ExchangeBoard.Exchange"/> value.</param>
            <returns>Exchange.</returns>
        </member>
        <member name="T:StockSharp.Algo.MarketPriceTypes">
            <summary>
            The type of market prices.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.MarketPriceTypes.Opposite">
            <summary>
            The counter-price (for quick closure of position).
            </summary>
        </member>
        <member name="F:StockSharp.Algo.MarketPriceTypes.Following">
            <summary>
            The concurrent price (for quoting at the edge of spread).
            </summary>
        </member>
        <member name="F:StockSharp.Algo.MarketPriceTypes.Middle">
            <summary>
            Spread middle.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.SecurityIdGenerator">
            <summary>
            The instrument identifiers generator <see cref="P:StockSharp.BusinessEntities.Security.Id"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.SecurityIdGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.SecurityIdGenerator"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.SecurityIdGenerator.Delimiter">
            <summary>
            The delimiter between the instrument code and the class.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.SecurityIdGenerator.GenerateId(System.String,System.String)">
            <summary>
            Generate <see cref="P:StockSharp.BusinessEntities.Security.Id"/> security.
            </summary>
            <param name="secCode">Security code.</param>
            <param name="boardCode">Board code.</param>
            <returns><see cref="P:StockSharp.BusinessEntities.Security.Id"/> security.</returns>
        </member>
        <member name="M:StockSharp.Algo.SecurityIdGenerator.GenerateId(System.String,StockSharp.BusinessEntities.ExchangeBoard)">
            <summary>
            Generate <see cref="P:StockSharp.BusinessEntities.Security.Id"/> security.
            </summary>
            <param name="secCode">Security code.</param>
            <param name="board">Security board.</param>
            <returns><see cref="P:StockSharp.BusinessEntities.Security.Id"/> security.</returns>
        </member>
        <member name="M:StockSharp.Algo.SecurityIdGenerator.Split(System.String,System.Boolean)">
            <summary>
            To get instrument codes and boards by the instrument identifier.
            </summary>
            <param name="securityId">The instrument identifier <see cref="P:StockSharp.BusinessEntities.Security.Id"/>.</param>
            <param name="nullIfInvalid">Return <see langword="null"/> in case of <paramref name="securityId"/> is invalid value.</param>
            <returns>The instrument code <see cref="P:StockSharp.Messages.SecurityId.SecurityCode"/> and the board code <see cref="P:StockSharp.Messages.SecurityId.BoardCode"/>.</returns>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Analytics.AnalyticsResultTypes">
            <summary>
            Types of result.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Strategies.Analytics.AnalyticsResultTypes.Grid">
            <summary>
            Table.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Strategies.Analytics.AnalyticsResultTypes.Bubble">
            <summary>
            Bubble chart.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Strategies.Analytics.AnalyticsResultTypes.Histogram">
            <summary>
            Histogram.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Strategies.Analytics.AnalyticsResultTypes.Heatmap">
            <summary>
            Heatmap.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy">
            <summary>
            The base analytic strategy.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.From">
            <summary>
            Start date.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.To">
            <summary>
            End date.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.ResultType">
            <summary>
            Result type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.StorateRegistry">
            <summary>
            Market-data storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.Portfolio">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.ProcessCancelActiveOrders">
            <summary>
            To cancel all active orders (to stop and regular).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.CurrentTime">
            <summary>
            Current time, which will be passed to the <see cref="P:StockSharp.Logging.LogMessage.Time"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.Panel">
            <summary>
            Result panel.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.StorageFormat">
            <summary>
            Data format.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.OnStarted">
            <summary>
            The method is called when the <see cref="M:StockSharp.Algo.Strategies.Strategy.Start"/> method has been called and the <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState"/> state has been taken the <see cref="F:StockSharp.Algo.ProcessStates.Started"/> value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.OnAnalyze">
            <summary>
            To analyze.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Analytics.DailyHighestVolumeStrategy">
            <summary>
            The analytic strategy, calculating distribution of the biggest volume by hours.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Analytics.DailyHighestVolumeStrategy.TimeFrame">
            <summary>
            Time-frame.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.DailyHighestVolumeStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Analytics.DailyHighestVolumeStrategy"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.DailyHighestVolumeStrategy.OnAnalyze">
            <summary>
            To analyze.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Analytics.IAnalyticsChart">
            <summary>
            The interface for work with a chart.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.IAnalyticsChart.Append(System.DateTime,System.Decimal,System.Decimal)">
            <summary>
            Append new values.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
            <param name="z">Z value.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.IAnalyticsChart.Append(System.Decimal,System.Decimal)">
            <summary>
            Append new values.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.IAnalyticsChart.Update(System.DateTime,System.Decimal,System.Decimal)">
            <summary>
            Update values.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
            <param name="z">Z value.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.IAnalyticsChart.Update(System.Decimal,System.Decimal)">
            <summary>
            Append new values.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Analytics.IAnalyticsGridColumn">
            <summary>
            The interface for work with the grid column.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Analytics.IAnalyticsGridColumn.Width">
            <summary>
            Width of the column.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Analytics.IAnalyticsGrid">
            <summary>
            The interface for work with the grid.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.IAnalyticsGrid.ClearColumns">
            <summary>
            Remove all columns.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.IAnalyticsGrid.AddColumn(System.String,System.String)">
            <summary>
            Add new column.
            </summary>
            <param name="fieldName">Field name to bind.</param>
            <param name="header">Header text.</param>
            <returns>The new column.</returns>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Analytics.IAnalyticsGrid.ItemsSource">
            <summary>
            Items source.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.IAnalyticsGrid.SetSort(StockSharp.Algo.Strategies.Analytics.IAnalyticsGridColumn,System.ComponentModel.ListSortDirection)">
            <summary>
            Set sorting mode.
            </summary>
            <param name="column">The column.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Analytics.IAnalyticsPanel">
            <summary>
            The interface for work with result panel.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.IAnalyticsPanel.ClearControls">
            <summary>
            Delete all controls.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.IAnalyticsPanel.CreateGrid(System.String)">
            <summary>
            Create table to show analytics result.
            </summary>
            <param name="title">Title.</param>
            <returns>Table.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.IAnalyticsPanel.CreateBubbleChart(System.String)">
            <summary>
            Create bubble chart to show analytics result.
            </summary>
            <param name="title">Title.</param>
            <returns>Bubble chart.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.IAnalyticsPanel.CreateHistogramChart(System.String)">
            <summary>
            Create histogram chart to show analytics result.
            </summary>
            <param name="title">Title.</param>
            <returns>Histogram chart.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.IAnalyticsPanel.CreateHeatmap(System.String)">
            <summary>
            Create heatmap to show analytics result.
            </summary>
            <param name="title">Title.</param>
            <returns>Heatmap.</returns>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Analytics.PriceVolumeDistributionStrategy">
            <summary>
            The analytic strategy, calculating distribution of the volume by price levels.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Analytics.PriceVolumeDistributionStrategy.TimeFrame">
            <summary>
            Time-frame.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.PriceVolumeDistributionStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Analytics.PriceVolumeDistributionStrategy"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Analytics.PriceVolumeDistributionStrategy.OnAnalyze">
            <summary>
            To analyze.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.BasketStrategyFinishModes">
            <summary>
            Conditions of subsidiary strategies operation end.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.First">
            <summary>
            If at least one strategy ended.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.All">
            <summary>
            If all strategies ended.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.None">
            <summary>
            Subsidiary strategies do not depend on each other.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.BasketStrategy">
            <summary>
            The batch strategy, containing subsidiary strategies, affecting each other by their execution.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.BasketStrategy.#ctor(StockSharp.Algo.Strategies.BasketStrategyFinishModes)">
            <summary>
            Create strategy.
            </summary>
            <param name="finishMode">The condition of subsidiary strategies operation end.</param>
        </member>
        <member name="P:StockSharp.Algo.Strategies.BasketStrategy.FinishMode">
            <summary>
            The condition of subsidiary strategies operation end.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.BasketStrategy.FirstFinishStrategy">
            <summary>
            First stopped subsidiary strategy. The property is filled at <see cref="P:StockSharp.Algo.Strategies.BasketStrategy.FinishMode"/> equals to <see cref="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.First"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.BasketStrategy.OnStarted">
            <summary>
            The method is called when the <see cref="M:StockSharp.Algo.Strategies.Strategy.Start"/> method has been called and the <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState"/> state has been taken the <see cref="F:StockSharp.Algo.ProcessStates.Started"/> value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.BasketStrategy.DisposeManaged">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.IStrategyChildStrategyList">
            <summary>
            The collection of subsidiary strategies.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Messages.StrategyInfoMessage">
            <summary>
            The message contains information about strategy.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyInfoMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyInfoMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyInfoMessage.StrategyId">
            <summary>
            Strategy ID.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyInfoMessage.StrategyName">
            <summary>
            Strategy name.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyInfoMessage.Parameters">
            <summary>
            Strategy parameters.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyInfoMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Algo.Strategies.Messages.StrategyLookupMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyInfoMessage.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyInfoMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyInfoMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyInfoMessage.CopyTo(StockSharp.Algo.Strategies.Messages.StrategyInfoMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
            <returns>The object, to which copied information.</returns>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Messages.StrategyLookupMessage">
            <summary>
            Message strategies lookup.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyLookupMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyLookupMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyLookupMessage.TransactionId">
            <summary>
            Transaction ID.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyLookupMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyLookupMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyLookupMessage.CopyTo(StockSharp.Algo.Strategies.Messages.StrategyLookupMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
            <returns>The object, to which copied information.</returns>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Messages.StrategyLookupResultMessage">
            <summary>
            Strategies search result message.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyLookupResultMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyLookupResultMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyLookupResultMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Algo.Strategies.Messages.StrategyLookupMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyLookupResultMessage.Error">
            <summary>
            Lookup error info.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyLookupResultMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyLookupResultMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyLookupResultMessage.CopyTo(StockSharp.Algo.Strategies.Messages.StrategyLookupResultMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
            <returns>The object, to which copied information.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyLookupResultMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Strategies.Messages.StrategyStateMessage">
            <summary>
            The message contains information about strategy state or command to change state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyStateMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyStateMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyStateMessage.StrategyId">
            <summary>
            Strategy ID.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyStateMessage.StrategyTypeId">
            <summary>
            Strategy type ID.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyStateMessage.Command">
            <summary>
            Command.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyStateMessage.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyStateMessage.TransactionId">
            <summary>
            Transaction ID.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyStateMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Algo.Strategies.Messages.StrategyStateMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyStateMessage.Statistics">
            <summary>
            Statistics.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyStateMessage.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyStateMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyStateMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyStateMessage.CopyTo(StockSharp.Algo.Strategies.Messages.StrategyStateMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
            <returns>The object, to which copied information.</returns>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Messages.StrategyTypeMessage">
            <summary>
            The message contains information about strategy type.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyTypeMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyTypeMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyTypeMessage.StrategyTypeId">
            <summary>
            Strategy type ID.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyTypeMessage.StrategyName">
            <summary>
            Strategy name.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Messages.StrategyTypeMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Algo.Strategies.Messages.StrategyLookupMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyTypeMessage.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyTypeMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyTypeMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Messages.StrategyTypeMessage.CopyTo(StockSharp.Algo.Strategies.Messages.StrategyTypeMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
            <returns>The object, to which copied information.</returns>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport">
            <summary>
            The generator of report on equity in the csv format.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport"/>.
            </summary>
            <param name="strategy">The strategy, requiring the report generation.</param>
            <param name="fileName">The name of the file for the report generation in the csv format.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport.#ctor(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport"/>.
            </summary>
            <param name="strategies">Strategies, requiring the report generation.</param>
            <param name="fileName">The name of the file for the report generation in the csv format.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport.Generate">
            <summary>
            To generate the report.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport">
            <summary>
            The report generator for the strategy in the Excel format.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport"/>.
            </summary>
            <param name="strategy">The strategy, requiring the report generation.</param>
            <param name="fileName">The name of the file, in which report is generated in the Excel format.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.#ctor(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport"/>.
            </summary>
            <param name="strategies">Strategies, requiring the report generation.</param>
            <param name="fileName">The name of the file, in which report is generated in the Excel format.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.#ctor(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport"/>.
            </summary>
            <param name="strategies">Strategies, requiring the report generation.</param>
            <param name="fileName">The name of the file, in which report is generated in the Excel format.</param>
            <param name="template">The template file, to be copied into <see cref="P:StockSharp.Algo.Strategies.Reporting.StrategyReport.FileName"/>.</param>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.Template">
            <summary>
            The template file, to be copied into <see cref="P:StockSharp.Algo.Strategies.Reporting.StrategyReport.FileName"/> and filled up with Strategy, Orders and Trades sheets.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.ExcelVersion">
            <summary>
            The Excel version. It affects the maximal number of strings. The default value is 2007.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.IncludeOrders">
            <summary>
            To add orders to the report. Orders are added by default.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.Decimals">
            <summary>
            The number of decimal places. By default, it equals to 2.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.Generate">
            <summary>
            To generate the report.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Reporting.StrategyReport">
            <summary>
            The base report generator for strategies.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.#ctor(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.String)">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Strategies.Reporting.StrategyReport"/>.
            </summary>
            <param name="strategies">Strategies, requiring the report generation.</param>
            <param name="fileName">The name of the file, in which the report is generated.</param>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Reporting.StrategyReport.FileName">
            <summary>
            The name of the file, in which the report is generated.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Reporting.StrategyReport.Strategies">
            <summary>
            Strategies, requiring the report generation.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Generate">
            <summary>
            To generate the report.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Format(System.Nullable{System.TimeSpan})">
            <summary>
            To format the date in string.
            </summary>
            <param name="time">Time.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Format(System.DateTimeOffset)">
            <summary>
            To format the date in string.
            </summary>
            <param name="time">Time.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Format(StockSharp.Messages.Sides)">
            <summary>
            Convert order side into string.
            </summary>
            <param name="direction">Order side.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Format(StockSharp.Messages.OrderStates)">
            <summary>
            Convert order state into string.
            </summary>
            <param name="state">Order state.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Format(System.Nullable{StockSharp.Messages.OrderTypes})">
            <summary>
            To format the order type in string.
            </summary>
            <param name="type">Order type.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport">
            <summary>
            The report generator for the strategy in the xml format.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport"/>.
            </summary>
            <param name="strategy">The strategy, requiring the report generation.</param>
            <param name="fileName">The name of the file, in which report in the Xml format will be generated.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport.#ctor(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport"/>.
            </summary>
            <param name="strategies">Strategies, requiring the report generation.</param>
            <param name="fileName">The name of the file, in which report in the xml format will be generated.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport.Generate">
            <summary>
            To generate the report.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Strategy">
            <summary>
            The base class for all trade strategies.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Strategy"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.Id">
            <summary>
            Strategy ID.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.LogLevel">
            <summary>
            The logging level. The default is set to <see cref="F:StockSharp.Logging.LogLevels.Inherit"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.Name">
            <summary>
            Strategy name.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.NameGenerator">
            <summary>
            The generator of strategy name.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.Connector">
            <summary>
            Connection to the trading system.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.SafeGetConnector">
            <summary>
            To get the strategy getting <see cref="P:StockSharp.Algo.Strategies.Strategy.Connector"/>. If it is not initialized, the exception will be discarded.
            </summary>
            <returns>Connection string.</returns>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.Portfolio">
            <summary>
            Portfolio.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.Security">
            <summary>
            Security.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.Slippage">
            <summary>
            Total slippage.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.SlippageChanged">
            <summary>
            <see cref="P:StockSharp.Algo.Strategies.Strategy.Slippage"/> change event.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.PnLManager">
            <summary>
            The profit-loss manager. It accounts trades of this strategy, as well as of its subsidiary strategies <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.PnL">
            <summary>
            The aggregate value of profit-loss without accounting commission <see cref="P:StockSharp.Algo.Strategies.Strategy.Commission"/>.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.PnLChanged">
            <summary>
            <see cref="P:StockSharp.Algo.Strategies.Strategy.PnL"/> change event.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.Commission">
            <summary>
            Total commission.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.CommissionChanged">
            <summary>
            <see cref="P:StockSharp.Algo.Strategies.Strategy.Commission"/> change event.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.PositionManager">
            <summary>
            The position manager. It accounts trades of this strategy, as well as of its subsidiary strategies <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.Position">
            <summary>
            The position aggregate value.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.PositionChanged">
            <summary>
            <see cref="P:StockSharp.Algo.Strategies.Strategy.Position"/> change event.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.Latency">
            <summary>
            Total latency.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.LatencyChanged">
            <summary>
            <see cref="P:StockSharp.Algo.Strategies.Strategy.Latency"/> change event.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.StatisticManager">
            <summary>
            The statistics manager.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.RiskManager">
            <summary>
            The risks control manager.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.Parameters">
            <summary>
            Strategy parameters.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.ParametersChanged">
            <summary>
            <see cref="P:StockSharp.Algo.Strategies.Strategy.Parameters"/> change event.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.RaiseParametersChanged(System.String)">
            <summary>
            To call events <see cref="E:StockSharp.Algo.Strategies.Strategy.ParametersChanged"/> and <see cref="E:StockSharp.Algo.Strategies.Strategy.PropertyChanged"/>.
            </summary>
            <param name="name">Parameter name.</param>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.Environment">
            <summary>
            Strategy environment parameters.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.MaxErrorCount">
            <summary>
            The maximal number of errors, which strategy shall receive prior to stop operation.
            </summary>
            <remarks>
            The default value is 1.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.ErrorCount">
            <summary>
            The current number of errors.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.ProcessState">
            <summary>
            The operation state.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.ProcessStateChanged">
            <summary>
            <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState"/> change event.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.RaiseProcessStateChanged(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Strategies.Strategy.ProcessStateChanged"/>.
            </summary>
            <param name="strategy">Strategy.</param>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.CancelOrdersWhenStopping">
            <summary>
            To cancel active orders at stop. Is On by default.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.Orders">
            <summary>
            Orders, registered within the strategy framework.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.StopOrders">
            <summary>
            Stop-orders, registered within the strategy framework.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.OrdersKeepTime">
            <summary>
            The time for storing <see cref="P:StockSharp.Algo.Strategies.Strategy.Orders"/> and <see cref="P:StockSharp.Algo.Strategies.Strategy.StopOrders"/> orders in memory. By default it equals to 2 days. If value is set in <see cref="F:System.TimeSpan.Zero"/>, orders will not be deleted.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.MyTrades">
            <summary>
            Trades, matched during the strategy operation.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.OrderFails">
            <summary>
            Orders with errors, registered within the strategy.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.Volume">
            <summary>
            Operational volume.
            </summary>
            <remarks>
            If the value is set 0, the parameter is ignored.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.ErrorState">
            <summary>
            The state of an error.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies">
            <summary>
            Subsidiary trade strategies.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.StartedTime">
            <summary>
            Strategy start time.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.TotalWorkingTime">
            <summary>
            The total time of strategy operation less time periods, when strategy was stopped.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.DisposeOnStop">
            <summary>
            Automatically to clear resources, used by the strategy, when it stops (state <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState"/> becomes equal to <see cref="F:StockSharp.Algo.ProcessStates.Stopped"/>) and delete it from the parent strategy through <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies"/>.
            </summary>
            <remarks>
            The mode is used only for one-time strategies, i.e. for those strategies, which will not be started again (for example, quoting). It is disabled by default.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.WaitAllTrades">
            <summary>
            Stop strategy only after getting all trades by registered orders.
            </summary>
            <remarks>
            It is disabled by default.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.CommentOrders">
            <summary>
            To add to <see cref="P:StockSharp.BusinessEntities.Order.Comment"/> the name of the strategy <see cref="P:StockSharp.Algo.Strategies.Strategy.Name"/>, registering the order.
            </summary>
            <remarks>
            It is disabled by default.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.Rules">
            <summary>
            Registered rules.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.IsRulesSuspended">
            <summary>
            Is rules execution suspended.
            </summary>
            <remarks>
            Rules suspension is performed through the method <see cref="M:StockSharp.Algo.IMarketRuleContainer.SuspendRules"/>.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.StopOnChildStrategyErrors">
            <summary>
            Stop strategy when child strategies causes errors.
            </summary>
            <remarks>
            It is disabled by default.
            </remarks>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.OrderRegistering">
            <summary>
            The event of sending order for registration.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.OrderRegistered">
            <summary>
            The event of order successful registration.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.OrderRegisterFailed">
            <summary>
            The event of order registration error.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistering">
            <summary>
            The event of sending stop-order for registration.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistered">
            <summary>
            The event of stop-order successful registration.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegisterFailed">
            <summary>
            The event of stop-order registration error.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.OrderChanged">
            <summary>
            The event of order change.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderChanged">
            <summary>
            The event of stop-order change.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.OrderCanceling">
            <summary>
            The event of sending order for cancelling.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderCanceling">
            <summary>
            The event of sending stop-order for cancelling.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.OrderReRegistering">
            <summary>
            The event of sending order for re-registration.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderReRegistering">
            <summary>
            The event of sending stop-order for re-registration.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.OrderCancelFailed">
            <summary>
            The event of order cancelling order.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderCancelFailed">
            <summary>
            The event of stop-order cancelling order.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.NewMyTrade">
            <summary>
            The event of new trade occurrence.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.ConnectorChanged">
            <summary>
            The event of strategy connection change.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.SecurityChanged">
            <summary>
            The event of strategy instrument change.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.PortfolioChanged">
            <summary>
            The event of strategy portfolio change.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.PositionChanged2">
            <summary>
            The event of strategy position change.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.Error">
            <summary>
            The event of error occurrence in the strategy.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnStarted">
            <summary>
            The method is called when the <see cref="M:StockSharp.Algo.Strategies.Strategy.Start"/> method has been called and the <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState"/> state has been taken the <see cref="F:StockSharp.Algo.ProcessStates.Started"/> value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.InitStartValues">
            <summary>
            Init.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopping">
            <summary>
            The method is called when the <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState"/> process state has been taken the <see cref="F:StockSharp.Algo.ProcessStates.Stopping"/> value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopped">
            <summary>
            The method is called when the <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState"/> process state has been taken the <see cref="F:StockSharp.Algo.ProcessStates.Stopped"/> value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.RegisterOrder(StockSharp.BusinessEntities.Order)">
            <summary>
            To register the order and automatically add to start mechanism of profit-loss and slippage.
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
            <summary>
            To re-register the order and automatically add to start mechanism of profit-loss and slippage.
            </summary>
            <param name="oldOrder">Changing order.</param>
            <param name="newOrder">New order.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.CancelOrder(StockSharp.BusinessEntities.Order)">
            <summary>
            Cancel order.
            </summary>
            <param name="order">The order for cancelling.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.ProcessOrder(StockSharp.BusinessEntities.Order)">
            <summary>
            To add the order to the strategy.
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.ProcessOrder(StockSharp.BusinessEntities.Order,System.Boolean)">
            <summary>
            To add the order to the strategy.
            </summary>
            <param name="order">Order.</param>
            <param name="isChanging">The order came from the change event.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.AttachOrder(StockSharp.BusinessEntities.Order,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
            <summary>
            To add the active order to the strategy and process trades by the order.
            </summary>
            <param name="order">Order.</param>
            <param name="myTrades">Trades for order.</param>
            <remarks>
            It is used to restore a state of the strategy, when it is necessary to subscribe for getting data on orders, registered earlier.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.AssignOrderStrategyId(StockSharp.BusinessEntities.Order)">
            <summary>
            To set the strategy identifier for the order.
            </summary>
            <param name="order">The order, for which the strategy identifier shall be set.</param>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.CurrentTime">
            <summary>
            Current time, which will be passed to the <see cref="P:StockSharp.Logging.LogMessage.Time"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.RaiseLog(StockSharp.Logging.LogMessage)">
            <summary>
            To call the event <see cref="E:StockSharp.Logging.ILogSource.Log"/>.
            </summary>
            <param name="message">A debug message.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.Start">
            <summary>
            To start the trade algorithm.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.Stop">
            <summary>
            To stop the trade algorithm.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.Reseted">
            <summary>
            The event of the strategy re-initialization.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.RaiseReseted">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Strategies.Strategy.Reseted"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.Reset">
            <summary>
            To re-initialize the trade algorithm. It is called after initialization of the strategy object and loading stored parameters.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnReseted">
            <summary>
            It is called from the <see cref="M:StockSharp.Algo.Strategies.Strategy.Reset"/> method.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.StockSharp#Algo#IMarketRuleContainer#SuspendRules">
            <summary>
            To suspend rules execution until next restoration through the method <see cref="M:StockSharp.Algo.IMarketRuleContainer.ResumeRules"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.StockSharp#Algo#IMarketRuleContainer#ResumeRules">
            <summary>
            To restore rules execution, suspended through the method <see cref="M:StockSharp.Algo.IMarketRuleContainer.SuspendRules"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Strategy.UnrealizedPnLInterval">
            <summary>
            The interval for unrealized profit recalculation. The default value is 1 minute.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnPositionChanged(StockSharp.BusinessEntities.Position)">
            <summary>
            The method, called at strategy position change.
            </summary>
            <param name="position">The strategy position change.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnNewMyTrade(StockSharp.BusinessEntities.MyTrade)">
            <summary>
            The method, called at occurrence of new strategy trade.
            </summary>
            <param name="trade">New trade of a strategy.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderRegistering(StockSharp.BusinessEntities.Order)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderRegistering"/>.
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderRegistered(StockSharp.BusinessEntities.Order)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderRegistered"/>.
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderRegistering(StockSharp.BusinessEntities.Order)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistering"/>.
            </summary>
            <param name="order">The stop order.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderRegistered(StockSharp.BusinessEntities.Order)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistered"/>.
            </summary>
            <param name="order">The stop order.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderCanceling(StockSharp.BusinessEntities.Order)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistered"/>.
            </summary>
            <param name="order">The stop order.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderCanceling(StockSharp.BusinessEntities.Order)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderRegistered"/>.
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderReRegistering(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderReRegistering"/>.
            </summary>
            <param name="oldOrder">The stop order to be cancelled.</param>
            <param name="newOrder">New stop order to be registered.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderReRegistering(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
            <summary>
            To call the event <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderReRegistering"/>.
            </summary>
            <param name="oldOrder">Cancelling order.</param>
            <param name="newOrder">New order to register.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderChanged(StockSharp.BusinessEntities.Order)">
            <summary>
            The method, called at strategy order change.
            </summary>
            <param name="order">The changed order.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderChanged(StockSharp.BusinessEntities.Order)">
            <summary>
            The method, called at strategy stop order change.
            </summary>
            <param name="order">The changed stop order.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
            <summary>
            The method, called at strategy stop orders change.
            </summary>
            <param name="orders">Changed stop orders.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderRegisterFailed(StockSharp.BusinessEntities.OrderFail)">
            <summary>
            The method, called at strategy order registration error.
            </summary>
            <param name="fail">Error registering order.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderRegisterFailed(StockSharp.BusinessEntities.OrderFail)">
            <summary>
            The method, called at strategy stop order registration error.
            </summary>
            <param name="fail">The stop order registration error.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.ProcessNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
            <summary>
            To process orders, received for the connection <see cref="P:StockSharp.Algo.Strategies.Strategy.Connector"/>, and find among them those, belonging to the strategy.
            </summary>
            <param name="newOrders">New orders.</param>
            <returns>Orders, belonging to the strategy.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.CancelActiveOrders">
            <summary>
            To cancel all active orders (to stop and regular).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.ProcessCancelActiveOrders">
            <summary>
            To cancel all active orders (to stop and regular).
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.OnError(StockSharp.Algo.Strategies.Strategy,System.Exception)">
            <summary>
            Processing of error, occurred as result of strategy operation.
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="error">Error.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Strategies.Strategy"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.ValuesChanged">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.GetMarketDepth(StockSharp.BusinessEntities.Security)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.GetSecurityValue(StockSharp.BusinessEntities.Security,StockSharp.Messages.Level1Fields)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.GetLevel1Fields(StockSharp.BusinessEntities.Security)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.Lookup(StockSharp.BusinessEntities.Security)">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Algo.Strategies.Strategy.NewStateMessage">
            <summary>
            New <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyStateMessage"/> occurred event.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.ToInfoMessage(System.Int64)">
            <summary>
            Convert to <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyInfoMessage"/>.
            </summary>
            <param name="transactionId">ID of the original message <see cref="P:StockSharp.Algo.Strategies.Messages.StrategyLookupMessage.TransactionId"/> for which this message is a response.</param>
            <returns>The message contains information about strategy.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.ApplyChanges(StockSharp.Algo.Strategies.Messages.StrategyInfoMessage)">
            <summary>
            Apply changes.
            </summary>
            <param name="message">The message contains information about strategy.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.ApplyCommand(StockSharp.Algo.Strategies.Messages.StrategyStateMessage)">
            <summary>
            Apply incoming command.
            </summary>
            <param name="stateMsg">The message contains information about strategy state or command to change state.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Strategy.DisposeManaged">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.StrategyHelper">
            <summary>
            Extension class for <see cref="T:StockSharp.Algo.Strategies.Strategy"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Strategies.StrategyHelper.AllowTradingKey">
            <summary>
            Allow trading key.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.BuyAtMarket(StockSharp.Algo.Strategies.Strategy,System.Nullable{System.Decimal})">
            <summary>
            To create initialized object of buy order at market price.
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="volume">The volume. If <see langword="null" /> value is passed, then <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume"/> value is used.</param>
            <returns>The initialized order object.</returns>
            <remarks>
            The order is not registered, only the object is created.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SellAtMarket(StockSharp.Algo.Strategies.Strategy,System.Nullable{System.Decimal})">
            <summary>
            To create the initialized order object of sell order at market price.
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="volume">The volume. If <see langword="null" /> value is passed, then <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume"/> value is used.</param>
            <returns>The initialized order object.</returns>
            <remarks>
            The order is not registered, only the object is created.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.BuyAtLimit(StockSharp.Algo.Strategies.Strategy,System.Decimal,System.Nullable{System.Decimal})">
            <summary>
            To create the initialized order object for buy.
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="price">Price.</param>
            <param name="volume">The volume. If <see langword="null" /> value is passed, then <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume"/> value is used.</param>
            <returns>The initialized order object.</returns>
            <remarks>
            The order is not registered, only the object is created.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SellAtLimit(StockSharp.Algo.Strategies.Strategy,System.Decimal,System.Nullable{System.Decimal})">
            <summary>
            To create the initialized order object for sell.
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="price">Price.</param>
            <param name="volume">The volume. If <see langword="null" /> value is passed, then <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume"/> value is used.</param>
            <returns>The initialized order object.</returns>
            <remarks>
            The order is not registered, only the object is created.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.CreateOrder(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Sides,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To create the initialized order object.
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="direction">Order side.</param>
            <param name="price">The price. If <see langword="null" /> value is passed, the order is registered at market price.</param>
            <param name="volume">The volume. If <see langword="null" /> value is passed, then <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume"/> value is used.</param>
            <returns>The initialized order object.</returns>
            <remarks>
            The order is not registered, only the object is created.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.ClosePosition(StockSharp.Algo.Strategies.Strategy,System.Decimal)">
            <summary>
            To close open position by market (to register the order of the type <see cref="F:StockSharp.Messages.OrderTypes.Market"/>).
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="slippage">The slippage level, admissible at the order registration. It is used, if the order is registered using the limit order.</param>
            <remarks>
            The market order is not operable on all exchanges.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetCandleManager(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            To get the candle manager, associated with the passed strategy.
            </summary>
            <param name="strategy">Strategy.</param>
            <returns>The candles manager.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SetCandleManager(StockSharp.Algo.Strategies.Strategy,StockSharp.Algo.Candles.ICandleManager)">
            <summary>
            To set the candle manager for the strategy.
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="candleManager">The candles manager.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetMessageSender(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            To get the message sender, associated with the passed strategy.
            </summary>
            <param name="strategy">Strategy.</param>
            <returns>Message sender.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SetMessageSender(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.IMessageSender)">
            <summary>
            To set the message sender for the strategy.
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="messageSender">Message sender.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetIsEmulation(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            To get the strategy start-up mode (paper trading or real).
            </summary>
            <param name="strategy">Strategy.</param>
            <returns>If the paper trading mode is used - <see langword="true" />, otherwise - <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SetIsEmulation(StockSharp.Algo.Strategies.Strategy,System.Boolean)">
            <summary>
            To get the strategy start-up mode (paper trading or real).
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="isEmulation">If the paper trading mode is used - <see langword="true" />, otherwise - <see langword="false" />.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetAllowTrading(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            To get the strategy operation mode (initialization or trade).
            </summary>
            <param name="strategy">Strategy.</param>
            <returns>If initialization is performed - <see langword="true" />, otherwise - <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SetAllowTrading(StockSharp.Algo.Strategies.Strategy,System.Boolean)">
            <summary>
            To set the strategy operation mode (initialization or trade).
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="isInitialization">If initialization is performed - <see langword="true" />, otherwise - <see langword="false" />.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.LoadState(StockSharp.Algo.Strategies.Strategy,Ecng.Serialization.SettingsStorage)">
            <summary>
            To restore the strategy state.
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="storage">Market data storage.</param>
            <remarks>
            This method is used to load statistics, orders and trades.
            The data storage shall include the following parameters:
            1. Settings (SettingsStorage) - statistics settings.
            2. Statistics(SettingsStorage) - saved state of statistics.
            3. Orders (IDictionary[Order, IEnumerable[MyTrade]]) - orders and corresponding trades.
            4. Positions (IEnumerable[Position]) - strategy positions.
            If any of the parameters is missing, data will not be restored.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetSecurityValue``1(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Level1Fields)">
            <summary>
            To get market data value for the strategy instrument.
            </summary>
            <typeparam name="T">The type of the market data field value.</typeparam>
            <param name="strategy">Strategy.</param>
            <param name="field">Market-data field.</param>
            <returns>The field value. If no data, the <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetTraceId(StockSharp.BusinessEntities.Order)">
            <summary>
            To get the tracing-based order identifier.
            </summary>
            <param name="order">Order.</param>
            <returns>The tracing-based order identifier.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.EmulateOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.Algo.Storages.IStorageRegistry,System.Collections.Generic.IDictionary{StockSharp.BusinessEntities.Security,System.Decimal})">
            <summary>
            To emulate orders on history.
            </summary>
            <param name="orders">Orders to be emulated on history.</param>
            <param name="storageRegistry">The external storage for access to history data.</param>
            <param name="openedPositions">Trades, describing initial open positions.</param>
            <returns>The virtual strategy, containing progress of paper trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenNewMyTrade(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            To create a rule for the event of occurrence new strategy trade.
            </summary>
            <param name="strategy">The strategy, based on which trade occurrence will be traced.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenOrderRegistered(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            To create a rule for event of occurrence of new strategy order.
            </summary>
            <param name="strategy">The strategy, based on which order occurrence will be traced.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenOrderChanged(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            To create a rule for event of change of any strategy order.
            </summary>
            <param name="strategy">The strategy, based on which orders change will be traced.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenPositionChanged(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            To create a rule for the event of strategy position change.
            </summary>
            <param name="strategy">The strategy, based on which position change will be traced.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenPositionLess(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for event of position event reduction below the specified level.
            </summary>
            <param name="strategy">The strategy, based on which position change will be traced.</param>
            <param name="value">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenPositionMore(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for event of position event increase above the specified level.
            </summary>
            <param name="strategy">The strategy, based on which position change will be traced.</param>
            <param name="value">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenPnLLess(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for event of profit reduction below the specified level.
            </summary>
            <param name="strategy">The strategy, based on which the profit change will be traced.</param>
            <param name="value">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenPnLMore(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for event of profit increase above the specified level.
            </summary>
            <param name="strategy">The strategy, based on which the profit change will be traced.</param>
            <param name="value">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenPnLChanged(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            To create a rule for event of profit change.
            </summary>
            <param name="strategy">The strategy, based on which the profit change will be traced.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenStarted(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            To create a rule for event of start of strategy operation.
            </summary>
            <param name="strategy">The strategy, based on which the start of strategy operation will be expected.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenStopping(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            To create a rule for event of beginning of the strategy operation stop.
            </summary>
            <param name="strategy">The strategy, based on which the beginning of stop will be determined.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenStopped(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            To create a rule for event full stop of strategy operation.
            </summary>
            <param name="strategy">The strategy, based on which the full stop will be expected.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenError(StockSharp.Algo.Strategies.Strategy,System.Boolean)">
            <summary>
            To create a rule for event of strategy error (transition of state <see cref="P:StockSharp.Algo.Strategies.Strategy.ErrorState"/> into <see cref="F:StockSharp.Logging.LogLevels.Error"/>).
            </summary>
            <param name="strategy">The strategy, based on which error will be expected.</param>
            <param name="processChildStrategyErrors">Process the child strategies errors.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenWarning(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            To create a rule for event of strategy warning (transition of state <see cref="P:StockSharp.Algo.Strategies.Strategy.ErrorState"/> into <see cref="F:StockSharp.Logging.LogLevels.Warning"/>).
            </summary>
            <param name="strategy">The strategy, based on which the warning will be expected.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.Register(StockSharp.Algo.IMarketRule,StockSharp.BusinessEntities.Order)">
            <summary>
            To create an action, registering the order.
            </summary>
            <param name="rule">Rule.</param>
            <param name="order">The order to be registered.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.ReRegister(StockSharp.Algo.IMarketRule,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
            <summary>
            To create an action, re-registering the order.
            </summary>
            <param name="rule">Rule.</param>
            <param name="oldOrder">The order to be re-registered.</param>
            <param name="newOrder">Information about new order.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.Cancel(StockSharp.Algo.IMarketRule,StockSharp.BusinessEntities.Order)">
            <summary>
            To create an action, cancelling the order.
            </summary>
            <param name="rule">Rule.</param>
            <param name="order">The order to be cancelled.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyHelper.ToTypeMessage(System.Type,System.Int64)">
            <summary>
            Convert <see cref="T:System.Type"/> to <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyTypeMessage"/>.
            </summary>
            <param name="strategyType">Strategy type.</param>
            <param name="transactionId">ID of the original message <see cref="P:StockSharp.Algo.Strategies.Messages.StrategyLookupMessage.TransactionId"/> for which this message is a response.</param>
            <returns>The message contains information about strategy type.</returns>
        </member>
        <member name="T:StockSharp.Algo.Strategies.StrategyNameGenerator">
            <summary>
            The class for the strategy name formation.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyNameGenerator.#ctor(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.StrategyNameGenerator"/>.
            </summary>
            <param name="strategy">Strategy.</param>
        </member>
        <member name="E:StockSharp.Algo.Strategies.StrategyNameGenerator.Changed">
            <summary>
            The name change event.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.AutoGenerateStrategyName">
            <summary>
            Whether to use the automatic generation of the strategy name. It is enabled by default.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.ShortName">
            <summary>
            The strategy brief name.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.Pattern">
            <summary>
            The pattern for strategy name formation.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.Value">
            <summary>
            Generated or set strategy name.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.IStrategyParam">
            <summary>
            The strategy parameter.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.IStrategyParam.Id">
            <summary>
            Parameter identifier.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.IStrategyParam.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.IStrategyParam.Value">
            <summary>
            The parameter value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.IStrategyParam.OptimizeFrom">
            <summary>
            The From value at optimization.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.IStrategyParam.OptimizeTo">
            <summary>
            The To value at optimization.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.IStrategyParam.OptimizeStep">
            <summary>
            The Increment value at optimization.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.StrategyParam`1">
            <summary>
            Wrapper for typified access to the strategy parameter.
            </summary>
            <typeparam name="T">The type of the parameter value.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1"/>.
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="name">Parameter name.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.#ctor(StockSharp.Algo.Strategies.Strategy,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1"/>.
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="id">Parameter identifier.</param>
            <param name="name">Parameter name.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.#ctor(StockSharp.Algo.Strategies.Strategy,System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1"/>.
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="name">Parameter name.</param>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.#ctor(StockSharp.Algo.Strategies.Strategy,System.String,System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1"/>.
            </summary>
            <param name="strategy">Strategy.</param>
            <param name="id">Parameter identifier.</param>
            <param name="name">Parameter name.</param>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.Id">
            <summary>
            Parameter identifier.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.AllowNull">
            <summary>
            Is it possible to store in <see cref="P:StockSharp.Algo.Strategies.StrategyParam`1.Value"/> a value, equal to <see langword="null" />.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.Value">
            <summary>
            The parameter value.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.OptimizeFrom">
            <summary>
            The From value at optimization.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.OptimizeTo">
            <summary>
            The To value at optimization.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.OptimizeStep">
            <summary>
            The Increment value at optimization.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Strategies.StrategyParamHelper">
            <summary>
            The auxiliary class for <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyParamHelper.Param``1(StockSharp.Algo.Strategies.Strategy,System.String,``0)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1"/>.
            </summary>
            <typeparam name="T">The type of the parameter value.</typeparam>
            <param name="strategy">Strategy.</param>
            <param name="name">Parameter name.</param>
            <param name="initialValue">The initial value.</param>
            <returns>The strategy parameter.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyParamHelper.Param``1(StockSharp.Algo.Strategies.Strategy,System.String,System.String,``0)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1"/>.
            </summary>
            <typeparam name="T">The type of the parameter value.</typeparam>
            <param name="strategy">Strategy.</param>
            <param name="id">Parameter identifier.</param>
            <param name="name">Parameter name.</param>
            <param name="initialValue">The initial value.</param>
            <returns>The strategy parameter.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyParamHelper.Optimize``1(StockSharp.Algo.Strategies.StrategyParam{``0},``0,``0,``0)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1"/>.
            </summary>
            <typeparam name="T">The type of the parameter value.</typeparam>
            <param name="param">The strategy parameter.</param>
            <param name="optimizeFrom">The From value at optimization.</param>
            <param name="optimizeTo">The To value at optimization.</param>
            <param name="optimizeStep">The Increment value at optimization.</param>
            <returns>The strategy parameter.</returns>
        </member>
        <member name="M:StockSharp.Algo.Strategies.StrategyParamHelper.CanOptimize(StockSharp.Algo.Strategies.IStrategyParam,System.Collections.Generic.ISet{System.String})">
            <summary>
            Check can optimize parameter.
            </summary>
            <param name="parameter">Strategy parameter.</param>
            <param name="excludeParameters">Excluded parameters.</param>
            <returns><see langword="true" />, if can optimize the parameter, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Testing.BatchEmulation">
            <summary>
            The batch emulator of strategies.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.EmulationSettings">
            <summary>
            Emulation settings.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.EmulationConnector">
            <summary>
            The emulation connection.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.Strategies">
            <summary>
            The strategies for testing.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.IsFinished">
            <summary>
            Has the emulator ended its operation due to end of data, or it was interrupted through the <see cref="M:StockSharp.Algo.Strategies.Testing.BatchEmulation.Stop"/>method.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.CurrentProgress">
            <summary>
            The current progress of paper trade process.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.TotalProgress">
            <summary>
            The general progress of paper trade.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.State">
            <summary>
            The emulator state.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.BatchStrategies">
            <summary>
            Current tested strategies.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Testing.BatchEmulation.StateChanged">
            <summary>
            The event on change of paper trade state.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Strategies.Testing.BatchEmulation.ProgressChanged">
            <summary>
            The event of paper trade progress change.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Testing.BatchEmulation.#ctor(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio},StockSharp.Algo.Storages.IStorageRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Testing.BatchEmulation"/>.
            </summary>
            <param name="securities">Instruments, the operation will be performed with.</param>
            <param name="portfolios">Portfolios, the operation will be performed with.</param>
            <param name="storageRegistry">Market data storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Testing.BatchEmulation.#ctor(StockSharp.BusinessEntities.ISecurityProvider,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio},StockSharp.Algo.Storages.IStorageRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Testing.BatchEmulation"/>.
            </summary>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="portfolios">Portfolios, the operation will be performed with.</param>
            <param name="storageRegistry">Market data storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Testing.BatchEmulation.Start(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.Int32)">
            <summary>
            Start emulation.
            </summary>
            <param name="strategies">The strategies.</param>
            <param name="iterationCount">Iteration count.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Testing.BatchEmulation.Stop">
            <summary>
            To stop paper trading.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Testing.EmulationMarketDataModes">
            <summary>
            The data type for paper trading.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Strategies.Testing.EmulationMarketDataModes.Storage">
            <summary>
            Storage.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Strategies.Testing.EmulationMarketDataModes.Generate">
            <summary>
            Generated.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Strategies.Testing.EmulationMarketDataModes.No">
            <summary>
            None.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.Testing.EmulationSettings">
            <summary>
            Emulation settings.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.StartTime">
            <summary>
            Date in history for starting the paper trading.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.StopTime">
            <summary>
            Date in history to stop the paper trading (date is included).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.MarketTimeChangedInterval">
            <summary>
            Time change interval.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.UnrealizedPnLInterval">
            <summary>
            Unrealized profit recalculation interval.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.TradeDataMode">
            <summary>
            What trades to use.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.DepthDataMode">
            <summary>
            What market depths to use.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.OrderLogDataMode">
            <summary>
            Use orders log.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.BatchSize">
            <summary>
            Number of simultaneously tested strategies.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.CheckTradableDates">
            <summary>
            Check loading dates are they tradable.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.LogLevel">
            <summary>
            Logging level.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Testing.EmulationSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Strategies.Testing.EmulationSettings"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Testing.EmulationSettings.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            To save the state of paper trading parameters.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Strategies.Testing.EmulationSettings.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            To load the state of paper trading parameters.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Strategies.ProcessResults">
            <summary>
            Results of the trading strategy one iteration operation.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Strategies.ProcessResults.Continue">
            <summary>
            To continue the operation.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Strategies.ProcessResults.Stop">
            <summary>
            To stop the strategy operation.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Strategies.TimeFrameStrategy">
            <summary>
            The timeframe based trade strategy.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.#ctor(System.TimeSpan)">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Strategies.TimeFrameStrategy"/>.
            </summary>
            <param name="timeFrame">The strategy timeframe.</param>
        </member>
        <member name="P:StockSharp.Algo.Strategies.TimeFrameStrategy.TimeFrame">
            <summary>
            The strategy timeframe.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Strategies.TimeFrameStrategy.Interval">
            <summary>
            The strategy start-up interval. By default, it equals to <see cref="P:StockSharp.Algo.Strategies.TimeFrameStrategy.TimeFrame"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.OnStarted">
            <summary>
            The method is called when the <see cref="M:StockSharp.Algo.Strategies.Strategy.Start"/> method has been called and the <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState"/> state has been taken the <see cref="F:StockSharp.Algo.ProcessStates.Started"/> value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.OnProcess">
            <summary>
            The implementation of the trade algorithm.
            </summary>
            <returns>The result of trade algorithm one iteration operation.</returns>
        </member>
        <member name="T:StockSharp.Algo.SubscriptionMessageAdapter">
            <summary>
            Subscription counter adapter.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.SubscriptionMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.SubscriptionMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">Inner message adapter.</param>
        </member>
        <member name="P:StockSharp.Algo.SubscriptionMessageAdapter.IsRestoreOnErrorReconnect">
            <summary>
            Restore subscription on reconnect.
            </summary>
            <remarks>
            Error case like connection lost etc.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.SubscriptionMessageAdapter.IsRestoreOnNormalReconnect">
            <summary>
            Restore subscription on reconnect.
            </summary>
            <remarks>
            Normal case connect/disconnect.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.SubscriptionMessageAdapter.SupportMultipleSubscriptions">
            <summary>
            Support multiple subscriptions with duplicate parameters.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.SubscriptionMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.SubscriptionMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.SubscriptionMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.SubscriptionMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Testing.ChangeTimeIntervalMessage">
            <summary>
            Change time interval updates message.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.ChangeTimeIntervalMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.ChangeTimeIntervalMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.ChangeTimeIntervalMessage.Interval">
            <summary>
            Interval.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.ChangeTimeIntervalMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Testing.ChangeTimeIntervalMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Testing.CommissionRuleMessage">
            <summary>
            The message, containing information on the commission calculation rule.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.CommissionRuleMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.CommissionRuleMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.CommissionRuleMessage.Rule">
            <summary>
            The commission calculating rule.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.CommissionRuleMessage.PortfolioName">
            <summary>
            The portfolio name. If it is given, then <see cref="P:StockSharp.Algo.Testing.CommissionRuleMessage.Rule"/> is applied to specific portfolio.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.CommissionRuleMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Testing.CommissionRuleMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Testing.EmulationOrderCondition">
            <summary>
            <see cref="T:StockSharp.Algo.Testing.IMarketEmulator"/> order condition.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.EmulationOrderCondition.IsTakeProfit">
            <summary>
            Is take profit.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.EmulationOrderCondition.StopPrice">
            <summary>
            Stop-price.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Testing.HistorySourceMessage">
            <summary>
            Market-data message with historical source.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistorySourceMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.HistorySourceMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistorySourceMessage.GetMessages">
            <summary>
            Callback to retrieve historical data for the specified date.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Testing.BaseEmulationConnector">
            <summary>
            The base connection of emulation.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.BaseEmulationConnector.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Testing.BaseEmulationConnector"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.BaseEmulationConnector.EmulationAdapter">
            <summary>
            The adapter, executing messages in <see cref="T:StockSharp.Algo.Testing.IMarketEmulator"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.BaseEmulationConnector.RegisterTrades(StockSharp.Algo.Testing.TradeGenerator)">
            <summary>
            To register the trades generator.
            </summary>
            <param name="generator">The trades generator.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.BaseEmulationConnector.UnRegisterTrades(StockSharp.Algo.Testing.TradeGenerator)">
            <summary>
            To delete the trades generator, registered earlier through <see cref="M:StockSharp.Algo.Testing.BaseEmulationConnector.RegisterTrades(StockSharp.Algo.Testing.TradeGenerator)"/>.
            </summary>
            <param name="generator">The trades generator.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.BaseEmulationConnector.RegisterMarketDepth(StockSharp.Algo.Testing.MarketDepthGenerator)">
            <summary>
            To register the order books generator.
            </summary>
            <param name="generator">The order books generator.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.BaseEmulationConnector.UnRegisterMarketDepth(StockSharp.Algo.Testing.MarketDepthGenerator)">
            <summary>
            To delete the order books generator, earlier registered through <see cref="M:StockSharp.Algo.Testing.BaseEmulationConnector.RegisterMarketDepth(StockSharp.Algo.Testing.MarketDepthGenerator)"/>.
            </summary>
            <param name="generator">The order books generator.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.BaseEmulationConnector.RegisterOrderLog(StockSharp.Algo.Testing.OrderLogGenerator)">
            <summary>
            To register the orders log generator.
            </summary>
            <param name="generator">The orders log generator.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.BaseEmulationConnector.UnRegisterOrderLog(StockSharp.Algo.Testing.OrderLogGenerator)">
            <summary>
            To delete the orders log generator, earlier registered through <see cref="M:StockSharp.Algo.Testing.BaseEmulationConnector.RegisterOrderLog(StockSharp.Algo.Testing.OrderLogGenerator)"/>.
            </summary>
            <param name="generator">The orders log generator.</param>
        </member>
        <member name="T:StockSharp.Algo.Testing.ClearingMessage">
            <summary>
            The message about performing clearing on exchange.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.ClearingMessage.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.ClearingMessage.ClearMarketDepth">
            <summary>
            Shall order book be cleared.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.ClearingMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.ClearingMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.ClearingMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Testing.ClearingMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Algo.Testing.ClearingMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Algo.Testing.HistoryMessageAdapter">
            <summary>
            The adapter, receiving messages form the storage <see cref="T:StockSharp.Algo.Storages.IStorageRegistry"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.LoadedMessageCount">
            <summary>
            The number of loaded events.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.PostTradeMarketTimeChangedCount">
            <summary>
            The number of the event <see cref="E:StockSharp.BusinessEntities.IConnector.MarketTimeChanged"/> calls after end of trading. By default it is equal to 2.
            </summary>
            <remarks>
            It is required for activation of post-trade rules (rules, basing on events, occurring after end of trading).
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.StorageRegistry">
            <summary>
            Market data storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.Drive">
            <summary>
            The storage which is used by default. By default, <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive"/> is used.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.StorageFormat">
            <summary>
            The format of market data. <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary"/> is used by default.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.BasketStorage">
            <summary>
            The aggregator-storage.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.SecurityProvider">
            <summary>
            The provider of information about instruments.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.MarketTimeChangedInterval">
            <summary>
            The interval of message <see cref="T:StockSharp.Messages.TimeMessage"/> generation. By default, it is equal to 1 sec.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Testing.HistoryMessageAdapter.DefaultMaxMessageCount">
            <summary>
            Default value of <see cref="P:StockSharp.Algo.Testing.HistoryMessageAdapter.MaxMessageCount"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.MaxMessageCount">
            <summary>
            The maximal size of the message queue, up to which history data are read. By default, it is equal to <see cref="F:StockSharp.Algo.Testing.HistoryMessageAdapter.DefaultMaxMessageCount"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.#ctor(Ecng.Common.IdGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.HistoryMessageAdapter"/>.
            </summary>
            <param name="transactionIdGenerator">Transaction id generator.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.#ctor(Ecng.Common.IdGenerator,StockSharp.BusinessEntities.ISecurityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.HistoryMessageAdapter"/>.
            </summary>
            <param name="transactionIdGenerator">Transaction id generator.</param>
            <param name="securityProvider">The provider of information about instruments.</param>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.StartDate">
            <summary>
            Date in history for starting the paper trading.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.StopDate">
            <summary>
            Date in history to stop the paper trading (date is included).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.CheckTradableDates">
            <summary>
            Check loading dates are they tradable.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.OrderLogMarketDepthBuilders">
            <summary>
            Order book builders.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.CreateOrderLogMarketDepthBuilder(StockSharp.Messages.SecurityId)">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.CurrentTime">
            <summary>
            The current time.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.DisposeManaged">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.IsFullCandlesOnly">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.TimeFrames">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.GetTimeFrames(StockSharp.Messages.SecurityId)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.OnSendInMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.SendOutMessage">
            <summary>
            Send next outgoing message.
            </summary>
            <returns><see langword="true" />, if message was sent, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.SendOutMessage(StockSharp.Messages.Message)">
            <summary>
            Send outgoing message and raise <see cref="E:StockSharp.Messages.MessageAdapter.NewOutMessage"/> event.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Algo.Testing.EmulationMessageAdapter">
            <summary>
            The adapter, executing messages in <see cref="T:StockSharp.Algo.Testing.IMarketEmulator"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.EmulationMessageAdapter.#ctor(Ecng.Common.IdGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.EmulationMessageAdapter"/>.
            </summary>
            <param name="transactionIdGenerator">Transaction id generator.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.EmulationMessageAdapter.#ctor(StockSharp.Algo.Testing.IMarketEmulator,Ecng.Common.IdGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.EmulationMessageAdapter"/>.
            </summary>
            <param name="emulator">Paper trading.</param>
            <param name="transactionIdGenerator">Transaction id generator.</param>
        </member>
        <member name="P:StockSharp.Algo.Testing.EmulationMessageAdapter.Emulator">
            <summary>
            Paper trading.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.EmulationMessageAdapter.CurrentTime">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Testing.EmulationMessageAdapter.ProcessedMessageCount">
            <summary>
            The number of processed messages.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.EmulationMessageAdapter.IsFullCandlesOnly">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Testing.EmulationMessageAdapter.IsSupportSubscriptions">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Testing.EmulationMessageAdapter.IsSupportTakeProfit">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Algo.Testing.EmulationMessageAdapter.IsSupportStopLoss">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Testing.EmulationMessageAdapter.CreateOrderCondition">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Testing.EmulationMessageAdapter.OnSendInMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Algo.Testing.EmulationStateMessage">
            <summary>
            The message, informing about the emulator state change.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.EmulationStateMessage.StartDate">
            <summary>
            Date in history for starting the paper trading.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.EmulationStateMessage.StopDate">
            <summary>
            Date in history to stop the paper trading (date is included).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.EmulationStateMessage.State">
            <summary>
            The state been transferred.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.EmulationStateMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.EmulationStateMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.EmulationStateMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Testing.EmulationStateMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Testing.HistoryEmulationConnector">
            <summary>
            The emulation connection. It uses historical data and/or occasionally generated.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.#ctor(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.HistoryEmulationConnector"/>.
            </summary>
            <param name="securities">Instruments, which will be sent through the <see cref="E:StockSharp.BusinessEntities.IConnector.NewSecurities"/> event.</param>
            <param name="portfolios">Portfolios, which will be sent through the <see cref="E:StockSharp.BusinessEntities.IConnector.NewPortfolios"/> event.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.#ctor(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio},StockSharp.Algo.Storages.IStorageRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.HistoryEmulationConnector"/>.
            </summary>
            <param name="securities">Instruments, the operation will be performed with.</param>
            <param name="portfolios">Portfolios, the operation will be performed with.</param>
            <param name="storageRegistry">Market data storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.#ctor(StockSharp.BusinessEntities.ISecurityProvider,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio},StockSharp.Algo.Storages.IStorageRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.HistoryEmulationConnector"/>.
            </summary>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="portfolios">Portfolios, the operation will be performed with.</param>
            <param name="storageRegistry">Market data storage.</param>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.HistoryMessageAdapter">
            <summary>
            The adapter, receiving messages form the storage <see cref="T:StockSharp.Algo.Storages.IStorageRegistry"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.MaxMessageCount">
            <summary>
            The maximal size of the message queue, up to which history data are read. By default, it is equal to <see cref="F:StockSharp.Algo.Testing.HistoryMessageAdapter.DefaultMaxMessageCount"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.InitialMoney">
            <summary>
            The initial size of monetary funds on accounts.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.LoadedMessageCount">
            <summary>
            The number of loaded messages.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.ProcessedMessageCount">
            <summary>
            The number of processed messages.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.State">
            <summary>
            The emulator state.
            </summary>
        </member>
        <member name="E:StockSharp.Algo.Testing.HistoryEmulationConnector.StateChanged">
            <summary>
            The event on the emulator state change <see cref="P:StockSharp.Algo.Testing.HistoryEmulationConnector.State"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.IsFinished">
            <summary>
            Has the emulator ended its operation due to end of data, or it was interrupted through the <see cref="M:StockSharp.BusinessEntities.IConnector.Disconnect"/>method.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.MarketTimeChangedInterval">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.ClearCache">
            <summary>
            Clear cache.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.OnDisconnect">
            <summary>
            Disconnect from trading system.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.DisposeManaged">
            <summary>
            To release allocated resources. In particular, to disconnect from the trading system via <see cref="M:StockSharp.Algo.Connector.Disconnect"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.Start">
            <summary>
            To start the emulation.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.Suspend">
            <summary>
            To suspend the emulation.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.OnProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the message, containing market data.
            </summary>
            <param name="message">The message, containing market data.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.OnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
            <summary>
            Subscribe on the portfolio changes.
            </summary>
            <param name="portfolio">Portfolio for subscription.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.RegisterHistorySource(StockSharp.BusinessEntities.Security,StockSharp.Messages.MarketDataTypes,System.Object,System.Func{System.DateTimeOffset,System.Collections.Generic.IEnumerable{StockSharp.Messages.Message}})">
            <summary>
            Register historical data source.
            </summary>
            <param name="security">Instrument. If passed <see langword="null"/> the source will be applied for all subscriptions.</param>
            <param name="dataType">Data type.</param>
            <param name="arg">The parameter associated with the <paramref name="dataType"/> type. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.</param>
            <param name="getMessages">Historical data source.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.UnRegisterHistorySource(StockSharp.BusinessEntities.Security,StockSharp.Messages.MarketDataTypes,System.Object)">
            <summary>
            Unregister historical data source, previously registeted by <see cref="M:StockSharp.Algo.Testing.HistoryEmulationConnector.RegisterHistorySource(StockSharp.BusinessEntities.Security,StockSharp.Messages.MarketDataTypes,System.Object,System.Func{System.DateTimeOffset,System.Collections.Generic.IEnumerable{StockSharp.Messages.Message}})"/>.
            </summary>
            <param name="security">Instrument. If passed <see langword="null"/> the source will be removed for all subscriptions.</param>
            <param name="dataType">Data type.</param>
            <param name="arg">The parameter associated with the <paramref name="dataType"/> type. For example, <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.</param>
        </member>
        <member name="T:StockSharp.Algo.Testing.GeneratorMessage">
            <summary>
            The message about creation or deletion of the market data generator.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.GeneratorMessage.Generator">
            <summary>
            The market data generator.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.GeneratorMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.GeneratorMessage"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Testing.EmulationStates">
            <summary>
            States <see cref="T:StockSharp.Algo.Testing.HistoryEmulationConnector"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Testing.EmulationStates.Stopped">
            <summary>
            Stopped.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Testing.EmulationStates.Stopping">
            <summary>
            Stopping.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Testing.EmulationStates.Starting">
            <summary>
            Starting.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Testing.EmulationStates.Started">
            <summary>
            Working.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Testing.EmulationStates.Suspending">
            <summary>
            In the process of suspension.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.Testing.EmulationStates.Suspended">
            <summary>
            Suspended.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Testing.LastMessage">
            <summary>
            The message, informing on end of data occurrence.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.LastMessage.IsError">
            <summary>
            The data transfer is completed due to error.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.LastMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.LastMessage"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Testing.MarketDataGenerator">
            <summary>
            The market data generator.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.MarketDataGenerator.#ctor(StockSharp.Messages.SecurityId)">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Testing.MarketDataGenerator"/>.
            </summary>
            <param name="securityId">The identifier of the instrument, for which data shall be generated.</param>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.DataType">
            <summary>
            Market data type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.RandomArrayLength">
            <summary>
            The length of massive of preliminarily generated random numbers. The default is 100.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.MarketDataGenerator.Init">
            <summary>
            To initialize the generator state.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.SecurityId">
            <summary>
            The identifier of the instrument, for which data shall be generated.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.SecurityDefinition">
            <summary>
            Information about the trading instrument.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.LastGenerationTime">
            <summary>
            The time of last data generation.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.Interval">
            <summary>
            The data generation interval.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.MaxVolume">
            <summary>
            The maximal volume. The volume will be selected randomly from <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.MinVolume"/> to <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.MaxVolume"/>.
            </summary>
            <remarks>
            The default value equals 20.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.MinVolume">
            <summary>
            The maximal volume. The volume will be selected randomly from <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.MinVolume"/> to <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.MaxVolume"/>.
            </summary>
            <remarks>
            The default value is 1.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.MaxPriceStepCount">
            <summary>
            The maximal number of price increments <see cref="P:StockSharp.BusinessEntities.Security.PriceStep"/> to be returned through massive <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.Steps"/>.
            </summary>
            <remarks>
            The default value is 10.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Testing.MarketDataGenerator.Process(StockSharp.Messages.Message)">
            <summary>
            Process message.
            </summary>
            <param name="message">Message.</param>
            <returns>The result of processing. If <see langword="null" /> is returned, then generator has no sufficient data to generate new message.</returns>
        </member>
        <member name="M:StockSharp.Algo.Testing.MarketDataGenerator.OnProcess(StockSharp.Messages.Message)">
            <summary>
            Process message.
            </summary>
            <param name="message">Message.</param>
            <returns>The result of processing. If <see langword="null" /> is returned, then generator has no sufficient data to generate new message.</returns>
        </member>
        <member name="M:StockSharp.Algo.Testing.MarketDataGenerator.IsTimeToGenerate(System.DateTimeOffset)">
            <summary>
            Is new data generation required.
            </summary>
            <param name="time">The current time.</param>
            <returns><see langword="true" />, if data shall be generated, Otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.Volumes">
            <summary>
            The massive of random volumes in the range from <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.MinVolume"/> to <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.MaxVolume"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.Steps">
            <summary>
            The massive of random price increments in the range from 1 to <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.MaxPriceStepCount"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Testing.MarketDepthGenerator">
            <summary>
            The order book generator using random method.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.MarketDepthGenerator.#ctor(StockSharp.Messages.SecurityId)">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Testing.MarketDepthGenerator"/>.
            </summary>
            <param name="securityId">The identifier of the instrument, for which data shall be generated.</param>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.DataType">
            <summary>
            Market data type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.UseTradeVolume">
            <summary>
            To use to generate best quotes in the order book volume of history trades.
            </summary>
            <remarks>
            The default value is <see langword="true" />.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MinSpreadStepCount">
            <summary>
            The minimal value of spread between the best quotes in units of price increments number. The spread value will be selected randomly between <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MinSpreadStepCount"/> and <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxSpreadStepCount"/>.
            </summary>
            <remarks>
            The default value is 1.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxSpreadStepCount">
            <summary>
            The maximal value of spread between the best quotes in units of price increments number. The spread value will be selected randomly between <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MinSpreadStepCount"/> and <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxSpreadStepCount"/>.
            </summary>
            <remarks>
            The default value is <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxBidsDepth">
            <summary>
            The maximal depth of bids.
            </summary>
            <remarks>
            The default value is 10.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxAsksDepth">
            <summary>
            The maximal depth of offers.
            </summary>
            <remarks>
            The default value is 10.
            </remarks>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.GenerateDepthOnEachTrade">
            <summary>
            Shall order books be generated after each trade. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxGenerations">
            <summary>
            The maximal number of generations after last occurrence of source data for the order book.
            </summary>
            <remarks>
            The default value equals 20.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.Testing.MarketDepthGenerator.CreateQuote(System.Decimal,StockSharp.Messages.Sides)">
            <summary>
            To create the quote using random method.
            </summary>
            <param name="startPrice">The initial price, based on which a quote price shall be got using random method.</param>
            <param name="side">The quote direction.</param>
            <returns>The random quote.</returns>
        </member>
        <member name="T:StockSharp.Algo.Testing.TrendMarketDepthGenerator">
            <summary>
            The order book generator, accounting for trades sequence.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.#ctor(StockSharp.Messages.SecurityId)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.TrendMarketDepthGenerator"/>.
            </summary>
            <param name="securityId">The identifier of the instrument, for which data shall be generated.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.Init">
            <summary>
            To initialize the generator state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.OnProcess(StockSharp.Messages.Message)">
            <summary>
            Process message.
            </summary>
            <param name="message">Message.</param>
            <returns>The result of processing. If <see langword="null" /> is returned, then generator has no sufficient data to generate new message.</returns>
        </member>
        <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Testing.TrendMarketDepthGenerator"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Testing.ExecutionLogConverter">
            <summary>
            The converter of <see cref="T:StockSharp.Messages.QuoteChangeMessage"/> and <see cref="T:StockSharp.Messages.ExecutionMessage"/> type messages (associated with tick trade) into single stream <see cref="T:StockSharp.Messages.ExecutionMessage"/> (associated with orders log).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.ExecutionLogConverter.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.ExecutionLogConverter.ToExecutionLog(StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            To convert quotes.
            </summary>
            <param name="message">Quotes.</param>
            <returns>Stream <see cref="T:StockSharp.Messages.ExecutionMessage"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.Testing.ExecutionLogConverter.ToExecutionLog(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To convert the tick trade.
            </summary>
            <param name="tick">Tick trade.</param>
            <returns>Stream <see cref="T:StockSharp.Messages.ExecutionMessage"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.Testing.ExecutionLogConverter.ToExecutionLog(StockSharp.Messages.Level1ChangeMessage)">
            <summary>
            To convert first level of market data.
            </summary>
            <param name="message">Level 1.</param>
            <returns>Stream <see cref="T:StockSharp.Messages.Message"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.Testing.ExecutionLogConverter.ToExecutionLog(StockSharp.Messages.OrderMessage,System.Decimal)">
            <summary>
            Convert transaction.
            </summary>
            <param name="message">Transaction.</param>
            <param name="quotesVolume">Order book volume.</param>
            <returns>Stream <see cref="T:StockSharp.Messages.ExecutionMessage"/>.</returns>
        </member>
        <member name="T:StockSharp.Algo.Testing.MarketEmulator">
            <summary>
            Paper trading.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.MarketEmulator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.MarketEmulator"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulator.Settings">
            <summary>
            Emulator settings.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulator.OrderIdGenerator">
            <summary>
            The generator of identifiers for orders.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulator.TradeIdGenerator">
            <summary>
            The generator of identifiers for trades.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.MarketEmulator.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="E:StockSharp.Algo.Testing.MarketEmulator.NewOutMessage">
            <summary>
            New message event.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Testing.MarketEmulatorSettings">
            <summary>
            Settings of exchange emulator.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.MarketEmulatorSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.MarketEmulatorSettings"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.MatchOnTouch">
            <summary>
            At emulation of clearing by trades, to perform clearing of orders, when trade price touches the order price (is equal to order price), rather than only when the trade price is better than order price. Is On by default (optimistic scenario).
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.DepthExpirationTime">
            <summary>
            The maximal time, during which the order book is in the emulator, if no renewal during this time, the order book is deleted, This feature may be used to remove old order books if the are holes in data. By default is equal to 1 day.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.Failing">
            <summary>
            The percentage value of new orders registration error. The value may be from 0 (not a single error) to 100. By default is Off.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.Latency">
            <summary>
            The minimal value of the registered orders delay. By default, it is <see cref="F:System.TimeSpan.Zero"/>, which means instant adoption of registered orders by  exchange.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.IsSupportAtomicReRegister">
            <summary>
            Gets a value indicating whether the re-registration orders as a single transaction. By default is enabled.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.BufferTime">
            <summary>
            Responses shall be sent in intervals by whole package. The network delay and buffered operation of exchange are emulated. The default is 0 ms.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.InitialOrderId">
            <summary>
            The number, starting at which the emulator will generate identifiers for orders <see cref="P:StockSharp.BusinessEntities.Order.Id"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.InitialTradeId">
            <summary>
            The number, starting at which the emulator will generate identifiers fir trades <see cref="P:StockSharp.BusinessEntities.Trade.Id"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.InitialTransactionId">
            <summary>
            The number, starting at which the emulator will generate numbers for order trades <see cref="P:StockSharp.BusinessEntities.Order.TransactionId"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.SpreadSize">
            <summary>
            The size of spread in price increments. It used at determination of spread for generation of order book from tick trades. By default equals to 2.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.MaxDepth">
            <summary>
            The maximal depth of order book, which will be generated from ticks. It used, if there is no order book history. By default equals to 5.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.VolumeMultiplier">
            <summary>
            The number of volume increments, at which the order exceeds the tick trade. It used at testing on tick trades. By default equals to 2.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.PortfolioRecalcInterval">
            <summary>
            The interval for recalculation of data on portfolios. If interval equals <see cref="F:System.TimeSpan.Zero"/>, recalculation is not performed.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.ConvertTime">
            <summary>
            To convert time for orders and trades into exchange time. By default, it is disabled.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.TimeZone">
            <summary>
            Information about the time zone where the exchange is located.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.PriceLimitOffset">
            <summary>
            The price shift from the previous trade, determining boundaries of maximal and minimal prices for the next session. Used only if there is no saved information <see cref="T:StockSharp.Messages.Level1ChangeMessage"/>. By default, it equals to 40%.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.IncreaseDepthVolume">
            <summary>
            To add the additional volume into order book at registering orders with greater volume. By default, it is enabled.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.CheckTradingState">
            <summary>
            Check trading state.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.CheckMoney">
            <summary>
            Check money balance.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.MarketEmulatorSettings.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            To save the state of paper trading parameters.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.MarketEmulatorSettings.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            To load the state of paper trading parameters.
            </summary>
            <param name="storage">Storage.</param>
        </member>
        <member name="T:StockSharp.Algo.Testing.OrderLogGenerator">
            <summary>
            The orders log generator using random method.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.#ctor(StockSharp.Messages.SecurityId)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.OrderLogGenerator"/>.
            </summary>
            <param name="securityId">The identifier of the instrument, for which data shall be generated.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.#ctor(StockSharp.Messages.SecurityId,StockSharp.Algo.Testing.TradeGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.OrderLogGenerator"/>.
            </summary>
            <param name="securityId">The identifier of the instrument, for which data shall be generated.</param>
            <param name="tradeGenerator">Tick trades generator using random method.</param>
        </member>
        <member name="P:StockSharp.Algo.Testing.OrderLogGenerator.DataType">
            <summary>
            Market data type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.OrderLogGenerator.TradeGenerator">
            <summary>
            Tick trades generator using random method.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.OrderLogGenerator.IdGenerator">
            <summary>
            The order identifier generator <see cref="P:StockSharp.BusinessEntities.Order.Id"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.Init">
            <summary>
            To initialize the generator state.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.Process(StockSharp.Messages.Message)">
            <summary>
            Process message.
            </summary>
            <param name="message">Message.</param>
            <returns>The result of processing. If <see langword="null" /> is returned, then generator has no sufficient data to generate new message.</returns>
        </member>
        <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.OnProcess(StockSharp.Messages.Message)">
            <summary>
            Process message.
            </summary>
            <param name="message">Message.</param>
            <returns>The result of processing. If <see langword="null" /> is returned, then generator has no sufficient data to generate new message.</returns>
        </member>
        <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Testing.MarketDataGenerator"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.Testing.IMarketEmulator">
            <summary>
            The interface, describing paper trading.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.IMarketEmulator.Settings">
            <summary>
            Emulator settings.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Testing.IRealTimeEmulationMarketDataAdapter">
            <summary>
            The interface of the real time market data adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.IRealTimeEmulationMarketDataAdapter.OwnAdapter">
            <summary>
            Track the connection <see cref="P:StockSharp.Messages.IMessageAdapterWrapper.InnerAdapter" /> lifetime.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Testing.RealTimeEmulationTrader`1">
            <summary>
            The simulation connection, intended for strategy testing with real connection to trading system through <see cref="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnderlyngMarketDataAdapter"/>, but without real registering orders on stock. Execution of orders and their trades are emulated by connection, using information by order books, coming from real connection.
            </summary>
            <typeparam name="TUnderlyingMarketDataAdapter">The type <see cref="T:StockSharp.Messages.IMessageAdapter"/>, through which market data will be received.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.RealTimeEmulationTrader`1"/>.
            </summary>
            <param name="underlyngMarketDataAdapter"><see cref="T:StockSharp.Messages.IMessageAdapter"/>, through which market data will be got.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.#ctor(`0,StockSharp.BusinessEntities.Portfolio,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.RealTimeEmulationTrader`1"/>.
            </summary>
            <param name="underlyngMarketDataAdapter"><see cref="T:StockSharp.Messages.IMessageAdapter"/>, through which market data will be got.</param>
            <param name="portfolio">The portfolio to be used to register orders. If value is not given, the portfolio with default name Simulator will be created.</param>
            <param name="ownAdapter">Track the connection <paramref name="underlyngMarketDataAdapter" /> lifetime.</param>
        </member>
        <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnderlyngMarketDataAdapter">
            <summary>
            <see cref="T:StockSharp.Messages.IMessageAdapter"/>, through which market data will be got.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.OnProcessMessage(StockSharp.Messages.Message)">
            <summary>
            To process the message, containing market data.
            </summary>
            <param name="message">The message, containing market data.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.DisposeManaged">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Testing.TradeGenerator">
            <summary>
            Tick trades generator using random method.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.TradeGenerator.#ctor(StockSharp.Messages.SecurityId)">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.Testing.TradeGenerator"/>.
            </summary>
            <param name="securityId">The identifier of the instrument, for which data shall be generated.</param>
        </member>
        <member name="P:StockSharp.Algo.Testing.TradeGenerator.DataType">
            <summary>
            Market data type.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.Testing.TradeGenerator.IdGenerator">
            <summary>
            The trade identifier generator <see cref="P:StockSharp.BusinessEntities.Trade.Id"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.Testing.RandomWalkTradeGenerator">
            <summary>
            The trade generator based on normal distribution.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.RandomWalkTradeGenerator.#ctor(StockSharp.Messages.SecurityId)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.Testing.RandomWalkTradeGenerator"/>.
            </summary>
            <param name="securityId">The identifier of the instrument, for which data shall be generated.</param>
        </member>
        <member name="P:StockSharp.Algo.Testing.RandomWalkTradeGenerator.GenerateOriginSide">
            <summary>
            To generate the value for <see cref="P:StockSharp.Messages.ExecutionMessage.OriginSide"/>. By default is disabled.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.Testing.RandomWalkTradeGenerator.OnProcess(StockSharp.Messages.Message)">
            <summary>
            Process message.
            </summary>
            <param name="message">Message.</param>
            <returns>The result of processing. If <see langword="null" /> is returned, then generator has no sufficient data to generate new message.</returns>
        </member>
        <member name="M:StockSharp.Algo.Testing.RandomWalkTradeGenerator.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Algo.Testing.RandomWalkTradeGenerator"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Algo.TimeQuoteChange">
            <summary>
            The quote with the time mark. It used for CSV files.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.TimeQuoteChange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.TimeQuoteChange"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.TimeQuoteChange.#ctor(StockSharp.Messages.QuoteChange,StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Algo.TimeQuoteChange"/>.
            </summary>
            <param name="quote">The quote, from which changes will be copied.</param>
            <param name="message">The message with quotes.</param>
        </member>
        <member name="P:StockSharp.Algo.TimeQuoteChange.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.TimeQuoteChange.ServerTime">
            <summary>
            The server time mark.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.TimeQuoteChange.LocalTime">
            <summary>
            The local time mark.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.MarketRuleHelper">
            <summary>
            Extension class for <see cref="T:StockSharp.Algo.IMarketRule"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.OrderRule`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenRegistered(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of successful order registration on exchange.
            </summary>
            <param name="order">The order to be traced for the event of successful registration.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenPartiallyMatched(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of order partial matching.
            </summary>
            <param name="order">The order to be traced for partial matching event.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenRegisterFailed(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a for the event of order unsuccessful registration on exchange.
            </summary>
            <param name="order">The order to be traced for unsuccessful registration event.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCancelFailed(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of unsuccessful order cancelling on exchange.
            </summary>
            <param name="order">The order to be traced for unsuccessful cancelling event.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCanceled(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the order cancelling event.
            </summary>
            <param name="order">The order to be traced for cancelling event.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMatched(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of order fully matching.
            </summary>
            <param name="order">The order to be traced for the fully matching event.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the order change event.
            </summary>
            <param name="order">The order to be traced for the change event.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewTrade(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of trade occurrence for the order.
            </summary>
            <param name="order">The order to be traced for trades occurrence events.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenAllTrades(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of all trades occurrence for the order.
            </summary>
            <param name="order">The order to be traced for all trades occurrence event.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenProfitMore(StockSharp.BusinessEntities.Order,StockSharp.Messages.Unit,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the order's profit more on offset.
            </summary>
            <param name="order">The order to be traced for profit.</param>
            <param name="profitOffset">Profit offset.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenLossMore(StockSharp.BusinessEntities.Order,StockSharp.Messages.Unit,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the order's loss more on offset.
            </summary>
            <param name="order">The order to be traced for loss.</param>
            <param name="profitOffset">Loss offset.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of change portfolio .
            </summary>
            <param name="portfolio">The portfolio to be traced for the event of change.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMoneyLess(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of money decrease in portfolio below the specific level.
            </summary>
            <param name="portfolio">The portfolio to be traced for the event of money decrease below the specific level.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <param name="money">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMoneyMore(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of money increase in portfolio above the specific level.
            </summary>
            <param name="portfolio">The portfolio to be traced for the event of money increase above the specific level.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <param name="money">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenLess(StockSharp.BusinessEntities.Position,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of position decrease below the specific level.
            </summary>
            <param name="position">The position to be traced for the event of decrease below the specific level.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <param name="value">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMore(StockSharp.BusinessEntities.Position,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of position increase above the specific level.
            </summary>
            <param name="position">The position to be traced of the event of increase above the specific level.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <param name="value">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.Changed(StockSharp.BusinessEntities.Position,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the position change event.
            </summary>
            <param name="position">The position to be traced for the change event.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the instrument change event.
            </summary>
            <param name="security">The instrument to be traced for changes.</param>
            <param name="connector">Connection to the trading system.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewTrade(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of new trade occurrence for the instrument.
            </summary>
            <param name="security">The instrument to be traced for new trade occurrence event.</param>
            <param name="connector">Connection to the trading system.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewOrderLogItem(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of new notes occurrence in the orders log for instrument.
            </summary>
            <param name="security">The instrument to be traced for the event of new notes occurrence in the orders log.</param>
            <param name="connector">Connection to the trading system.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMarketDepthChanged(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of order book change by instrument.
            </summary>
            <param name="security">The instrument to be traced for the event of order book change by instrument.</param>
            <param name="connector">Connection to the trading system.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMarketDepthChanged(StockSharp.Algo.BasketSecurity,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of order book change by instruments basket.
            </summary>
            <param name="security">Instruments basket to be traced for the event of order books change by internal instruments.</param>
            <param name="connector">Connection to the trading system.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceMore(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of excess of the best bid of specific level.
            </summary>
            <param name="security">The instrument to be traced for the event of excess of the best bid of specific level.</param>
            <param name="connector">Connection to the trading system.</param>
            <param name="price">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceLess(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of dropping the best bid below the specific level.
            </summary>
            <param name="security">The instrument to be traced for the event of dropping the best bid below the specific level.</param>
            <param name="connector">Connection to the trading system.</param>
            <param name="price">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceMore(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of excess of the best offer of the specific level.
            </summary>
            <param name="security">The instrument to be traced for the event of excess of the best offer of the specific level.</param>
            <param name="connector">Connection to the trading system.</param>
            <param name="price">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceLess(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of dropping the best offer below the specific level.
            </summary>
            <param name="security">The instrument to be traced for the event of dropping the best offer below the specific level.</param>
            <param name="connector">Connection to the trading system.</param>
            <param name="price">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenLastTradePriceMore(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector,StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of increase of the last trade price above the specific level.
            </summary>
            <param name="security">The instrument to be traced for the event of increase of the last trade price above the specific level.</param>
            <param name="connector">Connection to the trading system.</param>
            <param name="provider">The market data provider.</param>
            <param name="price">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenLastTradePriceLess(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector,StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of reduction of the last trade price below the specific level.
            </summary>
            <param name="security">The instrument to be traced for the event of reduction of the last trade price below the specific level.</param>
            <param name="connector">Connection to the trading system.</param>
            <param name="provider">The market data provider.</param>
            <param name="price">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenTimeCome(StockSharp.BusinessEntities.IConnector,System.DateTimeOffset[])">
            <summary>
            To create a rule, activated at the exact time, specified through <paramref name="times" />.
            </summary>
            <param name="connector">Connection to the trading system.</param>
            <param name="times">The exact time. Several values may be sent.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenTimeCome(StockSharp.BusinessEntities.IConnector,System.Collections.Generic.IEnumerable{System.DateTimeOffset})">
            <summary>
            To create a rule, activated at the exact time, specified through <paramref name="times" />.
            </summary>
            <param name="connector">Connection to the trading system.</param>
            <param name="times">The exact time. Several values may be sent.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.BusinessEntities.MarketDepth)">
            <summary>
            To create a rule for the order book change event.
            </summary>
            <param name="depth">The order book to be traced for change event.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenSpreadMore(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of order book spread size increase on a specific value.
            </summary>
            <param name="depth">The order book to be traced for the spread change event.</param>
            <param name="price">The shift value.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenSpreadLess(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of order book spread size decrease on a specific value.
            </summary>
            <param name="depth">The order book to be traced for the spread change event.</param>
            <param name="price">The shift value.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceMore(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of the best bid increase on a specific value.
            </summary>
            <param name="depth">The order book to be traced for the event of the best bid increase on a specific value.</param>
            <param name="price">The shift value.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceLess(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of the best bid decrease on a specific value.
            </summary>
            <param name="depth">The order book to be traced for the event of the best bid decrease on a specific value.</param>
            <param name="price">The shift value.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceMore(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of the best offer increase on a specific value.
            </summary>
            <param name="depth">The order book to be traced for the event of the best offer increase on a specific value.</param>
            <param name="price">The shift value.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceLess(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of the best offer decrease on a specific value.
            </summary>
            <param name="depth">The order book to be traced for the event of the best offer decrease on a specific value.</param>
            <param name="price">The shift value.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenClosePriceMore(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of candle closing price excess above a specific level.
            </summary>
            <param name="candleManager">The candles manager.</param>
            <param name="candle">The candle to be traced for the event of candle closing price excess above a specific level.</param>
            <param name="price">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenClosePriceLess(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of candle closing price reduction below a specific level.
            </summary>
            <param name="candleManager">The candles manager.</param>
            <param name="candle">The candle to be traced for the event of candle closing price reduction below a specific level.</param>
            <param name="price">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenTotalVolumeMore(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of candle total volume excess above a specific level.
            </summary>
            <param name="candleManager">The candles manager.</param>
            <param name="candle">The candle to be traced for the event of candle total volume excess above a specific level.</param>
            <param name="volume">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCurrentCandleTotalVolumeMore(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,StockSharp.Messages.Unit)">
            <summary>
            To create a rule for the event of candle total volume excess above a specific level.
            </summary>
            <param name="candleManager">The candles manager.</param>
            <param name="series">Candles series, from which a candle will be taken.</param>
            <param name="volume">The level. If the <see cref="P:StockSharp.Messages.Unit.Type"/> type equals to <see cref="F:StockSharp.Messages.UnitTypes.Limit"/>, specified price is set. Otherwise, shift value is specified.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCandlesStarted(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To create a rule for the event of new candles occurrence.
            </summary>
            <param name="candleManager">The candles manager.</param>
            <param name="series">Candles series to be traced for new candles.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCandlesChanged(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To create a rule for candle change event.
            </summary>
            <param name="candleManager">The candles manager.</param>
            <param name="series">Candles series to be traced for changed candles.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCandlesFinished(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To create a rule for candles end event.
            </summary>
            <param name="candleManager">The candles manager.</param>
            <param name="series">Candles series to be traced for end of candle.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To create a rule for the event of candles occurrence, change and end.
            </summary>
            <param name="candleManager">The candles manager.</param>
            <param name="series">Candles series to be traced for candles.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle)">
            <summary>
            To create a rule for candle change event.
            </summary>
            <param name="candleManager">The candles manager.</param>
            <param name="candle">The candle to be traced for change.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenFinished(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle)">
            <summary>
            To create a rule for candle end event.
            </summary>
            <param name="candleManager">The candles manager.</param>
            <param name="candle">The candle to be traced for end.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenPartiallyFinished(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle,StockSharp.BusinessEntities.IConnector,System.Decimal)">
            <summary>
            To create a rule for the event of candle partial end.
            </summary>
            <param name="candleManager">The candles manager.</param>
            <param name="candle">The candle to be traced for partial end.</param>
            <param name="connector">Connection to the trading system.</param>
            <param name="percent">The percentage of candle completion.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenPartiallyFinishedCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,StockSharp.BusinessEntities.IConnector,System.Decimal)">
            <summary>
            To create a rule for the event of candle partial end.
            </summary>
            <param name="candleManager">The candles manager.</param>
            <param name="series">The candle series to be traced for candle partial end.</param>
            <param name="connector">Connection to the trading system.</param>
            <param name="percent">The percentage of candle completion.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenIntervalElapsed(StockSharp.BusinessEntities.IConnector,System.TimeSpan)">
            <summary>
            To create a rule for the event <see cref="E:StockSharp.BusinessEntities.IConnector.MarketTimeChanged"/>, activated after expiration of <paramref name="interval" />.
            </summary>
            <param name="connector">Connection to the trading system.</param>
            <param name="interval">Interval.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewMyTrade(StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of new trade occurrences.
            </summary>
            <param name="connector">The connection to be traced for trades occurrences.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewOrder(StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of new orders occurrences.
            </summary>
            <param name="connector">The connection to be traced for orders occurrences.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenConnected(StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of connection established.
            </summary>
            <param name="connector">The connection to be traced for state.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenDisconnected(StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of disconnection.
            </summary>
            <param name="connector">The connection to be traced for state.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.WhenConnectionLost(StockSharp.BusinessEntities.IConnector)">
            <summary>
            To create a rule for the event of connection lost.
            </summary>
            <param name="connector">The connection to be traced for state.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.Apply(StockSharp.Algo.IMarketRule)">
            <summary>
            To form a rule (include <see cref="P:StockSharp.Algo.IMarketRule.IsReady"/>).
            </summary>
            <param name="rule">Rule.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.Apply(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRuleContainer)">
            <summary>
            To form a rule (include <see cref="P:StockSharp.Algo.IMarketRule.IsReady"/>).
            </summary>
            <param name="rule">Rule.</param>
            <param name="container">The rules container.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.Apply``2(StockSharp.Algo.MarketRule{``0,``1})">
            <summary>
            To form a rule (include <see cref="P:StockSharp.Algo.IMarketRule.IsReady"/>).
            </summary>
            <typeparam name="TToken">The type of token.</typeparam>
            <typeparam name="TArg">The type of argument, accepted by the rule.</typeparam>
            <param name="rule">Rule.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.Apply``2(StockSharp.Algo.MarketRule{``0,``1},StockSharp.Algo.IMarketRuleContainer)">
            <summary>
            To form a rule (include <see cref="P:StockSharp.Algo.IMarketRule.IsReady"/>).
            </summary>
            <typeparam name="TToken">The type of token.</typeparam>
            <typeparam name="TArg">The type of argument, accepted by the rule.</typeparam>
            <param name="rule">Rule.</param>
            <param name="container">The rules container.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.ActiveRule(StockSharp.Algo.IMarketRuleContainer,StockSharp.Algo.IMarketRule,System.Func{System.Boolean})">
            <summary>
            To activate the rule.
            </summary>
            <param name="container">The rules container.</param>
            <param name="rule">Rule.</param>
            <param name="process">The handler.</param>
        </member>
        <member name="F:StockSharp.Algo.MarketRuleHelper.DefaultRuleContainer">
            <summary>
            The container of rules, which will be applied by default to all rules, not included into strategy.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.SuspendRules(System.Action)">
            <summary>
            To process rules in suspended mode (for example, create several rules and start them up simultaneously). After completion of method operation all rules, attached to the container resume their activity.
            </summary>
            <param name="action">The action to be processed at suspended rules. For example, to add several rules simultaneously.</param>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.SuspendRules(StockSharp.Algo.IMarketRuleContainer,System.Action)">
            <summary>
            To process rules in suspended mode (for example, create several rules and start them up simultaneously). After completion of method operation all rules, attached to the container resume their activity.
            </summary>
            <param name="container">The rules container.</param>
            <param name="action">The action to be processed at suspended rules. For example, to add several rules simultaneously.</param>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.TryRemoveRule(StockSharp.Algo.IMarketRuleContainer,StockSharp.Algo.IMarketRule,System.Boolean)">
            <summary>
            To delete a rule. If a rule is executed at the time when this method is called, it will not be deleted.
            </summary>
            <param name="container">The rules container.</param>
            <param name="rule">Rule.</param>
            <param name="checkCanFinish">To check the possibility of rule suspension.</param>
            <returns><see langword="true" />, if a rule was successfully deleted, <see langword="false" />, if a rule cannot be currently deleted.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.TryRemoveWithExclusive(StockSharp.Algo.IMarketRuleContainer,StockSharp.Algo.IMarketRule)">
            <summary>
            To delete the rule and all opposite rules. If the rule is executed at the time when this method is called, it will not be deleted.
            </summary>
            <param name="container">The rules container.</param>
            <param name="rule">Rule.</param>
            <returns><see langword="true" />, if rule was removed, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.Exclusive(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule)">
            <summary>
            To make rules mutually exclusive.
            </summary>
            <param name="rule1">First rule.</param>
            <param name="rule2">Second rule.</param>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.Or(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule[])">
            <summary>
            To combine rules by OR condition.
            </summary>
            <param name="rule">First rule.</param>
            <param name="rules">Additional rules.</param>
            <returns>Combined rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.Or(System.Collections.Generic.IEnumerable{StockSharp.Algo.IMarketRule})">
            <summary>
            To combine rules by OR condition.
            </summary>
            <param name="rules">Rules.</param>
            <returns>Combined rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.Or``2(StockSharp.Algo.MarketRule{``0,``1},StockSharp.Algo.MarketRule{``0,``1}[])">
            <summary>
            To combine rules by OR condition.
            </summary>
            <typeparam name="TToken">The type of token.</typeparam>
            <typeparam name="TArg">The type of argument, accepted by the rule.</typeparam>
            <param name="rule">First rule.</param>
            <param name="rules">Additional rules.</param>
            <returns>Combined rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.And(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule[])">
            <summary>
            To combine rules by AND condition.
            </summary>
            <param name="rule">First rule.</param>
            <param name="rules">Additional rules.</param>
            <returns>Combined rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.And(System.Collections.Generic.IEnumerable{StockSharp.Algo.IMarketRule})">
            <summary>
            To combine rules by AND condition.
            </summary>
            <param name="rules">Rules.</param>
            <returns>Combined rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.And``2(StockSharp.Algo.MarketRule{``0,``1},StockSharp.Algo.MarketRule{``0,``1}[])">
            <summary>
            To combine rules by AND condition.
            </summary>
            <typeparam name="TToken">The type of token.</typeparam>
            <typeparam name="TArg">The type of argument, accepted by the rule.</typeparam>
            <param name="rule">First rule.</param>
            <param name="rules">Additional rules.</param>
            <returns>Combined rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.UpdateName``1(``0,System.String)">
            <summary>
            To assign the rule a new name <see cref="P:StockSharp.Algo.IMarketRule.Name"/>.
            </summary>
            <typeparam name="TRule">The type of the rule.</typeparam>
            <param name="rule">Rule.</param>
            <param name="name">The rule new name.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.UpdateLogLevel``1(``0,StockSharp.Logging.LogLevels)">
            <summary>
            To set the logging level.
            </summary>
            <typeparam name="TRule">The type of the rule.</typeparam>
            <param name="rule">Rule.</param>
            <param name="level">The level, on which logging is performed.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.Suspend``1(``0,System.Boolean)">
            <summary>
            To suspend or resume the rule.
            </summary>
            <typeparam name="TRule">The type of the rule.</typeparam>
            <param name="rule">Rule.</param>
            <param name="suspend"><see langword="true" /> - suspend, <see langword="false" /> - resume.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.Once``1(``0)">
            <summary>
            To make the rule one-time rule (will be called only once).
            </summary>
            <typeparam name="TRule">The type of the rule.</typeparam>
            <param name="rule">Rule.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRuleHelper.AddRuleLog(StockSharp.Algo.IMarketRuleContainer,StockSharp.Logging.LogLevels,StockSharp.Algo.IMarketRule,System.String,System.Object[])">
            <summary>
            To write the message from the rule.
            </summary>
            <param name="container">The rules container.</param>
            <param name="level">The level of the log message.</param>
            <param name="rule">Rule.</param>
            <param name="message">Text message.</param>
            <param name="args">Text message settings. Used if a message is the format string. For details, see <see cref="M:System.String.Format(System.String,System.Object[])"/>.</param>
        </member>
        <member name="T:StockSharp.Algo.IMarketRule">
            <summary>
            The interface of the rule, activating action at occurrence of market condition.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IMarketRule.Name">
            <summary>
            The name of the rule.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IMarketRule.Container">
            <summary>
            The rules container.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IMarketRule.LogLevel">
            <summary>
            The level to perform this rule logging.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IMarketRule.IsSuspended">
            <summary>
            Is the rule suspended.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IMarketRule.IsReady">
            <summary>
            Is the rule formed.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IMarketRule.IsActive">
            <summary>
            Is the rule currently activated.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IMarketRule.Token">
            <summary>
            Token-rules, it is associated with (for example, for rule <see cref="M:StockSharp.Algo.MarketRuleHelper.WhenRegistered(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)"/> the order will be a token). If rule is not associated with anything, <see langword="null" /> will be returned.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.IMarketRule.ExclusiveRules">
            <summary>
            Rules, opposite to given rule. They are deleted automatically at activation of this rule.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.IMarketRule.Until(System.Func{System.Boolean})">
            <summary>
            To make the rule periodical (will be called until <paramref name="canFinish" /> returns <see langword="true" />).
            </summary>
            <param name="canFinish">The criteria for end of periodicity.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.IMarketRule.Do(System.Action)">
            <summary>
            To add the action, activated at occurrence of condition.
            </summary>
            <param name="action">Action.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.IMarketRule.Do(System.Action{System.Object})">
            <summary>
            To add the action, activated at occurrence of condition.
            </summary>
            <param name="action">The action, taking a value.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.IMarketRule.Do``1(System.Func{``0})">
            <summary>
            To add the action, returning result, activated at occurrence of condition.
            </summary>
            <typeparam name="TResult">The type of returned result.</typeparam>
            <param name="action">The action, returning a result.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.IMarketRule.CanFinish">
            <summary>
            Can the rule be ended.
            </summary>
            <returns><see langword="true" />, if rule is not required any more. Otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:StockSharp.Algo.MarketRule`2">
            <summary>
            The rule, activating action at market condition occurrence.
            </summary>
            <typeparam name="TToken">The type of token.</typeparam>
            <typeparam name="TArg">The type of accepted argument.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.MarketRule`2.#ctor(`0)">
            <summary>
            Initialize <see cref="T:StockSharp.Algo.MarketRule`2"/>.
            </summary>
            <param name="token">Token rules.</param>
        </member>
        <member name="M:StockSharp.Algo.MarketRule`2.CanFinish">
            <summary>
            Can the rule be ended.
            </summary>
            <returns><see langword="true" />, if rule is not required any more. Otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:StockSharp.Algo.MarketRule`2.Name">
            <summary>
            The name of the rule.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.MarketRule`2.LogLevel">
            <summary>
            The level, at which logging of this rule is performed. The default is <see cref="F:StockSharp.Logging.LogLevels.Inherit"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.MarketRule`2.IsSuspended">
            <summary>
            Is the rule suspended.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.MarketRule`2.Token">
            <summary>
            Token-rules, it is associated with (for example, for rule <see cref="M:StockSharp.Algo.MarketRuleHelper.WhenRegistered(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)"/> the order will be a token). If rule is not associated with anything, <see langword="null" /> will be returned.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.MarketRule`2.ExclusiveRules">
            <summary>
            Rules, opposite to given rule. They are deleted automatically at activation of this rule.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.MarketRule`2.Container">
            <summary>
            The rules container.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.MarketRule`2.Until(System.Func{System.Boolean})">
            <summary>
            To make the rule periodical (will be called until <paramref name="canFinish" /> returns <see langword="true" />).
            </summary>
            <param name="canFinish">The criteria for end of periodicity.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRule`2.Do(System.Action{`1})">
            <summary>
            To add the action, activated at occurrence of condition.
            </summary>
            <param name="action">Action.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRule`2.Do(System.Action{StockSharp.Algo.MarketRule{`0,`1},`1})">
            <summary>
            To add the action, activated at occurrence of condition.
            </summary>
            <param name="action">Action.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRule`2.Do``1(System.Func{`1,``0})">
            <summary>
            To add the action, returning result, activated at occurrence of condition.
            </summary>
            <typeparam name="TResult">The type of returned result.</typeparam>
            <param name="action">The action, returning a result.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRule`2.Do``1(System.Func{StockSharp.Algo.MarketRule{`0,`1},`1,``0})">
            <summary>
            To add the action, returning result, activated at occurrence of condition.
            </summary>
            <typeparam name="TResult">The type of returned result.</typeparam>
            <param name="action">The action, returning a result.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRule`2.Do(System.Action)">
            <summary>
            To add the action, activated at occurrence of condition.
            </summary>
            <param name="action">Action.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRule`2.Do``1(System.Func{``0})">
            <summary>
            To add the action, returning result, activated at occurrence of condition.
            </summary>
            <typeparam name="TResult">The type of returned result.</typeparam>
            <param name="action">The action, returning a result.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRule`2.Activated(System.Action)">
            <summary>
            To add the processor, which will be called at action activation.
            </summary>
            <param name="handler">The handler.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRule`2.Activated``1(System.Action{``0})">
            <summary>
            To add the processor, accepting argument from <see cref="M:StockSharp.Algo.MarketRule`2.Do``1(System.Func{``0})"/>, which will be called at action activation.
            </summary>
            <typeparam name="TResult">The type of result, returned from the processor.</typeparam>
            <param name="handler">The handler.</param>
            <returns>Rule.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRule`2.Activate">
            <summary>
            To activate the rule.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.MarketRule`2.Activate(`1)">
            <summary>
            To activate the rule.
            </summary>
            <param name="arg">The value, which will be sent to processor, registered through <see cref="M:StockSharp.Algo.MarketRule`2.Do(System.Action{`1})"/>.</param>
        </member>
        <member name="M:StockSharp.Algo.MarketRule`2.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:StockSharp.Algo.MarketRule`2.DisposeManaged">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.MarketRule`2.IsReady">
            <summary>
            Is the rule formed.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.MarketRule`2.IsActive">
            <summary>
            Is the rule currently activated.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.ProcessStates">
            <summary>
            States of the process.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ProcessStates.Stopped">
            <summary>
            Stopped.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ProcessStates.Stopping">
            <summary>
            Stopping.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ProcessStates.Started">
            <summary>
            Started.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.ExtendedMessageTypes">
            <summary>
            Extended <see cref="T:StockSharp.Messages.MessageTypes"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ExtendedMessageTypes.Clearing">
            <summary>
            <see cref="T:StockSharp.Algo.Testing.ClearingMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ExtendedMessageTypes.EmulationState">
            <summary>
            <see cref="T:StockSharp.Algo.Testing.EmulationStateMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ExtendedMessageTypes.Generator">
            <summary>
            <see cref="T:StockSharp.Algo.Testing.GeneratorMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ExtendedMessageTypes.CommissionRule">
            <summary>
            <see cref="T:StockSharp.Algo.Testing.CommissionRuleMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ExtendedMessageTypes.HistorySource">
            <summary>
            <see cref="T:StockSharp.Algo.Testing.HistorySourceMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ExtendedMessageTypes.ChangeTimeInterval">
            <summary>
            <see cref="T:StockSharp.Algo.Testing.ChangeTimeIntervalMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ExtendedMessageTypes.StrategyLookup">
            <summary>
            <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyLookupMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ExtendedMessageTypes.StrategyLookupResult">
            <summary>
            <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyLookupResultMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ExtendedMessageTypes.StrategyInfo">
            <summary>
            <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyInfoMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ExtendedMessageTypes.StrategyType">
            <summary>
            <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyTypeMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ExtendedMessageTypes.StrategyState">
            <summary>
            <see cref="T:StockSharp.Algo.Strategies.Messages.StrategyStateMessage"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.MessageConverterHelper">
            <summary>
            The auxiliary class for conversion of business-objects (<see cref="N:StockSharp.BusinessEntities"/>) into messages (<see cref="N:StockSharp.Messages"/>) and vice versa.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.MarketDepth)">
            <summary>
            Cast <see cref="T:StockSharp.BusinessEntities.MarketDepth"/> to the <see cref="T:StockSharp.Messages.QuoteChangeMessage"/>.
            </summary>
            <param name="depth"><see cref="T:StockSharp.BusinessEntities.MarketDepth"/>.</param>
            <returns><see cref="T:StockSharp.Messages.QuoteChangeMessage"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandleMessage(StockSharp.Messages.MarketDataTypes)">
            <summary>
            Cast candle type <see cref="T:StockSharp.Messages.MarketDataTypes"/> to the message <see cref="T:StockSharp.Messages.CandleMessage"/>.
            </summary>
            <param name="type">Candle type.</param>
            <returns>Message type <see cref="T:StockSharp.Messages.CandleMessage"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandleMarketDataType(System.Type)">
            <summary>
            Cast message type <see cref="T:StockSharp.Messages.CandleMessage"/> to the <see cref="T:StockSharp.Messages.MarketDataTypes"/>.
            </summary>
            <param name="messageType">The type of the message <see cref="T:StockSharp.Messages.CandleMessage"/>.</param>
            <returns><see cref="T:StockSharp.Messages.MarketDataTypes"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandleMessageType(System.Type)">
            <summary>
            Cast candle type <see cref="T:StockSharp.Algo.Candles.Candle"/> to the message <see cref="T:StockSharp.Messages.CandleMessage"/>.
            </summary>
            <param name="candleType">The type of the candle <see cref="T:StockSharp.Algo.Candles.Candle"/>.</param>
            <returns>The type of the message <see cref="T:StockSharp.Messages.CandleMessage"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandleType(System.Type)">
            <summary>
            Cast message type <see cref="T:StockSharp.Messages.CandleMessage"/> to the candle type <see cref="T:StockSharp.Algo.Candles.Candle"/>.
            </summary>
            <param name="messageType">The type of the message <see cref="T:StockSharp.Messages.CandleMessage"/>.</param>
            <returns>The type of the candle <see cref="T:StockSharp.Algo.Candles.Candle"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.IsCandleDataType(StockSharp.Messages.MarketDataTypes)">
            <summary>
            Determine the <paramref name="type"/> is candle data type.
            </summary>
            <param name="type">The data type.</param>
            <returns><see langword="true" />, if data type is candle, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandleMessageType(StockSharp.Messages.MarketDataTypes)">
            <summary>
            To convert the type of candles <see cref="T:StockSharp.Messages.MarketDataTypes"/> into type of message <see cref="T:StockSharp.Messages.MessageTypes"/>.
            </summary>
            <param name="type">Candles type.</param>
            <returns>Message type.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandleMarketDataType(StockSharp.Messages.MessageTypes)">
            <summary>
            To convert the type of message <see cref="T:StockSharp.Messages.MessageTypes"/> into type of candles <see cref="T:StockSharp.Messages.MarketDataTypes"/>.
            </summary>
            <param name="type">Message type.</param>
            <returns>Candles type.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.Algo.Candles.Candle)">
            <summary>
            To convert the candle into message.
            </summary>
            <param name="candle">Candle.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.MyTrade)">
            <summary>
            To convert the own trade into message.
            </summary>
            <param name="trade">Own trade.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.Order)">
            <summary>
            To convert the order into message.
            </summary>
            <param name="order">Order.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.OrderFail,System.Int64)">
            <summary>
            To convert the error description into message.
            </summary>
            <param name="fail">Error details.</param>
            <param name="originalTransactionId">ID of original transaction, for which this message is the answer.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.Trade)">
            <summary>
            To convert the tick trade into message.
            </summary>
            <param name="trade">Tick trade.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.OrderLogItem)">
            <summary>
            To convert the string of orders log onto message.
            </summary>
            <param name="item">Order log item.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.CreateRegisterMessage(StockSharp.BusinessEntities.Order,System.Nullable{StockSharp.Messages.SecurityId})">
            <summary>
            To create the message of new order registration.
            </summary>
            <param name="order">Order.</param>
            <param name="securityId">Security ID.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.CreateCancelMessage(StockSharp.BusinessEntities.Order,StockSharp.Messages.SecurityId,System.Int64,System.Nullable{System.Decimal})">
            <summary>
            To create the message of cancelling old order.
            </summary>
            <param name="order">Order.</param>
            <param name="securityId">Security ID.</param>
            <param name="transactionId">The transaction number.</param>
            <param name="volume">The volume been cancelled.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.CreateReplaceMessage(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.Messages.SecurityId)">
            <summary>
            To create the message of replacing old order with new one.
            </summary>
            <param name="oldOrder">Old order.</param>
            <param name="newOrder">New order.</param>
            <param name="securityId">Security ID.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.CreateReplaceMessage(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.Messages.SecurityId,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.Messages.SecurityId)">
            <summary>
            To create the message of replacing pair of old orders to new ones.
            </summary>
            <param name="oldOrder1">Old order.</param>
            <param name="newOrder1">New order.</param>
            <param name="security1">Security ID.</param>
            <param name="oldOrder2">Old order.</param>
            <param name="newOrder2">New order.</param>
            <param name="security2">Security ID.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.Messages.SecurityId},System.Int64)">
            <summary>
            To convert the instrument into message.
            </summary>
            <param name="security">Security.</param>
            <param name="securityId">Security ID.</param>
            <param name="originalTransactionId">ID of original transaction, for which this message is the answer.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToLookupCriteria(StockSharp.Messages.SecurityLookupMessage,StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.SecurityLookupMessage"/> message to <see cref="T:StockSharp.BusinessEntities.Security"/> criteria.
            </summary>
            <param name="message">Message.</param>
            <param name="exchangeInfoProvider">Exchanges and trading boards provider.</param>
            <returns>Criteria.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToLookupMessage(StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.Messages.SecurityId})">
            <summary>
            Convert <see cref="T:StockSharp.BusinessEntities.Security"/> criteria to <see cref="T:StockSharp.Messages.SecurityLookupMessage"/>.
            </summary>
            <param name="criteria">Criteria.</param>
            <param name="securityId">Security ID.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToSecurity(StockSharp.Messages.SecurityMessage,StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            To convert the message into instrument.
            </summary>
            <param name="message">Message.</param>
            <param name="exchangeInfoProvider">Exchanges and trading boards provider.</param>
            <returns>Security.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToStringId(StockSharp.Messages.SecurityId,StockSharp.Algo.SecurityIdGenerator)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.SecurityId"/> to <see cref="P:StockSharp.BusinessEntities.Security.Id"/> value.
            </summary>
            <param name="securityId"><see cref="T:StockSharp.Messages.SecurityId"/> value.</param>
            <param name="generator">The instrument identifiers generator <see cref="P:StockSharp.BusinessEntities.Security.Id"/>. Can be <see langword="null"/>.</param>
            <returns><see cref="P:StockSharp.BusinessEntities.Security.Id"/> value.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToSecurityId(System.String,StockSharp.Algo.SecurityIdGenerator)">
            <summary>
            Convert <see cref="P:StockSharp.BusinessEntities.Security.Id"/> to <see cref="T:StockSharp.Messages.SecurityId"/> value.
            </summary>
            <param name="id"><see cref="P:StockSharp.BusinessEntities.Security.Id"/> value.</param>
            <param name="generator">The instrument identifiers generator <see cref="T:StockSharp.Messages.SecurityId"/>. Can be <see langword="null"/>.</param>
            <returns><see cref="T:StockSharp.Messages.SecurityId"/> value.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.Portfolio,System.Int64)">
            <summary>
            To convert the portfolio into message.
            </summary>
            <param name="portfolio">Portfolio.</param>
            <param name="originalTransactionId">ID of original transaction, for which this message is the answer.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToChangeMessage(StockSharp.BusinessEntities.Portfolio)">
            <summary>
            To convert the portfolio into message.
            </summary>
            <param name="portfolio">Portfolio.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToChangeMessage(StockSharp.BusinessEntities.Position,System.Int64)">
            <summary>
            To convert the position into message.
            </summary>
            <param name="position">Position.</param>
            <param name="originalTransactionId">ID of original transaction, for which this message is the answer.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.ExchangeBoard,System.Int64)">
            <summary>
            To convert the board into message.
            </summary>
            <param name="board">Board.</param>
            <param name="originalTransactionId">ID of original transaction, for which this message is the answer.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToExchange(StockSharp.Messages.BoardMessage)">
            <summary>
            To convert the message into exchange.
            </summary>
            <param name="message">Message.</param>
            <returns>Exchange.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToExchange(StockSharp.Messages.BoardMessage,StockSharp.BusinessEntities.Exchange)">
            <summary>
            To convert the message into exchange.
            </summary>
            <param name="message">Message.</param>
            <param name="exchange">Exchange.</param>
            <returns>Exchange.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToBoard(StockSharp.Messages.BoardMessage)">
            <summary>
            To convert the message into board.
            </summary>
            <param name="message">Message.</param>
            <returns>Board.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ApplyChanges(StockSharp.BusinessEntities.ExchangeBoard,StockSharp.Messages.BoardMessage)">
            <summary>
            To convert the message into board.
            </summary>
            <param name="board">Board.</param>
            <param name="message">Message.</param>
            <returns>Board.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessages``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To convert trading objects into messages.
            </summary>
            <typeparam name="TEntity">The type of trading object.</typeparam>
            <typeparam name="TMessage">Message type.</typeparam>
            <param name="entities">Trading objects.</param>
            <returns>Messages.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToEntities``2(System.Collections.Generic.IEnumerable{``0},StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            To convert messages into trading objects.
            </summary>
            <typeparam name="TMessage">Message type.</typeparam>
            <typeparam name="TEntity">The type of trading object.</typeparam>
            <param name="messages">Messages.</param>
            <param name="security">Security.</param>
            <param name="exchangeInfoProvider">Exchanges and trading boards provider.</param>
            <returns>Trading objects.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandles``1(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage},StockSharp.BusinessEntities.Security,System.Type)">
            <summary>
            To convert messages into trading objects.
            </summary>
            <typeparam name="TCandle">The candle type.</typeparam>
            <param name="messages">Messages.</param>
            <param name="security">Security.</param>
            <param name="candleType">The type of the candle. It is used, if <typeparamref name="TCandle" /> equals to <see cref="T:StockSharp.Algo.Candles.Candle"/>.</param>
            <returns>Trading objects.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandle``1(StockSharp.Messages.CandleMessage,StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To convert <see cref="T:StockSharp.Messages.CandleMessage"/> into candle.
            </summary>
            <typeparam name="TCandle">The candle type.</typeparam>
            <param name="message">Message.</param>
            <param name="series">Series.</param>
            <returns>Candle.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandle(StockSharp.Messages.CandleMessage,StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            To convert <see cref="T:StockSharp.Messages.CandleMessage"/> into candle.
            </summary>
            <param name="message">Message.</param>
            <param name="series">Series.</param>
            <returns>Candle.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandle(StockSharp.Messages.CandleMessage,StockSharp.BusinessEntities.Security)">
            <summary>
            To convert <see cref="T:StockSharp.Messages.CandleMessage"/> into candle.
            </summary>
            <param name="message">Message.</param>
            <param name="security">Security.</param>
            <returns>Candle.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.Update(StockSharp.Algo.Candles.Candle,StockSharp.Messages.CandleMessage)">
            <summary>
            Update candle from <see cref="T:StockSharp.Messages.CandleMessage"/>.
            </summary>
            <param name="candle">Candle.</param>
            <param name="message">Message.</param>
            <returns>Candle.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToTrade(StockSharp.Messages.ExecutionMessage,StockSharp.BusinessEntities.Security)">
            <summary>
            To convert the message into tick trade.
            </summary>
            <param name="message">Message.</param>
            <param name="security">Security.</param>
            <returns>Tick trade.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToTrade(StockSharp.Messages.ExecutionMessage,StockSharp.BusinessEntities.Trade)">
            <summary>
            To convert the message into tick trade.
            </summary>
            <param name="message">Message.</param>
            <param name="trade">Tick trade.</param>
            <returns>Tick trade.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToOrder(StockSharp.Messages.ExecutionMessage,StockSharp.BusinessEntities.Security)">
            <summary>
            To convert the message into order.
            </summary>
            <param name="message">Message.</param>
            <param name="security">Security.</param>
            <returns>Order.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToOrder(StockSharp.Messages.ExecutionMessage,StockSharp.BusinessEntities.Order)">
            <summary>
            To convert the message into order.
            </summary>
            <param name="message">Message.</param>
            <param name="order">The order.</param>
            <returns>Order.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMarketDepth(StockSharp.Messages.QuoteChangeMessage,StockSharp.BusinessEntities.Security,System.Func{StockSharp.Messages.SecurityId,StockSharp.BusinessEntities.Security})">
            <summary>
            To convert the message into order book.
            </summary>
            <param name="message">Message.</param>
            <param name="security">Security.</param>
            <param name="getSecurity">The function for getting instrument.</param>
            <returns>Market depth.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMarketDepth(StockSharp.Messages.QuoteChangeMessage,StockSharp.BusinessEntities.MarketDepth,System.Func{StockSharp.Messages.SecurityId,StockSharp.BusinessEntities.Security})">
            <summary>
            To convert the message into order book.
            </summary>
            <param name="message">Message.</param>
            <param name="marketDepth">Market depth.</param>
            <param name="getSecurity">The function for getting instrument.</param>
            <returns>Market depth.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToQuoteChange(StockSharp.BusinessEntities.Quote)">
            <summary>
            To convert the quote into message.
            </summary>
            <param name="quote">Quote.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToQuote(StockSharp.Messages.QuoteChange,StockSharp.BusinessEntities.Security,System.Func{StockSharp.Messages.SecurityId,StockSharp.BusinessEntities.Security})">
            <summary>
            To convert the message into quote.
            </summary>
            <param name="change">Message.</param>
            <param name="security">Security.</param>
            <param name="getSecurity">The function for getting instrument.</param>
            <returns>Quote.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToOrderLog(StockSharp.Messages.ExecutionMessage,StockSharp.BusinessEntities.Security)">
            <summary>
            To convert the message into orders log string.
            </summary>
            <param name="message">Message.</param>
            <param name="security">Security.</param>
            <returns>Order log item.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToOrderLog(StockSharp.Messages.ExecutionMessage,StockSharp.BusinessEntities.OrderLogItem)">
            <summary>
            To convert the message into orders log string.
            </summary>
            <param name="message">Message.</param>
            <param name="item">Order log item.</param>
            <returns>Order log item.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.News)">
            <summary>
            To convert news into message.
            </summary>
            <param name="news">News.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToSecurityId(StockSharp.BusinessEntities.Security,StockSharp.Algo.SecurityIdGenerator)">
            <summary>
            To convert the instrument into <see cref="T:StockSharp.Messages.SecurityId"/>.
            </summary>
            <param name="security">Security.</param>
            <param name="idGenerator">The instrument identifiers generator <see cref="P:StockSharp.BusinessEntities.Security.Id"/>.</param>
            <returns>Security ID.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToExternalId(StockSharp.Messages.SecurityId)">
            <summary>
            Cast <see cref="T:StockSharp.Messages.SecurityId"/> to the <see cref="T:StockSharp.BusinessEntities.SecurityExternalId"/>.
            </summary>
            <param name="securityId"><see cref="T:StockSharp.Messages.SecurityId"/>.</param>
            <returns><see cref="T:StockSharp.BusinessEntities.SecurityExternalId"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.HasExternalId(StockSharp.Messages.SecurityId)">
            <summary>
            To check, if <see cref="T:StockSharp.Messages.SecurityId"/> contains identifiers of external sources.
            </summary>
            <param name="securityId">Security ID.</param>
            <returns><see langword="true" />, if there are identifiers of external sources, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToSecurityId(StockSharp.BusinessEntities.SecurityExternalId,System.String,System.String,System.Nullable{StockSharp.Messages.SecurityTypes})">
            <summary>
            Cast <see cref="T:StockSharp.BusinessEntities.SecurityExternalId"/> to the <see cref="T:StockSharp.Messages.SecurityId"/>.
            </summary>
            <param name="externalId"><see cref="T:StockSharp.BusinessEntities.SecurityExternalId"/>.</param>
            <param name="securityCode">Security code.</param>
            <param name="boardCode">Board code.</param>
            <param name="securityType">Security type.</param>
            <returns><see cref="T:StockSharp.Messages.SecurityId"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.FillSecurityInfo(StockSharp.Messages.MarketDataMessage,StockSharp.BusinessEntities.Security)">
            <summary>
            To fill the message with information about instrument.
            </summary>
            <param name="message">The message for market data subscription.</param>
            <param name="security">Security.</param>
            <returns>The message for market data subscription.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.FillSecurityInfo(StockSharp.Messages.MarketDataMessage,StockSharp.BusinessEntities.IConnector,StockSharp.BusinessEntities.Security)">
            <summary>
            To fill the message with information about instrument.
            </summary>
            <param name="message">The message for market data subscription.</param>
            <param name="connector">Connection to the trading system.</param>
            <param name="security">Security.</param>
            <returns>The message for market data subscription.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.FillSecurityInfo(StockSharp.Messages.MarketDataMessage,StockSharp.Messages.SecurityId,StockSharp.BusinessEntities.Security)">
            <summary>
            To fill the message with information about instrument.
            </summary>
            <param name="message">The message for market data subscription.</param>
            <param name="securityId">Security ID.</param>
            <param name="security">Security.</param>
            <returns>The message for market data subscription.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMarketDepth(StockSharp.Messages.Level1ChangeMessage,StockSharp.BusinessEntities.Security)">
            <summary>
            Cast <see cref="T:StockSharp.Messages.Level1ChangeMessage"/> to the <see cref="T:StockSharp.BusinessEntities.MarketDepth"/>.
            </summary>
            <param name="message">Message.</param>
            <param name="security">Security.</param>
            <returns>Market depth.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToNews(StockSharp.Messages.NewsMessage,StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            Cast <see cref="T:StockSharp.Messages.NewsMessage"/> to the <see cref="T:StockSharp.BusinessEntities.News"/>.
            </summary>
            <param name="message">Message.</param>
            <param name="exchangeInfoProvider">Exchanges and trading boards provider.</param>
            <returns>News.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToPortfolio(StockSharp.Messages.PortfolioMessage,StockSharp.BusinessEntities.Portfolio,StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            Cast <see cref="T:StockSharp.Messages.PortfolioMessage"/> to the <see cref="T:StockSharp.BusinessEntities.Portfolio"/>.
            </summary>
            <param name="message">Message.</param>
            <param name="portfolio">Portfolio.</param>
            <param name="exchangeInfoProvider">Exchanges and trading boards provider.</param>
            <returns>Portfolio.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessageType(System.Type,System.Object@)">
            <summary>
            To convert the type of business object into type of message.
            </summary>
            <param name="dataType">The type of business object.</param>
            <param name="arg">The data parameter.</param>
            <returns>Message type.</returns>
        </member>
        <member name="M:StockSharp.Algo.MessageConverterHelper.ToMarketDataMessage(StockSharp.Algo.Candles.CandleSeries,System.Boolean,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64})">
            <summary>
            Cast <see cref="T:StockSharp.Algo.Candles.CandleSeries"/> to <see cref="T:StockSharp.Messages.MarketDataMessage"/>.
            </summary>
            <param name="series">Candles series.</param>
            <param name="isSubscribe">The message is market-data subscription.</param>
            <param name="from">The initial date from which you need to get data.</param>
            <param name="to">The final date by which you need to get data.</param>
            <param name="count">Candles count.</param>
            <returns>Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</returns>
        </member>
        <member name="T:StockSharp.Algo.ShrinkRules">
            <summary>
            Price rounding rules.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ShrinkRules.Auto">
            <summary>
            Automatically to determine rounding to lesser or to bigger value.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ShrinkRules.Less">
            <summary>
            To round to lesser value.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.ShrinkRules.More">
            <summary>
            To round to bigger value.
            </summary>
        </member>
        <member name="T:StockSharp.Algo.TraderHelper">
            <summary>
            The auxiliary class for provision of various algorithmic functionalities.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.CheckModification(StockSharp.Messages.OrderStates,StockSharp.Messages.OrderStates)">
            <summary>
            Check the possibility order's state change.
            </summary>
            <param name="prev">Previous order's state.</param>
            <param name="curr">Current order's state.</param>
            <returns>The current order's state.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetFilteredQuotes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
            <summary>
            To filter the order book from own orders.
            </summary>
            <param name="quotes">The initial order book to be filtered.</param>
            <param name="ownOrders">Active orders for this instrument.</param>
            <param name="orders">Orders to be ignored.</param>
            <returns>The filtered order book.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetCurrentPrice(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,System.Nullable{StockSharp.Messages.Sides},StockSharp.Algo.MarketPriceTypes,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
            <summary>
            To calculate the current price by the instrument depending on the order direction.
            </summary>
            <param name="security">The instrument used for the current price calculation.</param>
            <param name="provider">The market data provider.</param>
            <param name="direction">Order side.</param>
            <param name="priceType">The type of market price.</param>
            <param name="orders">Orders to be ignored.</param>
            <returns>The current price. If information in order book is insufficient, then <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetCurrentPrice(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Sides,StockSharp.Algo.MarketPriceTypes,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
            <summary>
            To calculate the current price by the order book depending on the order direction.
            </summary>
            <param name="depth">The order book for the current price calculation.</param>
            <param name="side">The order direction. If it is a buy, <see cref="P:StockSharp.BusinessEntities.MarketDepth.BestAsk"/> value is used, otherwise <see cref="P:StockSharp.BusinessEntities.MarketDepth.BestBid"/>.</param>
            <param name="priceType">The type of current price.</param>
            <param name="orders">Orders to be ignored.</param>
            <returns>The current price. If information in order book is insufficient, then <see langword="null" /> will be returned.</returns>
            <remarks>
            For correct operation of the method the order book export shall be launched.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetCurrentPrice(StockSharp.BusinessEntities.MarketDepthPair,StockSharp.Messages.Sides,StockSharp.Algo.MarketPriceTypes)">
            <summary>
            To calculate the current price based on the best pair of quotes, depending on the order direction.
            </summary>
            <param name="bestPair">The best pair of quotes, used for the current price calculation.</param>
            <param name="side">The order direction. If it is a buy, <see cref="P:StockSharp.BusinessEntities.MarketDepthPair.Ask"/> value is used, otherwise <see cref="P:StockSharp.BusinessEntities.MarketDepthPair.Bid"/>.</param>
            <param name="priceType">The type of current price.</param>
            <returns>The current price. If information in order book is insufficient, then <see langword="null" /> will be returned.</returns>
            <remarks>
            For correct operation of the method the order book export shall be launched.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ApplyOffset(StockSharp.Messages.Unit,StockSharp.Messages.Sides,StockSharp.Messages.Unit,StockSharp.BusinessEntities.Security)">
            <summary>
            To use shifting for price, depending on direction <paramref name="side" />.
            </summary>
            <param name="price">Price.</param>
            <param name="side">The order direction, used as shift direction (for buy the shift is added, for sell - subtracted).</param>
            <param name="offset">Price shift.</param>
            <param name="security">Security.</param>
            <returns>New price.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ShrinkPrice(StockSharp.BusinessEntities.Order,StockSharp.Algo.ShrinkRules)">
            <summary>
            To cut the price for the order, to make it multiple of the minimal step, also to limit number of decimal places.
            </summary>
            <param name="order">The order for which the price will be cut <see cref="P:StockSharp.BusinessEntities.Order.Price"/>.</param>
            <param name="rule">The price rounding rule.</param>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ShrinkPrice(StockSharp.BusinessEntities.Security,System.Decimal,StockSharp.Algo.ShrinkRules)">
            <summary>
            To cut the price, to make it multiple of minimal step, also to limit number of signs after the comma.
            </summary>
            <param name="security">The instrument from which the <see cref="P:StockSharp.BusinessEntities.Security.PriceStep"/> and <see cref="P:StockSharp.BusinessEntities.Security.Decimals"/> values are taken.</param>
            <param name="price">The price to be made multiple.</param>
            <param name="rule">The price rounding rule.</param>
            <returns>The multiple price.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetPosition(StockSharp.BusinessEntities.MyTrade)">
            <summary>
            To get the position on own trade.
            </summary>
            <param name="trade">Own trade, used for position calculation. At buy the trade volume <see cref="P:StockSharp.BusinessEntities.Trade.Volume"/> is taken with positive sign, at sell - with negative.</param>
            <returns>Position.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetPosition(StockSharp.Messages.ExecutionMessage,System.Boolean)">
            <summary>
            To get the position on own trade.
            </summary>
            <param name="message">Own trade, used for position calculation. At buy the trade volume <see cref="P:StockSharp.Messages.ExecutionMessage.TradeVolume"/> is taken with positive sign, at sell - with negative.</param>
            <param name="byOrder">To check implemented volume by order balance (<see cref="P:StockSharp.Messages.ExecutionMessage.Balance"/>) or by received trades. The default is checked by the order.</param>
            <returns>Position.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetPnL(StockSharp.BusinessEntities.Portfolio)">
            <summary>
            To calculate profit-loss based on the portfolio.
            </summary>
            <param name="portfolio">The portfolio, for which the profit-loss shall be calculated.</param>
            <returns>Profit-loss.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.BusinessEntities.ExchangeBoard,System.DateTimeOffset)">
            <summary>
            To check, whether the time is traded (has the session started, ended, is there a clearing).
            </summary>
            <param name="board">Board info.</param>
            <param name="time">The passed time to be checked.</param>
            <returns><see langword="true" />, if time is traded, otherwise, not traded.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.BusinessEntities.ExchangeBoard,System.DateTimeOffset,StockSharp.Messages.WorkingTimePeriod@)">
            <summary>
            To check, whether the time is traded (has the session started, ended, is there a clearing).
            </summary>
            <param name="board">Board info.</param>
            <param name="time">The passed time to be checked.</param>
            <param name="period">Current working time period.</param>
            <returns><see langword="true" />, if time is traded, otherwise, not traded.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.Messages.BoardMessage,System.DateTimeOffset)">
            <summary>
            To check, whether the time is traded (has the session started, ended, is there a clearing).
            </summary>
            <param name="board">Board info.</param>
            <param name="time">The passed time to be checked.</param>
            <returns><see langword="true" />, if time is traded, otherwise, not traded.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.Messages.BoardMessage,System.DateTimeOffset,StockSharp.Messages.WorkingTimePeriod@)">
            <summary>
            To check, whether the time is traded (has the session started, ended, is there a clearing).
            </summary>
            <param name="board">Board info.</param>
            <param name="time">The passed time to be checked.</param>
            <param name="period">Current working time period.</param>
            <returns><see langword="true" />, if time is traded, otherwise, not traded.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.Messages.WorkingTime,System.DateTime,StockSharp.Messages.WorkingTimePeriod@)">
            <summary>
            To check, whether the time is traded (has the session started, ended, is there a clearing).
            </summary>
            <param name="workingTime">Board working hours.</param>
            <param name="time">The passed time to be checked.</param>
            <param name="period">Current working time period.</param>
            <returns><see langword="true" />, if time is traded, otherwise, not traded.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsTradeDate(StockSharp.BusinessEntities.ExchangeBoard,System.DateTimeOffset,System.Boolean)">
            <summary>
            To check, whether date is traded.
            </summary>
            <param name="board">Board info.</param>
            <param name="date">The passed date to be checked.</param>
            <param name="checkHolidays">Whether to check the passed date for a weekday (Saturday and Sunday are days off, returned value for them is <see langword="false" />).</param>
            <returns><see langword="true" />, if the date is traded, otherwise, is not traded.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsTradeDate(StockSharp.Messages.BoardMessage,System.DateTimeOffset,System.Boolean)">
            <summary>
            To check, whether date is traded.
            </summary>
            <param name="board">Board info.</param>
            <param name="date">The passed date to be checked.</param>
            <param name="checkHolidays">Whether to check the passed date for a weekday (Saturday and Sunday are days off, returned value for them is <see langword="false" />).</param>
            <returns><see langword="true" />, if the date is traded, otherwise, is not traded.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsTradeDate(StockSharp.Messages.WorkingTime,System.DateTime,System.Boolean)">
            <summary>
            To check, whether date is traded.
            </summary>
            <param name="workingTime">Board working hours.</param>
            <param name="date">The passed date to be checked.</param>
            <param name="checkHolidays">Whether to check the passed date for a weekday (Saturday and Sunday are days off, returned value for them is <see langword="false" />).</param>
            <returns><see langword="true" />, if the date is traded, otherwise, is not traded.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.LastTradeDay(StockSharp.Messages.BoardMessage,System.DateTimeOffset,System.Boolean)">
            <summary>
            Get last trade date.
            </summary>
            <param name="board">Board info.</param>
            <param name="date">The date from which to start checking.</param>
            <param name="checkHolidays">Whether to check the passed date for a weekday (Saturday and Sunday are days off, returned value for them is <see langword="false" />).</param>
            <returns>Last trade date.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ReRegisterClone(StockSharp.BusinessEntities.Order,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            To create copy of the order for re-registration.
            </summary>
            <param name="oldOrder">The original order.</param>
            <param name="newPrice">Price of the new order.</param>
            <param name="newVolume">Volume of the new order.</param>
            <returns>New order.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Sparse(StockSharp.BusinessEntities.MarketDepth)">
            <summary>
            To create from regular order book a sparse on, with minimal price step of <see cref="P:StockSharp.BusinessEntities.Security.PriceStep"/>.
            </summary>
            <remarks>
            In sparsed book shown quotes with no active orders. The volume of these quotes is 0.
            </remarks>
            <param name="depth">The regular order book.</param>
            <returns>The sparse order book.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Sparse(StockSharp.BusinessEntities.MarketDepth,System.Decimal)">
            <summary>
            To create from regular order book a sparse one.
            </summary>
            <remarks>
            In sparsed book shown quotes with no active orders. The volume of these quotes is 0.
            </remarks>
            <param name="depth">The regular order book.</param>
            <param name="priceStep">Minimum price step.</param>
            <returns>The sparse order book.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Sparse(StockSharp.BusinessEntities.MarketDepthPair,System.Decimal)">
            <summary>
            To create form pair of quotes a sparse collection of quotes, which will be included into the range between the pair.
            </summary>
            <remarks>
            In sparsed collection shown quotes with no active orders. The volume of these quotes is 0.
            </remarks>
            <param name="pair">The pair of regular quotes.</param>
            <param name="priceStep">Minimum price step.</param>
            <returns>The sparse collection of quotes.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Sparse(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},System.Decimal)">
            <summary>
            To create the sparse collection of quotes from regular quotes.
            </summary>
            <remarks>
            In sparsed collection shown quotes with no active orders. The volume of these quotes is 0.
            </remarks>
            <param name="quotes">Regular quotes. The collection shall contain quotes of the same direction (only bids or only offers).</param>
            <param name="priceStep">Minimum price step.</param>
            <returns>The sparse collection of quotes.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Join(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.MarketDepth)">
            <summary>
            To merge the initial order book and its sparse representation.
            </summary>
            <param name="original">The initial order book.</param>
            <param name="rare">The sparse order book.</param>
            <returns>The merged order book.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Group(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)">
            <summary>
            To group the order book by the price range.
            </summary>
            <param name="depth">The order book to be grouped.</param>
            <param name="priceRange">The price range, for which grouping shall be performed.</param>
            <returns>The grouped order book.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.UnGroup(StockSharp.BusinessEntities.MarketDepth)">
            <summary>
            To de-group the order book, grouped using the method <see cref="M:StockSharp.Algo.TraderHelper.Group(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)"/>.
            </summary>
            <param name="depth">The grouped order book.</param>
            <returns>The de-grouped order book.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.EmulateTrades(StockSharp.BusinessEntities.MarketDepth,System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
            <summary>
            To delete in order book levels, which shall disappear in case of trades occurrence <paramref name="trades" />.
            </summary>
            <param name="depth">The order book to be cleared.</param>
            <param name="trades">Trades.</param>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Group(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},StockSharp.Messages.Unit)">
            <summary>
            To group quotes by the price range.
            </summary>
            <param name="quotes">Quotes to be grouped.</param>
            <param name="priceRange">The price range, for which grouping shall be performed.</param>
            <returns>Grouped quotes.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetDelta(StockSharp.Messages.QuoteChangeMessage,StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            To calculate the change between order books.
            </summary>
            <param name="from">First order book.</param>
            <param name="to">Second order book.</param>
            <returns>The order book, storing only increments.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetDelta(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChange},System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChange},StockSharp.Messages.Sides)">
            <summary>
            To calculate the change between quotes.
            </summary>
            <param name="from">First quotes.</param>
            <param name="to">Second quotes.</param>
            <param name="side">The direction, showing the type of quotes.</param>
            <returns>Changes.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.AddDelta(StockSharp.Messages.QuoteChangeMessage,StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            To add change to the first order book.
            </summary>
            <param name="from">First order book.</param>
            <param name="delta">Change.</param>
            <returns>The changed order book.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.AddDelta(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChange},System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChange},System.Boolean)">
            <summary>
            To add change to quote.
            </summary>
            <param name="fromQuotes">Quotes.</param>
            <param name="deltaQuotes">Changes.</param>
            <param name="isBids">The indication of quotes direction.</param>
            <returns>Changed quotes.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsCanceled(StockSharp.BusinessEntities.Order)">
            <summary>
            To check, whether the order was cancelled.
            </summary>
            <param name="order">The order to be checked.</param>
            <returns><see langword="true" />, if the order is cancelled, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsMatched(StockSharp.BusinessEntities.Order)">
            <summary>
            To check, is the order matched completely.
            </summary>
            <param name="order">The order to be checked.</param>
            <returns><see langword="true" />, if the order is matched completely, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsMatchedPartially(StockSharp.BusinessEntities.Order)">
            <summary>
            To check, is a part of volume is implemented in the order.
            </summary>
            <param name="order">The order to be checked.</param>
            <returns><see langword="true" />, if part of volume is implemented, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsMatchedEmpty(StockSharp.BusinessEntities.Order)">
            <summary>
            To check, if no contract in order is implemented.
            </summary>
            <param name="order">The order to be checked.</param>
            <returns><see langword="true" />, if no contract is implemented, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsCanceled(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To check, whether the order was cancelled.
            </summary>
            <param name="order">The order to be checked.</param>
            <returns><see langword="true" />, if the order is cancelled, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsMatched(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To check, is the order matched completely.
            </summary>
            <param name="order">The order to be checked.</param>
            <returns><see langword="true" />, if the order is matched completely, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsMatchedPartially(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To check, is a part of volume is implemented in the order.
            </summary>
            <param name="order">The order to be checked.</param>
            <returns><see langword="true" />, if part of volume is implemented, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsMatchedEmpty(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To check, if no contract in order is implemented.
            </summary>
            <param name="order">The order to be checked.</param>
            <returns><see langword="true" />, if no contract is implemented, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetTrades(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To get order trades.
            </summary>
            <param name="order">Orders.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <returns>Trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetMatchedVolume(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector,System.Boolean)">
            <summary>
            To calculate the implemented part of volume for order.
            </summary>
            <param name="order">The order, for which the implemented part of volume shall be calculated.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <param name="byOrder">To check implemented volume by order balance (<see cref="P:StockSharp.BusinessEntities.Order.Balance"/>) or by received trades. The default is checked by the order.</param>
            <returns>The implemented part of volume.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetAveragePrice(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
            <summary>
            To get weighted mean price of order matching.
            </summary>
            <param name="order">The order, for which the weighted mean matching price shall be got.</param>
            <param name="connector">The connection of interaction with trade systems.</param>
            <returns>The weighted mean price. If no order exists no trades, 0 is returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetAveragePrice(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
            <summary>
            To get the weighted mean price of matching by own trades.
            </summary>
            <param name="trades">Trades, for which the weighted mean price of matching shall be got.</param>
            <returns>The weighted mean price. If no trades, 0 is returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetTheoreticalTrades(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Order)">
            <summary>
            To get probable trades for order book for the given order.
            </summary>
            <param name="depth">The order book, reflecting situation on market at the moment of function call.</param>
            <param name="order">The order, for which probable trades shall be calculated.</param>
            <returns>Probable trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetTheoreticalTrades(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Sides,System.Decimal)">
            <summary>
            To get probable trades by the order book for the market price and given volume.
            </summary>
            <param name="depth">The order book, reflecting situation on market at the moment of function call.</param>
            <param name="orderDirection">Order side.</param>
            <param name="volume">The volume, supposed to be implemented.</param>
            <returns>Probable trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetTheoreticalTrades(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Sides,System.Decimal,System.Decimal)">
            <summary>
            To get probable trades by order book for given price and volume.
            </summary>
            <param name="depth">The order book, reflecting situation on market at the moment of function call.</param>
            <param name="orderDirection">Order side.</param>
            <param name="volume">The volume, supposed to be implemented.</param>
            <param name="price">The price, based on which the order is supposed to be forwarded. If it equals 0, option of market order will be considered.</param>
            <returns>Probable trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Invert(StockSharp.Messages.Sides)">
            <summary>
            To change the direction to opposite.
            </summary>
            <param name="side">The initial direction.</param>
            <returns>The opposite direction.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetDirection(StockSharp.BusinessEntities.Position)">
            <summary>
            To get the order direction for the position.
            </summary>
            <param name="position">The position value.</param>
            <returns>Order side.</returns>
            <remarks>
            A positive value equals <see cref="F:StockSharp.Messages.Sides.Buy"/>, a negative - <see cref="F:StockSharp.Messages.Sides.Sell"/>, zero - <see langword="null" />.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetDirection(System.Decimal)">
            <summary>
            To get the order direction for the position.
            </summary>
            <param name="position">The position value.</param>
            <returns>Order side.</returns>
            <remarks>
            A positive value equals <see cref="F:StockSharp.Messages.Sides.Buy"/>, a negative - <see cref="F:StockSharp.Messages.Sides.Sell"/>, zero - <see langword="null" />.
            </remarks>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.CancelOrders(StockSharp.BusinessEntities.IConnector,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},System.Nullable{System.Boolean},StockSharp.BusinessEntities.Portfolio,System.Nullable{StockSharp.Messages.Sides},StockSharp.BusinessEntities.ExchangeBoard,StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.Messages.SecurityTypes})">
            <summary>
            Cancel orders by filter.
            </summary>
            <param name="connector">The connection of interaction with trade systems.</param>
            <param name="orders">The group of orders, from which the required orders shall be found and cancelled.</param>
            <param name="isStopOrder"><see langword="true" />, if cancel only a stop orders, <see langword="false" /> - if regular orders, <see langword="null" /> - both.</param>
            <param name="portfolio">Portfolio. If the value is equal to <see langword="null" />, then the portfolio does not match the orders cancel filter.</param>
            <param name="direction">Order side. If the value is <see langword="null" />, the direction does not use.</param>
            <param name="board">Trading board. If the value is equal to <see langword="null" />, then the board does not match the orders cancel filter.</param>
            <param name="security">Instrument. If the value is equal to <see langword="null" />, then the instrument does not match the orders cancel filter.</param>
            <param name="securityType">Security type. If the value is <see langword="null" />, the type does not use.</param>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Contains(StockSharp.Algo.BasketSecurity,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.Security)">
            <summary>
            To check whether specified instrument is used now.
            </summary>
            <param name="basketSecurity">Instruments basket.</param>
            <param name="securityProvider">The provider of information about instruments.</param>
            <param name="security">The instrument that should be checked.</param>
            <returns><see langword="true" />, if specified instrument is used now, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetInnerSecurities(StockSharp.Algo.BasketSecurity,StockSharp.BusinessEntities.ISecurityProvider)">
            <summary>
            Find inner security instances.
            </summary>
            <param name="security">Instruments basket.</param>
            <param name="securityProvider">The provider of information about instruments.</param>
            <returns>Instruments, from which this basket is created.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.BusinessEntities.Security)">
            <summary>
            To filter orders for the given instrument.
            </summary>
            <param name="orders">All orders, in which the required shall be searched for.</param>
            <param name="security">The instrument, for which the orders shall be filtered.</param>
            <returns>Filtered orders.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.BusinessEntities.Portfolio)">
            <summary>
            To filter orders for the given portfolio.
            </summary>
            <param name="orders">All orders, in which the required shall be searched for.</param>
            <param name="portfolio">The portfolio, for which the orders shall be filtered.</param>
            <returns>Filtered orders.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.Messages.OrderStates)">
            <summary>
            To filter orders for the given condition.
            </summary>
            <param name="orders">All orders, in which the required shall be searched for.</param>
            <param name="state">Order state.</param>
            <returns>Filtered orders.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.Messages.Sides)">
            <summary>
            To filter orders for the given direction.
            </summary>
            <param name="orders">All orders, in which the required shall be searched for.</param>
            <param name="direction">Order side.</param>
            <returns>Filtered orders.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade},StockSharp.BusinessEntities.Security)">
            <summary>
            To filter orders for the given instrument.
            </summary>
            <param name="trades">All trades, in which the required shall be searched for.</param>
            <param name="security">The instrument, for which the trades shall be filtered.</param>
            <returns>Filtered trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade},System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            To filter trades for the given time period.
            </summary>
            <param name="trades">All trades, in which the required shall be searched for.</param>
            <param name="from">The start date for trades searching.</param>
            <param name="to">The end date for trades searching.</param>
            <returns>Filtered trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position},StockSharp.BusinessEntities.Security)">
            <summary>
            To filter positions for the given instrument.
            </summary>
            <param name="positions">All positions, in which the required shall be searched for.</param>
            <param name="security">The instrument, for which positions shall be filtered.</param>
            <returns>Filtered positions.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position},StockSharp.BusinessEntities.Portfolio)">
            <summary>
            To filter positions for the given portfolio.
            </summary>
            <param name="positions">All positions, in which the required shall be searched for.</param>
            <param name="portfolio">The portfolio, for which positions shall be filtered.</param>
            <returns>Filtered positions.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade},StockSharp.BusinessEntities.Security)">
            <summary>
            To filter own trades for the given instrument.
            </summary>
            <param name="myTrades">All own trades, in which the required shall be looked for.</param>
            <param name="security">The instrument, on which the trades shall be found.</param>
            <returns>Filtered trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade},StockSharp.BusinessEntities.Portfolio)">
            <summary>
            To filter own trades for the given portfolio.
            </summary>
            <param name="myTrades">All own trades, in which the required shall be looked for.</param>
            <param name="portfolio">The portfolio, for which the trades shall be filtered.</param>
            <returns>Filtered trades.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade},StockSharp.BusinessEntities.Order)">
            <summary>
            To filter own trades for the given order.
            </summary>
            <param name="myTrades">All own trades, in which the required shall be looked for.</param>
            <param name="order">The order, for which trades shall be filtered.</param>
            <returns>Filtered orders.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.FilterSecurities(StockSharp.Algo.Connector,StockSharp.Messages.SecurityLookupMessage,StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            To filter <see cref="P:StockSharp.Algo.Connector.Securities"/> by given criteria.
            </summary>
            <param name="connector">Securities.</param>
            <param name="criteria">The criterion which fields will be used as a filter.</param>
            <param name="exchangeInfoProvider">Exchanges and trading boards provider.</param>
            <returns>Instruments filtered.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetSecurityCriteria(StockSharp.Algo.Connector,StockSharp.Messages.SecurityLookupMessage,StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            To create the search criteria <see cref="T:StockSharp.BusinessEntities.Security"/> from <see cref="T:StockSharp.Messages.SecurityLookupMessage"/>.
            </summary>
            <param name="connector">Connection to the trading system.</param>
            <param name="criteria">The criterion which fields will be used as a filter.</param>
            <param name="exchangeInfoProvider">Exchanges and trading boards provider.</param>
            <returns>Search criterion.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},StockSharp.BusinessEntities.ExchangeBoard)">
            <summary>
            To filter instruments by the trading board.
            </summary>
            <param name="securities">Securities.</param>
            <param name="board">Trading board.</param>
            <returns>Instruments filtered.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.Messages.SecurityMessage},StockSharp.Messages.SecurityLookupMessage)">
            <summary>
            To filter instruments by the given criteria.
            </summary>
            <param name="securities">Securities.</param>
            <param name="criteria">The instrument whose fields will be used as a filter.</param>
            <returns>Instruments filtered.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},StockSharp.BusinessEntities.Security)">
            <summary>
            To filter instruments by the given criteria.
            </summary>
            <param name="securities">Securities.</param>
            <param name="criteria">The instrument whose fields will be used as a filter.</param>
            <returns>Instruments filtered.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsFullEmpty(StockSharp.BusinessEntities.MarketDepth)">
            <summary>
            To determine, is the order book empty.
            </summary>
            <param name="depth">Market depth.</param>
            <returns><see langword="true" />, if order book is empty, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsHalfEmpty(StockSharp.BusinessEntities.MarketDepth)">
            <summary>
            To determine, is the order book half-empty.
            </summary>
            <param name="depth">Market depth.</param>
            <returns><see langword="true" />, if the order book is half-empty, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.AddOrSubtractTradingDays(StockSharp.BusinessEntities.ExchangeBoard,System.DateTimeOffset,System.Int32,System.Boolean)">
            <summary>
            To get date of day T +/- of N trading days.
            </summary>
            <param name="board">Board info.</param>
            <param name="date">The start T date, to which are added or subtracted N trading days.</param>
            <param name="n">The N size. The number of trading days for the addition or subtraction.</param>
            <param name="checkHolidays">Whether to check the passed date for a weekday (Saturday and Sunday are days off, returned value for them is <see langword="false" />).</param>
            <returns>The end T +/- N date.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetExpiryDates(System.DateTime,System.DateTime)">
            <summary>
            To get the expiration date for <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.Forts"/>.
            </summary>
            <param name="from">The start of the expiration range.</param>
            <param name="to">The end of the expiration range.</param>
            <returns>Expiration dates.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetFortsJumps(System.String,System.DateTime,System.DateTime,System.Func{System.String,StockSharp.BusinessEntities.Security},System.Boolean)">
            <summary>
            To get real expiration instruments for base part of the code.
            </summary>
            <param name="baseCode">The base part of the instrument code.</param>
            <param name="from">The start of the expiration range.</param>
            <param name="to">The end of the expiration range.</param>
            <param name="getSecurity">The function to get instrument by the code.</param>
            <param name="throwIfNotExists">To generate exception, if some of instruments are not available.</param>
            <returns>Expiration instruments.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetFortsJumps(StockSharp.Algo.ExpirationContinuousSecurity,StockSharp.BusinessEntities.ISecurityProvider,System.String,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            To get real expiration instruments for the continuous instrument.
            </summary>
            <param name="continuousSecurity">Continuous security.</param>
            <param name="provider">The provider of information about instruments.</param>
            <param name="baseCode">The base part of the instrument code.</param>
            <param name="from">The start of the expiration range.</param>
            <param name="to">The end of the expiration range.</param>
            <param name="throwIfNotExists">To generate exception, if some of instruments for passed <paramref name="continuousSecurity" /> are not available.</param>
            <returns>Expiration instruments.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.FillFortsJumps(StockSharp.Algo.ExpirationContinuousSecurity,StockSharp.BusinessEntities.ISecurityProvider,System.String,System.DateTime,System.DateTime)">
            <summary>
            To fill transitions <see cref="P:StockSharp.Algo.ExpirationContinuousSecurity.ExpirationJumps"/>.
            </summary>
            <param name="continuousSecurity">Continuous security.</param>
            <param name="provider">The provider of information about instruments.</param>
            <param name="baseCode">The base part of the instrument code.</param>
            <param name="from">The start of the expiration range.</param>
            <param name="to">The end of the expiration range.</param>
        </member>
        <member name="P:StockSharp.Algo.TraderHelper.NativePositionManager.StockSharp#Algo#Positions#IPositionManager#Position">
            <summary>
            The position aggregate value.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToPositionManager(StockSharp.BusinessEntities.Position)">
            <summary>
            Convert the position object to the type <see cref="T:StockSharp.Algo.Positions.IPositionManager"/>.
            </summary>
            <param name="position">Position.</param>
            <returns>Position calc manager.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.AddOrderInfoLog(StockSharp.Logging.ILogReceiver,StockSharp.BusinessEntities.Order,System.String,System.Func{System.String})">
            <summary>
            Write order info to the log.
            </summary>
            <param name="receiver">Logs receiver.</param>
            <param name="order">Order.</param>
            <param name="operation">Order action name.</param>
            <param name="getAdditionalInfo">Extended order info.</param>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.AddOrderErrorLog(StockSharp.Logging.ILogReceiver,StockSharp.BusinessEntities.Order,System.String,System.Func{System.String})">
            <summary>
            Write order error to the log.
            </summary>
            <param name="receiver">Logs receiver.</param>
            <param name="order">Order.</param>
            <param name="operation">Order action name.</param>
            <param name="getAdditionalInfo">Extended order info.</param>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ApplyChanges(StockSharp.BusinessEntities.Portfolio,StockSharp.Messages.PortfolioChangeMessage,StockSharp.Algo.Storages.IExchangeInfoProvider)">
            <summary>
            Apply changes to the portfolio object.
            </summary>
            <param name="portfolio">Portfolio.</param>
            <param name="message">Portfolio change message.</param>
            <param name="exchangeInfoProvider">Exchanges and trading boards provider.</param>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ApplyChanges(StockSharp.BusinessEntities.Position,StockSharp.Messages.PositionChangeMessage)">
            <summary>
            Apply changes to the position object.
            </summary>
            <param name="position">Position.</param>
            <param name="message">Position change message.</param>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ApplyChanges(StockSharp.BusinessEntities.Security,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{StockSharp.Messages.Level1Fields,System.Object}},System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Apply change to the security object.
            </summary>
            <param name="security">Security.</param>
            <param name="changes">Changes.</param>
            <param name="serverTime">Change server time.</param>
            <param name="localTime">Local timestamp when a message was received/created.</param>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ApplyChanges(StockSharp.BusinessEntities.Security,StockSharp.Messages.Level1ChangeMessage)">
            <summary>
            Apply change to the security object.
            </summary>
            <param name="security">Security.</param>
            <param name="message">Changes.</param>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ApplyChanges(StockSharp.BusinessEntities.Security,StockSharp.Messages.SecurityMessage,StockSharp.Algo.Storages.IExchangeInfoProvider,System.Boolean)">
            <summary>
            Apply change to the security object.
            </summary>
            <param name="security">Security.</param>
            <param name="message">Meta info.</param>
            <param name="exchangeInfoProvider">Exchanges and trading boards provider.</param>
            <param name="isOverride">Override previous security data by new values.</param>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Add``2(``0,``1,System.Object)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Add``2(``0,``1,System.Decimal)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Add``2(``0,``1,System.Int32)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Add``2(``0,``1,System.Int64)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Add``2(``0,``1,StockSharp.Messages.SecurityStates)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Nullable{StockSharp.Messages.SecurityStates})">
            <summary>
            To add a change to the collection, if value is other than <see langword="null"/>.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Add``2(``0,``1,StockSharp.Messages.Sides)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Nullable{StockSharp.Messages.Sides})">
            <summary>
            To add a change to the collection, if value is other than <see langword="null"/>.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Add``2(``0,``1,StockSharp.Messages.CurrencyTypes)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Nullable{StockSharp.Messages.CurrencyTypes})">
            <summary>
            To add a change to the collection, if value is other than <see langword="null"/>.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Add``2(``0,``1,StockSharp.Messages.PortfolioStates)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Nullable{StockSharp.Messages.PortfolioStates})">
            <summary>
            To add a change to the collection, if value is other than <see langword="null"/>.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Add``2(``0,``1,System.DateTimeOffset)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Nullable{System.DateTimeOffset})">
            <summary>
            To add a change to the collection, if value is other than <see langword="null"/>.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Add``2(``0,``1,System.Boolean)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Nullable{System.Boolean})">
            <summary>
            To add a change to the collection, if value is other than <see langword="null"/>.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Decimal,System.Boolean)">
            <summary>
            To add a change to the collection, if value is other than 0.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <param name="isZeroAcceptable">Is zero value is acceptable values.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Nullable{System.Decimal},System.Boolean)">
            <summary>
            To add a change to the collection, if value is other than 0 and <see langword="null" />.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <param name="isZeroAcceptable">Is zero value is acceptable values.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Int32)">
            <summary>
            To add a change to the collection, if value is other than 0.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Nullable{System.Int32})">
            <summary>
            To add a change to the collection, if value is other than 0 and <see langword="null" />.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Int64)">
            <summary>
            To add a change to the collection, if value is other than 0.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Nullable{System.Int64})">
            <summary>
            To add a change to the collection, if value is other than 0 and <see langword="null" />.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToMicexCurrencyName(StockSharp.Messages.CurrencyTypes)">
            <summary>
            To convert the currency type into the name in the MICEX format.
            </summary>
            <param name="type">Currency type.</param>
            <returns>The currency name in the MICEX format.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.FromMicexCurrencyName(System.String,System.Action{System.Exception})">
            <summary>
            To convert the currency name in the MICEX format into <see cref="T:StockSharp.Messages.CurrencyTypes"/>.
            </summary>
            <param name="name">The currency name in the MICEX format.</param>
            <param name="errorHandler">Error handler.</param>
            <returns>Currency type. If the value is empty, <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetSecurityClassInfo(System.Collections.Generic.IDictionary{System.String,Ecng.Common.RefPair{StockSharp.Messages.SecurityTypes,System.String}},System.String)">
            <summary>
            To get the instrument description by the class.
            </summary>
            <param name="securityClassInfo">Description of the class of securities, depending on which will be marked in the <see cref="P:StockSharp.Messages.SecurityMessage.SecurityType"/> and <see cref="P:StockSharp.Messages.SecurityId.BoardCode"/>.</param>
            <param name="secClass">Security class.</param>
            <returns>The instrument description. If the class is not found, then empty value is returned as instrument type.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetBoardCode(StockSharp.Messages.IMessageAdapter,System.String)">
            <summary>
            To get the board code for the instrument class.
            </summary>
            <param name="adapter">Adapter to the trading system.</param>
            <param name="secClass">Security class.</param>
            <returns>Board code.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetPriceStep(System.Int32)">
            <summary>
            To get the price increment on the basis of accuracy.
            </summary>
            <param name="decimals">Decimals.</param>
            <returns>Price step.</returns>
        </member>
        <member name="F:StockSharp.Algo.TraderHelper.SecurityPairSeparator">
            <summary>
            The delimiter, replacing '/' in path for instruments with id like USD/EUR. Is equal to '__'.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.TraderHelper.SecurityStarSeparator">
            <summary>
            The delimiter, replacing '*' in the path for instruments with id like C.BPO-*@CANADIAN. Is equal to '##STAR##'.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.TraderHelper.SecurityColonSeparator">
            <summary>
            The delimiter, replacing ':' in the path for instruments with id like AA-CA:SPB@SPBEX. Is equal to '##COLON##'.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.TraderHelper.SecurityVerticalBarSeparator">
            <summary>
            The delimiter, replacing '|' in the path for instruments with id like AA-CA|SPB@SPBEX. Is equal to '##VBAR##'.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.TraderHelper.SecurityFirstDot">
            <summary>
            The delimiter, replacing first '.' in the path for instruments with id like .AA-CA@SPBEX. Is equal to '##DOT##'.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.SecurityIdToFolderName(System.String)">
            <summary>
            To convert the instrument identifier into the folder name, replacing reserved symbols.
            </summary>
            <param name="id">Security ID.</param>
            <returns>Directory name.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.FolderNameToSecurityId(System.String)">
            <summary>
            The inverse conversion from the <see cref="M:StockSharp.Algo.TraderHelper.SecurityIdToFolderName(System.String)"/> method.
            </summary>
            <param name="folderName">Directory name.</param>
            <returns>Security ID.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.CandleArgToFolderName(System.Object)">
            <summary>
            Convert candle parameter into folder name replacing the reserved symbols.
            </summary>
            <param name="arg">Candle arg.</param>
            <returns>Directory name.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.LookupById(StockSharp.BusinessEntities.ISecurityProvider,StockSharp.Messages.SecurityId)">
            <summary>
            To get the instrument by the identifier.
            </summary>
            <param name="provider">The provider of information about instruments.</param>
            <param name="id">Security ID.</param>
            <returns>The got instrument. If there is no instrument by given criteria, <see langword="null" /> is returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.LookupById(StockSharp.BusinessEntities.ISecurityProvider,System.String)">
            <summary>
            To get the instrument by the identifier.
            </summary>
            <param name="provider">The provider of information about instruments.</param>
            <param name="id">Security ID.</param>
            <returns>The got instrument. If there is no instrument by given criteria, <see langword="null" /> is returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.LookupByPortfolioName(StockSharp.BusinessEntities.IPortfolioProvider,System.String)">
            <summary>
            To get the portfolio by the code name.
            </summary>
            <param name="provider">The provider of information about portfolios.</param>
            <param name="id">Portfolio code name.</param>
            <returns>The got portfolio. If there is no portfolio by given criteria, <see langword="null" /> is returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.LookupByNativeId(StockSharp.BusinessEntities.ISecurityProvider,StockSharp.Algo.Storages.INativeIdStorage,System.String,System.Object)">
            <summary>
            To get the instrument by the system identifier.
            </summary>
            <param name="provider">The provider of information about instruments.</param>
            <param name="nativeIdStorage">Security native identifier storage.</param>
            <param name="storageName">Storage name.</param>
            <param name="nativeId">Native (internal) trading system security id.</param>
            <returns>The got instrument. If there is no instrument by given criteria, <see langword="null" /> is returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.LookupByCode(StockSharp.BusinessEntities.ISecurityProvider,System.String)">
            <summary>
            To get the instrument by the instrument code.
            </summary>
            <param name="provider">The provider of information about instruments.</param>
            <param name="code">Security code.</param>
            <returns>The got instrument. If there is no instrument by given criteria, <see langword="null" /> is returned.</returns>
        </member>
        <member name="F:StockSharp.Algo.TraderHelper.LookupAllCriteria">
            <summary>
            Lookup all securities predefined criteria.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.TraderHelper.LookupAllCriteriaMessage">
            <summary>
            Lookup all securities predefined criteria.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsLookupAll(StockSharp.BusinessEntities.Security)">
            <summary>
            Determine the <paramref name="criteria"/> contains lookup all filter.
            </summary>
            <param name="criteria">The instrument whose fields will be used as a filter.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsLookupAll(StockSharp.Messages.SecurityLookupMessage)">
            <summary>
            Determine the <paramref name="criteria"/> contains lookup all filter.
            </summary>
            <param name="criteria">The instrument whose fields will be used as a filter.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.LookupAll(StockSharp.BusinessEntities.ISecurityProvider)">
            <summary>
            Get all available instruments.
            </summary>
            <param name="provider">The provider of information about instruments.</param>
            <returns>All available instruments.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.DeleteAll(StockSharp.Algo.Storages.ISecurityStorage)">
            <summary>
            To delete all instruments.
            </summary>
            <param name="storage">Securities meta info storage.</param>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetSecurityValue``1(StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.BusinessEntities.Security,StockSharp.Messages.Level1Fields)">
            <summary>
            To get the value of market data for the instrument.
            </summary>
            <typeparam name="T">The type of the market data field value.</typeparam>
            <param name="provider">The market data provider.</param>
            <param name="security">Security.</param>
            <param name="field">Market-data field.</param>
            <returns>The field value. If no data, the <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetSecurityValues(StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.BusinessEntities.Security)">
            <summary>
            To get all market data values for the instrument.
            </summary>
            <param name="provider">The market data provider.</param>
            <param name="security">Security.</param>
            <returns>Filed values. If there is no data, <see langword="null" /> is returned.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToDecimal(System.Double)">
            <summary>
            To convert <see cref="T:System.Double"/> into <see cref="T:System.Decimal"/>. If the initial value is <see cref="F:System.Double.NaN"/> or <see cref="M:System.Double.IsInfinity(System.Double)"/>, <see langword="null" /> is returned.
            </summary>
            <param name="value"><see cref="T:System.Double"/> value.</param>
            <returns><see cref="T:System.Decimal"/> value.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToDecimal(System.Single)">
            <summary>
            To convert <see cref="T:System.Single"/> into <see cref="T:System.Decimal"/>. If the initial value is <see cref="F:System.Single.NaN"/> or <see cref="M:System.Single.IsInfinity(System.Single)"/>, <see langword="null" /> is returned.
            </summary>
            <param name="value"><see cref="T:System.Single"/> value.</param>
            <returns><see cref="T:System.Decimal"/> value.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Iso10962(StockSharp.Messages.SecurityMessage)">
            <summary>
            To get the type for the instrument in the ISO 10962 standard.
            </summary>
            <param name="security">Security.</param>
            <returns>Type in ISO 10962 standard.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Iso10962ToSecurityType(System.String)">
            <summary>
            To convert the type in the ISO 10962 standard into <see cref="T:StockSharp.Messages.SecurityTypes"/>.
            </summary>
            <param name="cfi">Type in ISO 10962 standard.</param>
            <returns>Security type.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Iso10962ToOptionType(System.String)">
            <summary>
            To convert the type in the ISO 10962 standard into <see cref="T:StockSharp.Messages.OptionTypes"/>.
            </summary>
            <param name="cfi">Type in ISO 10962 standard.</param>
            <returns>Option type.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.SafeGetVolume(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To get the number of operations, or discard the exception, if no information available.
            </summary>
            <param name="message">Operations.</param>
            <returns>Quantity.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.SafeGetOrderId(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To get order identifier, or discard exception, if no information available.
            </summary>
            <param name="message">Operations.</param>
            <returns>Order ID.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToTicks(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
            <summary>
            To convert level1 data into tick data.
            </summary>
            <param name="level1">Level1 data.</param>
            <returns>Tick data.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsContainsTick(StockSharp.Messages.Level1ChangeMessage)">
            <summary>
            To check, are there tick data in the level1 data.
            </summary>
            <param name="level1">Level1 data.</param>
            <returns>The test result.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToTick(StockSharp.Messages.Level1ChangeMessage)">
            <summary>
            To convert level1 data into tick data.
            </summary>
            <param name="level1">Level1 data.</param>
            <returns>Tick data.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToOrderBooks(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
            <summary>
            To convert level1 data into order books.
            </summary>
            <param name="level1">Level1 data.</param>
            <returns>Market depths.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsContainsQuotes(StockSharp.Messages.Level1ChangeMessage)">
            <summary>
            To check, are there quotes in the level1.
            </summary>
            <param name="level1">Level1 data.</param>
            <returns>Quotes.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsToday(System.DateTimeOffset)">
            <summary>
            To check the specified date is today.
            </summary>
            <param name="date">The specified date.</param>
            <returns><see langword="true"/> if the specified date is today, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetPlazaTimeInForce(System.Int64)">
            <summary>
            Extract <see cref="T:StockSharp.Messages.TimeInForce"/> from bits flag.
            </summary>
            <param name="status">Bits flag.</param>
            <returns><see cref="T:StockSharp.Messages.TimeInForce"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsPlazaSystem(System.Int64)">
            <summary>
            Extract system attribute from the bits flag.
            </summary>
            <param name="status">Bits flag.</param>
            <returns><see langword="true"/> if an order is system, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToReadableString(StockSharp.Algo.DataType)">
            <summary>
            Convert <see cref="T:StockSharp.Algo.DataType"/> to readable string.
            </summary>
            <param name="dt"><see cref="T:StockSharp.Algo.DataType"/> instance.</param>
            <returns>Readable string.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetOrCreateBoard(StockSharp.Algo.Storages.IExchangeInfoProvider,System.String,System.Func{System.String,StockSharp.BusinessEntities.ExchangeBoard})">
            <summary>
            To get a board by its code. If board with the passed name does not exist, then it will be created.
            </summary>
            <param name="exchangeInfoProvider">Exchanges and trading boards provider.</param>
            <param name="code">Board code.</param>
            <param name="createBoard">The handler creating a board, if it is not found. If the value is <see langword="null" />, then the board is created by default initialization.</param>
            <returns>Exchange board.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetOrCreateBoard(StockSharp.Algo.Storages.IExchangeInfoProvider,System.String,System.Boolean@,System.Func{System.String,StockSharp.BusinessEntities.ExchangeBoard})">
            <summary>
            To get a board by its code. If board with the passed name does not exist, then it will be created.
            </summary>
            <param name="exchangeInfoProvider">Exchanges and trading boards provider.</param>
            <param name="code">Board code.</param>
            <param name="isNew">Is newly created.</param>
            <param name="createBoard">The handler creating a board, if it is not found. If the value is <see langword="null" />, then the board is created by default initialization.</param>
            <returns>Exchange board.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsMicex(StockSharp.BusinessEntities.ExchangeBoard)">
            <summary>
            Is MICEX board.
            </summary>
            <param name="board">Board to check.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsUxStock(StockSharp.BusinessEntities.ExchangeBoard)">
            <summary>
            Is the UX exchange stock market board.
            </summary>
            <param name="board">Board to check.</param>
            <returns>Check result.</returns>
        </member>
        <member name="F:StockSharp.Algo.TraderHelper.AllSecurityId">
            <summary>
            Identifier of <see cref="P:StockSharp.Algo.TraderHelper.AllSecurity"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Algo.TraderHelper.AllSecurity">
            <summary>
            "All securities" instance.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.TraderHelper.NewsSecurity">
            <summary>
            "News" security instance.
            </summary>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetAllSecurity(StockSharp.BusinessEntities.ISecurityProvider)">
            <summary>
            Find <see cref="P:StockSharp.Algo.TraderHelper.AllSecurity"/> instance in the specified provider.
            </summary>
            <param name="provider">The provider of information about instruments.</param>
            <returns>Found instance.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsAllSecurity(StockSharp.BusinessEntities.Security)">
            <summary>
            Check if the specified security is <see cref="P:StockSharp.Algo.TraderHelper.AllSecurity"/>.
            </summary>
            <param name="security">Security.</param>
            <returns><see langword="true"/>, if the specified security is <see cref="P:StockSharp.Algo.TraderHelper.AllSecurity"/>, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsAllSecurity(StockSharp.Messages.SecurityId)">
            <summary>
            Check if the specified identifier is <see cref="P:StockSharp.Algo.TraderHelper.AllSecurity"/>.
            </summary>
            <param name="securityId">Security ID.</param>
            <returns><see langword="true"/>, if the specified identifier is <see cref="P:StockSharp.Algo.TraderHelper.AllSecurity"/>, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ValidateId(System.String@)">
            <summary>
            To check the correctness of the entered identifier.
            </summary>
            <param name="id">Security ID.</param>
            <returns>An error message text, or <see langword="null" /> if no error.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToType(StockSharp.Messages.Level1Fields)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.Level1Fields"/> to <see cref="T:System.Type"/> value.
            </summary>
            <param name="field"><see cref="T:StockSharp.Messages.Level1Fields"/> value.</param>
            <returns><see cref="T:System.Type"/> value.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToLevel1(StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.QuoteChangeMessage"/> to <see cref="T:StockSharp.Messages.Level1ChangeMessage"/> value.
            </summary>
            <param name="message"><see cref="T:StockSharp.Messages.QuoteChangeMessage"/> instance.</param>
            <returns><see cref="T:StockSharp.Messages.Level1ChangeMessage"/> instance.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToLevel1(StockSharp.Messages.CandleMessage)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.CandleMessage"/> to <see cref="T:StockSharp.Messages.Level1ChangeMessage"/> value.
            </summary>
            <param name="message"><see cref="T:StockSharp.Messages.CandleMessage"/> instance.</param>
            <returns><see cref="T:StockSharp.Messages.Level1ChangeMessage"/> instance.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToLevel1(StockSharp.Messages.ExecutionMessage)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.ExecutionMessage"/> to <see cref="T:StockSharp.Messages.Level1ChangeMessage"/> value.
            </summary>
            <param name="message"><see cref="T:StockSharp.Messages.ExecutionMessage"/> instance.</param>
            <returns><see cref="T:StockSharp.Messages.Level1ChangeMessage"/> instance.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToTimeQuotes(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage})">
            <summary>
            Convert depths to quotes.
            </summary>
            <param name="messages">Depths.</param>
            <returns>Quotes.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsAssociated(StockSharp.Messages.SecurityId,StockSharp.BusinessEntities.ExchangeBoard)">
            <summary>
            Is specified security id associated with the board.
            </summary>
            <param name="securityId">Security ID.</param>
            <param name="board">Board info.</param>
            <returns><see langword="true" />, if associated, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.LookupAll(StockSharp.BusinessEntities.IConnector,StockSharp.Messages.MessageOfflineModes)">
            <summary>
            Lookup securities, portfolios and orders.
            </summary>
            <param name="connector">The connection of interaction with trade systems.</param>
            <param name="offlineMode">Offline mode handling message.</param>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Truncate(StockSharp.BusinessEntities.MarketDepth,System.Int32)">
            <summary>
            Truncate the specified order book by max depth value.
            </summary>
            <param name="depth">Order book.</param>
            <param name="maxDepth">The maximum depth of order book.</param>
            <returns>Truncated order book.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.GetAdapter(StockSharp.Messages.IPortfolioMessageAdapterProvider,StockSharp.BusinessEntities.Portfolio)">
            <summary>
            Get adapter by portfolio.
            </summary>
            <param name="provider">The message adapter's provider.</param>
            <param name="portfolio">Portfolio.</param>
            <returns>The found adapter.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.TimeFrameCandles(System.Collections.Generic.IEnumerable{StockSharp.Algo.DataType})">
            <summary>
            Get available candles types.
            </summary>
            <param name="dataTypes">Data types.</param>
            <returns>Candles types.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToBasket``1(System.Collections.Generic.IEnumerable{``0},StockSharp.BusinessEntities.Security,StockSharp.Messages.IBasketSecurityProcessorProvider)">
            <summary>
            Convert inner securities messages to basket.
            </summary>
            <typeparam name="TMessage">Message type.</typeparam>
            <param name="innerSecMessages">Inner securities messages.</param>
            <param name="security">Basket security.</param>
            <param name="processorProvider">Basket security processors provider.</param>
            <returns>Messages of basket securities.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.CreateProcessor(StockSharp.Messages.IBasketSecurityProcessorProvider,StockSharp.BusinessEntities.Security)">
            <summary>
            Create market data processor for basket securities.
            </summary>
            <param name="processorProvider">Basket security processors provider.</param>
            <param name="security">Basket security.</param>
            <returns>Market data processor for basket securities.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsBasket(StockSharp.BusinessEntities.Security)">
            <summary>
            Is specified security is basket.
            </summary>
            <param name="security">Security.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsBasket(StockSharp.Messages.SecurityMessage)">
            <summary>
            Is specified security is basket.
            </summary>
            <param name="security">Security.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsIndex(StockSharp.BusinessEntities.Security)">
            <summary>
            Is specified security is index.
            </summary>
            <param name="security">Security.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsIndex(StockSharp.Messages.SecurityMessage)">
            <summary>
            Is specified security is index.
            </summary>
            <param name="security">Security.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsContinuous(StockSharp.BusinessEntities.Security)">
            <summary>
            Is specified security is continuous.
            </summary>
            <param name="security">Security.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.IsContinuous(StockSharp.Messages.SecurityMessage)">
            <summary>
            Is specified security is continuous.
            </summary>
            <param name="security">Security.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToBasket(StockSharp.BusinessEntities.Security,StockSharp.Messages.IBasketSecurityProcessorProvider)">
            <summary>
            Convert <see cref="T:StockSharp.BusinessEntities.Security"/> to <see cref="T:StockSharp.Algo.BasketSecurity"/> value.
            </summary>
            <param name="security">Security.</param>
            <param name="processorProvider">Basket security processors provider.</param>
            <returns>Instruments basket.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.ToBasket``1(StockSharp.BusinessEntities.Security)">
            <summary>
            Convert <see cref="T:StockSharp.BusinessEntities.Security"/> to <see cref="T:StockSharp.Algo.BasketSecurity"/> value.
            </summary>
            <param name="security">Security.</param>
            <returns>Instruments basket.</returns>
            <typeparam name="TBasketSecurity">Basket security type.</typeparam>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.LookupBoards(StockSharp.Algo.Storages.IExchangeInfoProvider,System.String)">
            <summary>
            Filter boards by code criteria.
            </summary>
            <param name="provider">The exchange boards provider.</param>
            <param name="like">Criteria.</param>
            <returns>Found boards.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.ExchangeBoard},System.String)">
            <summary>
            Filter boards by code criteria.
            </summary>
            <param name="boards">All boards.</param>
            <param name="like">Criteria.</param>
            <returns>Found boards.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio},StockSharp.Messages.PortfolioLookupMessage)">
            <summary>
            Filter portfolios by the specified criteria.
            </summary>
            <param name="portfolios">All portfolios.</param>
            <param name="criteria">Criteria.</param>
            <returns>Found portfolios.</returns>
        </member>
        <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position},StockSharp.Messages.PortfolioLookupMessage)">
            <summary>
            Filter positions the specified criteria.
            </summary>
            <param name="positions">All positions.</param>
            <param name="criteria">Criteria.</param>
            <returns>Found positions.</returns>
        </member>
        <member name="T:StockSharp.Algo.UserPermissions">
            <summary>
            Available permissions which customer receives for work with data.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.Save">
            <summary>
            Market-data downloading.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.Load">
            <summary>
            Market-data downloading.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.Delete">
            <summary>
            Data deletion.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.SecurityLookup">
            <summary>
            Security lookup.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.ExchangeLookup">
            <summary>
            Exchange lookup.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.ExchangeBoardLookup">
            <summary>
            Exchange board lookup.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.EditSecurities">
            <summary>
            Edit securities.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.EditExchanges">
            <summary>
            Edit exchanges.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.EditBoards">
            <summary>
            Edit boards.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.DeleteSecurities">
            <summary>
            Delete securities.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.DeleteExchanges">
            <summary>
            Delete exchanges.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.DeleteBoards">
            <summary>
            Delete boards.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.GetUsers">
            <summary>
            Get users.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.EditUsers">
            <summary>
            Edit users.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.DeleteUsers">
            <summary>
            Delete users.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.ServerManage">
            <summary>
            Restart.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.Trading">
            <summary>
            Trading.
            </summary>
        </member>
        <member name="F:StockSharp.Algo.UserPermissions.Withdraw">
            <summary>
            Withdraw.
            </summary>
        </member>
    </members>
</doc>
